"""
SQLAlchemy database model for {{cls.name}}

Auto-generated by running 'make codegen'. Do not edit.
Make changes to the template codegen/templates/database/models/class_name.py.j2 instead.
"""

{% set related_fields = cls.related_fields | unique(attribute='related_class.name') | list %}
{% set ignored_fields = ["File", "Entity", cls.name] %}

import uuid
import datetime
from typing import TYPE_CHECKING

from platformics.database.models.base import Entity
from sqlalchemy import ForeignKey, String, Float, Integer, Enum, Boolean, DateTime
from sqlalchemy.dialects.postgresql import UUID, JSONB
from sqlalchemy.orm import Mapped, mapped_column, relationship
{%- for field in cls.enum_fields %}
    {%- if loop.first %}
from support.enums import 
    {%- endif %}
    {{- " " }}
    {{- field.type}}
    {{- "," if not loop.last else "" }}
{%- endfor %}

if TYPE_CHECKING:
    from database.models.file import File
    {%- for related_field in related_fields %}
        {%- if related_field.related_class.name not in ignored_fields %}
    from database.models.{{related_field.related_class.snake_name}} import {{related_field.related_class.name}}
        {%- endif %}
    {%- endfor %}
else:
    File = "File"
    {%- for related_field in related_fields %}
        {%- if related_field.related_class.name not in ignored_fields %}
    {{related_field.related_class.name}} = "{{related_field.related_class.name}}"
        {%- endif %}
    {%- endfor %}


class {{cls.name}}(Entity):
    __tablename__ = "{{ cls.snake_name }}"
    __mapper_args__ = {"polymorphic_identity": __tablename__, "polymorphic_load": "inline"}

    {%- for attr in cls.owned_fields %}
        {%- if attr.type == "uuid" %}
    {{attr.name}}: Mapped[uuid.UUID] = mapped_column({%- if attr.inverse %}ForeignKey("{{attr.inverse}}"){%- else %}UUID{%- endif %}, nullable={{ "False" if attr.required else "True"}}, primary_key={{ "True" if attr.identifier else "False"}})
        {%- elif attr.type == "string" %}
    {{attr.name}}: Mapped[str] = mapped_column(String, nullable={{ "False" if attr.required else "True"}})
        {%- elif attr.type == "Array2dInt" %}
    {{attr.name}}: Mapped[JSONB] = mapped_column(JSONB, nullable={{ "False" if attr.required else "True"}})
        {%- elif attr.type == "integer" %}
    {{attr.name}}: Mapped[int] = mapped_column(Integer, nullable={{ "False" if attr.required else "True"}})
        {%- elif attr.type == "float" %}
    {{attr.name}}: Mapped[int] = mapped_column(Float, nullable={{ "False" if attr.required else "True"}})
        {%- elif attr.is_enum %}
    {{attr.name}}: Mapped[{{attr.type}}] = mapped_column(Enum({{attr.type}}, native_enum=False), nullable={{ "False" if attr.required else "True"}})
        {%- elif attr.type == "boolean" %}
    {{attr.name}}: Mapped[bool] = mapped_column(Boolean, nullable={{ "False" if attr.required else "True"}})
        {%- elif attr.type == "date" %}
    {{attr.name}}: Mapped[datetime.datetime] = mapped_column(DateTime, nullable={{ "False" if attr.required else "True"}})
        {%- else %}
            {%- if attr.is_virtual_relationship %}
                {%- if attr.multivalued %}
    {{attr.name}}: Mapped[list[{{attr.type}}]] = relationship("{{attr.type}}", back_populates="{{attr.inverse_field}}", uselist=True, foreign_keys="{{attr.type}}.{{attr.inverse_field}}_id")
                {%- else %}
    {{attr.name}}: Mapped[{{attr.type}}] = relationship("{{attr.type}}", back_populates="{{attr.inverse_field}}", uselist=True, foreign_keys="{{attr.type}}.{{attr.inverse_field}}_id")
                {%- endif %}
            {%- else %}
    {{attr.name}}_id: Mapped[uuid.UUID] = mapped_column(UUID, ForeignKey("{{attr.related_class.snake_name}}.{{attr.related_class.identifier}}"), nullable={{"False" if attr.required else "True"}}{%- if attr.identifier %}, primary_key=True{%- endif %})
              {%- if attr.type != "Entity" %}
    {{attr.name}}: Mapped["{{attr.type}}"] = relationship("{{attr.type}}",{%- if attr.inverse %} back_populates="{{attr.inverse_field}}",{%- endif %} foreign_keys={{attr.name}}_id)
              {%- endif %}
            {%- endif %}
        {%- endif %}
    {%- endfor %}

