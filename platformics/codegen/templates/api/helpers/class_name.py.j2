"""
Define GraphQL types and helper functions for supporting GROUPBY queries.

Auto-gereanted by running 'make codegen'. Do not edit.
Make changes to the template codegen/templates/api/groupby_helpers.py.j2 instead.
"""
{% set related_fields = cls.related_fields | unique(attribute='related_class.name') | list %}
{% set ignored_fields = ["File", "Entity", cls.name] %}

from typing import Any, Optional
import strawberry
import datetime
import enum
import uuid

{%- for field in cls.enum_fields %}
    {%- if loop.first %}
from support.enums import 
    {%- endif %}
    {{- " " }}
    {{- field.type}}
    {{- "," if not loop.last else "" }}
{%- endfor %}

{%- for field in cls.related_fields %}
    {%- if field.related_class.name not in ignored_fields and not field.multivalued %}
from api.helpers.{{ field.related_class.snake_name }} import {{ field.related_class.name }}GroupByOptions, build_{{ field.related_class.snake_name }}_groupby_output
    {%- endif %}
{%- endfor %}

@strawberry.type
class {{ cls.name }}GroupByOptions:
{%- for attr in cls.visible_fields %}
    {%- if attr.type != "File" and not attr.multivalued %}
        {%- if attr.inverse %}
    {{ attr.name }}: Optional[{{ attr.related_class.name }}GroupByOptions] = None
        {%- else %}
            {%- if attr.type == "string" %}
    {{ attr.name }}: Optional[str] = None
            {%- elif attr.type == "date" %}
    {{ attr.name }}: Optional[datetime.datetime] = None
            {%- elif attr.type == "boolean" %}
    {{ attr.name }}: Optional[bool] = None
            {%- elif attr.type == "uuid" %}
    {{ attr.name }}: Optional[uuid.UUID] = None
            {%- elif attr.type == "Array2dInt" %}
    {{ attr.name }}: Optional[list[list[int]]] = None
    {# todo enums #}
            {%- else %}
    {{ attr.name }}: Optional[{{ attr.type }}] = None
            {%- endif %}
        {%- endif %}
    {%- endif %}
{%- endfor %}


def build_{{ cls.snake_name }}_groupby_output(
    group_object: Optional[{{ cls.name }}GroupByOptions],
    keys: list[str],
    value: Any,
) -> {{ cls.name }}GroupByOptions:
    if not group_object:
        group_object = {{ cls.name }}GroupByOptions()

    key = keys.pop(0)
    match key:
{%- for attr in cls.visible_fields %}
    {%- if attr.type != "File" and not attr.multivalued %}
        {%- if attr.inverse %}
        case "{{ attr.related_class.snake_name }}":
            if getattr(group_object, key):
                value = build_{{ attr.related_class.snake_name }}_groupby_output(
                    getattr(group_object, key),
                    keys,
                    value,
                )
            else:
                value = build_{{ attr.related_class.snake_name }}_groupby_output(
                    None,
                    keys,
                    value,
                )
        {%- endif %}
    {%- endif %}
{%- endfor %}
        case _:
            pass # TODO: log warning/error if key is not recognized
    setattr(group_object, key, value)
    return group_object
