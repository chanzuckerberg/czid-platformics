"""
GraphQL type for {{cls.name}}

Auto-generated by running 'make codegen'. Do not edit.
Make changes to the template codegen/templates/api/types/class_name.py.j2 instead.
"""

# ruff: noqa: E501 Line too long

import typing
from typing import TYPE_CHECKING, Annotated, Optional, Sequence, Callable

import database.models as db
import strawberry
import datetime
from platformics.api.core.helpers import get_db_rows
{%- if render_files %}
from api.files import File, FileWhereClause
{%- endif %}
from api.types.entities import EntityInterface
from cerbos.sdk.client import CerbosClient
from cerbos.sdk.model import Principal, Resource
from fastapi import Depends
from platformics.api.core.deps import get_cerbos_client, get_db_session, require_auth_principal
from platformics.api.core.gql_to_sql import EnumComparators, DatetimeComparators, IntComparators, StrComparators, UUIDComparators, BoolComparators
from platformics.api.core.strawberry_extensions import DependencyExtension
from platformics.security.authorization import CerbosAction, get_resource_query
from sqlalchemy import inspect
from sqlalchemy.ext.asyncio import AsyncSession
from strawberry import relay
from strawberry.types import Info
from typing_extensions import TypedDict

{%- for field in cls.enum_fields %}
    {%- if loop.first %}
from support.enums import 
    {%- endif %}
    {{- " " }}
    {{- field.type}}
    {{- "," if not loop.last else "" }}
{%- endfor %}

E = typing.TypeVar("E", db.File, db.Entity)
T = typing.TypeVar("T")

if TYPE_CHECKING:
    {%- for related_field in cls.related_fields %}
        {%- if related_field.related_class.name not in ["File", "Entity"] %}
    from api.types.{{related_field.related_class.snake_name}} import ({{related_field.related_class.name}}WhereClause, {{related_field.related_class.name}})
        {%- endif %}
    {%- endfor %}
    pass
else:
    {%- for related_field in cls.related_fields %}
        {%- if related_field.related_class.name not in ["File", "Entity"] %}
    {{related_field.related_class.name}}WhereClause = "{{related_field.related_class.name}}WhereClause"
    {{related_field.related_class.name}} = "{{related_field.related_class.name}}"
        {%- endif %}
    {%- endfor %}
    pass


"""
------------------------------------------------------------------------------
Dataloaders
------------------------------------------------------------------------------
These are batching functions for loading related objects to avoid N+1 queries.
"""

{%- for related_field in cls.related_fields %}
    {%- if related_field.inverse and related_field.related_class.name not in ["File", "Entity"] %}
        {%- if related_field.multivalued %}
@relay.connection(
        relay.ListConnection[Annotated["{{ related_field.type }}", strawberry.lazy("api.types.{{ related_field.related_class.snake_name }}")]]  # type:ignore
)
async def load_{{ related_field.related_class.snake_name }}_rows(
    root: "{{ cls.name }}",
    info: Info,
    where: Annotated["{{ related_field.type }}WhereClause", strawberry.lazy("api.types.{{ related_field.related_class.snake_name }}")] | None = None,
) -> Sequence[Annotated["{{ related_field.type }}", strawberry.lazy("api.types.{{ related_field.related_class.snake_name }}")]]:
        {%- else %}
@strawberry.field
async def load_{{ related_field.related_class.snake_name }}_rows(
    root: "{{ cls.name }}",
    info: Info,
    where: Annotated["{{ related_field.type }}WhereClause", strawberry.lazy("api.types.{{ related_field.related_class.snake_name }}")] | None = None,
) -> Optional[Annotated["{{ related_field.type }}", strawberry.lazy("api.types.{{ related_field.related_class.snake_name }}")]]:
        {%- endif %}
    dataloader = info.context["sqlalchemy_loader"]
    mapper = inspect(db.{{ cls.name }})
        {%- if related_field.multivalued %}
    relationship = mapper.relationships["{{ related_field.name }}"]
    return await dataloader.loader_for(relationship, where).load(root.id)  # type:ignore
        {%- else %}
    relationship = mapper.relationships["{{ related_field.name }}"]
    return await dataloader.loader_for(relationship, where).load(root.{{ related_field.name }}_id) # type:ignore
        {%- endif %}
    {%- endif %}
{%- endfor %}


{%- if cls.owned_fields | map(attribute="type") | select("equalto", "File") | list | length > 0 %}
"""
------------------------------------------------------------------------------
Dataloader for File object
------------------------------------------------------------------------------
"""

def load_files_from(attr_name: str) -> Callable:
    @strawberry.field
    async def load_files(
        root: "{{ cls.name }}",
        info: Info,
        where: Annotated["FileWhereClause", strawberry.lazy("api.files")] | None = None,
    ) -> Optional[Annotated["File", strawberry.lazy("api.files")]]:
        """
        Given a list of {{ cls.name }} IDs for a certain file type, return related Files
        """
        dataloader = info.context["sqlalchemy_loader"]
        mapper = inspect(db.{{ cls.name }})
        relationship = mapper.relationships[attr_name]
        return await dataloader.loader_for(relationship, where).load(getattr(root, f"{attr_name}_id"))  # type:ignore

    return load_files
{%- endif %}

"""
------------------------------------------------------------------------------
Define Strawberry GQL types
------------------------------------------------------------------------------
"""

"""
Only let users specify IDs in WHERE clause when mutating data (for safety).
We can extend that list as we gather more use cases from the FE team.
"""
@strawberry.input
class {{ cls.name }}WhereClauseMutations(TypedDict):
    id: UUIDComparators | None


"""
Supported WHERE clause attributes
"""
@strawberry.input
class {{ cls.name }}WhereClause(TypedDict):
    id: UUIDComparators | None
    producing_run_id: IntComparators | None
    owner_user_id: IntComparators | None
    collection_id: IntComparators | None
    {%- for attr in cls.owned_fields %}
        {%- if attr.type == "uuid" %}
            {%- if attr.name != "entity_id" %}
    {{ attr.name }}: Optional[UUIDComparators] | None
            {%- endif %}
        {%- elif attr.type == "string" %}
    {{ attr.name }}: Optional[StrComparators] | None
        {%- elif attr.is_enum %}
    {{ attr.name }}: Optional[EnumComparators[{{ attr.type }}]] | None
        {%- elif attr.type == "int" %}
    {{ attr.name }}: Optional[IntComparators] | None
        {%- elif attr.type == "boolean" %}
    {{ attr.name }}: Optional[BoolComparators] | None
        {%- elif attr.type == "date" %}
    {{ attr.name }}: Optional[DatetimeComparators] | None
        {%- elif attr.inverse %}
    {{ attr.name }}: Optional[Annotated["{{ attr.type }}WhereClause", strawberry.lazy("api.types.{{ attr.related_class.snake_name }}")]] | None
        {%- endif %}
    {%- endfor %}

{# Macro to output "X" or "Optional[X]" #}
{% macro getType(type, required) -%}
    {%- if required %} {{ type }}
    {%- else %} Optional[{{ type }}] = None
    {%- endif %}
{%- endmacro %}

"""
Define {{ cls.name }} type
"""
@strawberry.type
class {{ cls.name }}(EntityInterface):
    id: strawberry.ID
    producing_run_id: Optional[int]
    owner_user_id: int
    collection_id: int
    {%- for attr in cls.owned_fields %}
        {%- if attr.type == "uuid" %}
           {%- if attr.name != "entity_id" %}
    {{ attr.name }}: {{ getType("strawberry.ID", attr.required) }}
           {%- endif %}
        {%- elif attr.type == "string" %}
    {{ attr.name }}: {{ getType("str", attr.required) }}
        {%- elif attr.is_enum %}
    {{ attr.name }}: {{ getType(attr.type, attr.required) }}
        {%- elif attr.type == "int" %}
    {{ attr.name }}: {{ getType("int", attr.required) }}
        {%- elif attr.type == "boolean" %}
    {{ attr.name }}: {{ getType("bool", attr.required) }}
        {%- elif attr.type == "date" %}
    {{ attr.name }}: {{ getType("datetime.datetime", attr.required) }}
        {%- elif attr.type == "File" %}
    {{ attr.name }}_id: Optional[strawberry.ID]
    {{ attr.name }}: Optional[Annotated["File", strawberry.lazy("api.files")]] = load_files_from("{{ attr.name }}")  # type: ignore
        {%- elif attr.inverse %}
    {{ attr.name }}: {{ "Sequence" if attr.multivalued else "Optional" }}[Annotated["{{ attr.type }}", strawberry.lazy("api.types.{{ attr.related_class.snake_name }}")]] = load_{{ attr.related_class.snake_name }}_rows  # type:ignore
        {%- endif %}
    {%- endfor %}

"""
We need to add this to each Queryable type so that strawberry will accept either our
Strawberry type *or* a SQLAlchemy model instance as a valid response class from a resolver
"""
{{ cls.name }}.__strawberry_definition__.is_type_of = (  # type: ignore
    lambda obj, info: type(obj) == db.{{ cls.name }} or type(obj) == {{ cls.name }}
)

"""
------------------------------------------------------------------------------
Mutation types
------------------------------------------------------------------------------
"""
{# Macro for mutations to output X or Optional[X] #}
{% macro getTypeMutation(action, type, required) -%}
    {%- if action == "Create" and required %} {{ type }}
    {%- else %} Optional[{{ type }}] = None
    {%- endif %}
{%- endmacro %}

{# Generate Create and Update Strawberry input types #}
{%- for action in ["Create", "Update"] %}
@strawberry.input()
class {{ cls.name }}{{ action }}Input:
    collection_id: {{ getTypeMutation(action, "int", true) }}
    {%- for attr in cls.owned_fields %}
        {%- if attr.type == "uuid" %} {# Don't allow setting UUID fields #}
        {%- elif attr.type == "string" %}
    {{ attr.name }}: {{ getTypeMutation(action, "str", attr.required) }}
        {%- elif attr.is_enum %}
    {{ attr.name }}: {{ getTypeMutation(action, attr.type, attr.required) }}
        {%- elif attr.type == "int" %}
    {{ attr.name }}: {{ getTypeMutation(action, "int", attr.required) }}
        {%- elif attr.type == "boolean" %}
    {{ attr.name }}: {{ getTypeMutation(action, "bool", attr.required) }}
        {%- elif attr.type == "date" %}
    {{ attr.name }}: {{ getTypeMutation(action, "datetime.datetime", attr.required) }}
        {%- elif attr.type == "File" %}
    {{ attr.name }}_id: {{ getTypeMutation(action, "strawberry.ID", attr.required) }}
        {%- elif attr.inverse and not attr.multivalued %} {# Don't include multivalued fields, only fields where can update an ID #}
    {{ attr.name }}_id: {{ getTypeMutation(action, "strawberry.ID", attr.required) }}
        {%- endif %}
    {%- endfor %}
{%- endfor %}


"""
------------------------------------------------------------------------------
Utilities
------------------------------------------------------------------------------
"""

@strawberry.field(extensions=[DependencyExtension()])
async def resolve_{{ cls.plural_snake_name }}(
    session: AsyncSession = Depends(get_db_session, use_cache=False),
    cerbos_client: CerbosClient = Depends(get_cerbos_client),
    principal: Principal = Depends(require_auth_principal),
    where: Optional[{{ cls.name }}WhereClause] = None,
) -> typing.Sequence[{{ cls.name }}]:
    """
    Resolve {{ cls.name }} objects. Used for queries (see api/queries.py).
    """
    return await get_db_rows(db.{{ cls.name }}, session, cerbos_client, principal, where, [])  # type: ignore

@strawberry.mutation(extensions=[DependencyExtension()])
async def create_{{ cls.snake_name }}(
    input: {{ cls.name }}CreateInput,
    session: AsyncSession = Depends(get_db_session, use_cache=False),
    cerbos_client: CerbosClient = Depends(get_cerbos_client),
    principal: Principal = Depends(require_auth_principal),
) -> db.Entity:
    """
    Create a new {{ cls.name }} object. Used for mutations (see api/mutations.py).
    """
    params = input.__dict__

    # Validate that user can create entity in this collection
    attr = {"collection_id": input.collection_id}
    resource = Resource(id="NEW_ID", kind=db.{{ cls.name }}.__tablename__, attr=attr)
    if not cerbos_client.is_allowed("create", principal, resource):
        raise Exception("Unauthorized: Cannot create entity in this collection")

    # Save to DB
    params["owner_user_id"] = int(principal.id)
    new_entity = db.{{ cls.name }}(**params)
    session.add(new_entity)
    await session.commit()
    return new_entity


@strawberry.mutation(extensions=[DependencyExtension()])
async def update_{{ cls.snake_name }}(
    input: {{ cls.name }}UpdateInput,
    where: {{ cls.name }}WhereClauseMutations,
    session: AsyncSession = Depends(get_db_session, use_cache=False),
    cerbos_client: CerbosClient = Depends(get_cerbos_client),
    principal: Principal = Depends(require_auth_principal),
) -> Sequence[db.Entity]:
    """
    Update {{ cls.name }} objects. Used for mutations (see api/mutations.py).
    """
    params = input.__dict__
    
    # Need at least one thing to update
    num_params = len([x for x in params if params[x] is not None])
    if num_params == 0:
        raise Exception("No fields to update")

    # Fetch entities for update, if we have access to them
    entities = await get_db_rows(db.{{ cls.name }}, session, cerbos_client, principal, where, [], CerbosAction.UPDATE)
    if len(entities) == 0:
        raise Exception("Unauthorized: Cannot update entities")

    # Validate that the user has access to the new collection ID
    if input.collection_id:
        attr = {"collection_id": input.collection_id}
        resource = Resource(id="SOME_ID", kind=db.{{ cls.name }}.__tablename__, attr=attr)
        if not cerbos_client.is_allowed(CerbosAction.UPDATE, principal, resource):
            raise Exception("Unauthorized: Cannot access new collection")

    # Update DB
    for entity in entities:
        for key in params:
            if params[key]:
                setattr(entity, key, params[key])
    await session.commit()
    return entities


@strawberry.mutation(extensions=[DependencyExtension()])
async def delete_{{ cls.snake_name }}(
    where: {{ cls.name }}WhereClauseMutations,
    session: AsyncSession = Depends(get_db_session, use_cache=False),
    cerbos_client: CerbosClient = Depends(get_cerbos_client),
    principal: Principal = Depends(require_auth_principal),
) -> Sequence[db.Entity]:
    """
    Delete {{ cls.name }} objects. Used for mutations (see api/mutations.py).
    """
    # Fetch entities for deletion, if we have access to them
    entities = await get_db_rows(db.{{ cls.name }}, session, cerbos_client, principal, where, [], CerbosAction.DELETE)
    if len(entities) == 0:
        raise Exception("Unauthorized: Cannot delete entities")

    # Update DB
    for entity in entities:
        await session.delete(entity)
    await session.commit()
    return entities
