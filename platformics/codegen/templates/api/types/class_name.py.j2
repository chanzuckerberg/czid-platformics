"""
GraphQL type for {{cls.name}}

Auto-generated by running 'make codegen'. Do not edit.
Make changes to the template codegen/templates/api/types/class_name.py.j2 instead.
"""

# ruff: noqa: E501 Line too long

{% set related_fields = cls.related_fields | unique(attribute='related_class.name') | list %}
{% set ignored_fields = ["File", "Entity", cls.name] %}

import typing
from typing import TYPE_CHECKING, Annotated, Any, Optional, Sequence, Callable, List

import database.models as db
import strawberry
import datetime
from platformics.api.core.helpers import get_db_rows, get_aggregate_db_rows
{%- if render_files %}
from api.files import File, FileWhereClause
{%- endif %}
from api.types.entities import EntityInterface
{%- for related_field in related_fields %}
    {%- if related_field.related_class.name not in ignored_fields and related_field.multivalued %}
from api.types.{{related_field.related_class.snake_name}} import ({{related_field.related_class.name}}Aggregate, format_{{related_field.related_class.snake_name}}_aggregate_output)
    {%- endif %}
{%- endfor %}
from cerbos.sdk.client import CerbosClient
from cerbos.sdk.model import Principal, Resource
from fastapi import Depends
from platformics.api.core.errors import PlatformicsException
from platformics.api.core.deps import get_cerbos_client, get_db_session, require_auth_principal, is_system_user
from platformics.api.core.gql_to_sql import aggregator_map, orderBy, EnumComparators, DatetimeComparators, IntComparators, FloatComparators, StrComparators, UUIDComparators, BoolComparators
from platformics.api.core.strawberry_extensions import DependencyExtension
from platformics.security.authorization import CerbosAction, get_resource_query
from sqlalchemy import inspect
from sqlalchemy.engine.row import RowMapping
from sqlalchemy.ext.asyncio import AsyncSession
from strawberry import relay
from strawberry.field import StrawberryField
from strawberry.types import Info
from typing_extensions import TypedDict
import enum

{%- for field in cls.enum_fields %}
    {%- if loop.first %}
from support.enums import 
    {%- endif %}
    {{- " " }}
    {{- field.type}}
    {{- "," if not loop.last else "" }}
{%- endfor %}

E = typing.TypeVar("E", db.File, db.Entity)
T = typing.TypeVar("T")

if TYPE_CHECKING:
    {%- for related_field in related_fields %}
        {%- if related_field.related_class.name not in ignored_fields %}
    from api.types.{{related_field.related_class.snake_name}} import ({{related_field.related_class.name}}OrderByClause, {{related_field.related_class.name}}WhereClause, {{related_field.related_class.name}})
        {%- endif %}
    {%- endfor %}
    pass
else:
    {%- for related_field in related_fields %}
        {%- if related_field.related_class.name not in ignored_fields %}
    {{related_field.related_class.name}}WhereClause = "{{related_field.related_class.name}}WhereClause"
    {{related_field.related_class.name}} = "{{related_field.related_class.name}}"
    {{related_field.related_class.name}}OrderByClause = "{{related_field.related_class.name}}OrderByClause"
        {%- endif %}
    {%- endfor %}
    pass


"""
------------------------------------------------------------------------------
Dataloaders
------------------------------------------------------------------------------
These are batching functions for loading related objects to avoid N+1 queries.
"""

{%- for related_field in related_fields %}
    {%- if related_field.inverse and related_field.related_class.name not in ignored_fields %}
        {%- if related_field.multivalued %}
@relay.connection(
        relay.ListConnection[Annotated["{{ related_field.type }}", strawberry.lazy("api.types.{{ related_field.related_class.snake_name }}")]]  # type:ignore
)
async def load_{{ related_field.related_class.snake_name }}_rows(
    root: "{{ cls.name }}",
    info: Info,
    where: Annotated["{{ related_field.type }}WhereClause", strawberry.lazy("api.types.{{ related_field.related_class.snake_name }}")] | None = None,
    order_by: Optional[list[Annotated["{{ related_field.type }}OrderByClause", strawberry.lazy("api.types.{{ related_field.related_class.snake_name }}")]]] = [],
) -> Sequence[Annotated["{{ related_field.type }}", strawberry.lazy("api.types.{{ related_field.related_class.snake_name }}")]]:
        {%- else %}
@strawberry.field
async def load_{{ related_field.related_class.snake_name }}_rows(
    root: "{{ cls.name }}",
    info: Info,
    where: Annotated["{{ related_field.type }}WhereClause", strawberry.lazy("api.types.{{ related_field.related_class.snake_name }}")] | None = None,
    order_by: Optional[list[Annotated["{{ related_field.type }}OrderByClause", strawberry.lazy("api.types.{{ related_field.related_class.snake_name }}")]]] = [],
) -> Optional[Annotated["{{ related_field.type }}", strawberry.lazy("api.types.{{ related_field.related_class.snake_name }}")]]:
        {%- endif %}
    dataloader = info.context["sqlalchemy_loader"]
    mapper = inspect(db.{{ cls.name }})
        {%- if related_field.multivalued %}
    relationship = mapper.relationships["{{ related_field.name }}"]
    return await dataloader.loader_for(relationship, where, order_by).load(root.id)  # type:ignore
        {%- else %}
            {%- if related_field.is_virtual_relationship %}
    relationship = mapper.relationships["{{ related_field.name }}"]
    return await dataloader.loader_for(relationship, where).load(root.id) # type:ignore
            {%- else %}
    relationship = mapper.relationships["{{ related_field.name }}"]
    return await dataloader.loader_for(relationship, where, order_by).load(root.{{ related_field.name }}_id) # type:ignore
            {%- endif %}
        {%- endif %}


        {%- if related_field.multivalued %}
@strawberry.field
async def load_{{ related_field.related_class.snake_name }}_aggregate_rows(
    root: "{{ cls.name }}",
    info: Info,
    where: Annotated["{{ related_field.type }}WhereClause", strawberry.lazy("api.types.{{ related_field.related_class.snake_name }}")] | None = None,
) -> Optional[Annotated["{{ related_field.related_class.name }}Aggregate", strawberry.lazy("api.types.{{ related_field.related_class.snake_name }}")]]:
    selections = info.selected_fields[0].selections[0].selections
    dataloader = info.context["sqlalchemy_loader"]
    mapper = inspect(db.{{ cls.name }})
    relationship = mapper.relationships["{{ related_field.name }}"]
    rows = await dataloader.aggregate_loader_for(relationship, where, selections).load(root.id)  # type:ignore
    # Aggregate queries always return a single row, so just grab the first one
    result = rows[0] if rows else None
    aggregate_output = format_{{ related_field.related_class.snake_name }}_aggregate_output(result)
    return {{ related_field.related_class.name }}Aggregate(aggregate=aggregate_output)
        {%- endif %}

    {%- endif %}
{%- endfor %}


{%- if cls.owned_fields | map(attribute="type") | select("equalto", "File") | list | length > 0 %}
"""
------------------------------------------------------------------------------
Dataloader for File object
------------------------------------------------------------------------------
"""

def load_files_from(attr_name: str) -> Callable:
    @strawberry.field
    async def load_files(
        root: "{{ cls.name }}",
        info: Info,
        where: Annotated["FileWhereClause", strawberry.lazy("api.files")] | None = None,
    ) -> Optional[Annotated["File", strawberry.lazy("api.files")]]:
        """
        Given a list of {{ cls.name }} IDs for a certain file type, return related Files
        """
        dataloader = info.context["sqlalchemy_loader"]
        mapper = inspect(db.{{ cls.name }})
        relationship = mapper.relationships[attr_name]
        return await dataloader.loader_for(relationship, where).load(getattr(root, f"{attr_name}_id"))  # type:ignore

    return load_files
{%- endif %}

"""
------------------------------------------------------------------------------
Define Strawberry GQL types
------------------------------------------------------------------------------
"""

"""
Only let users specify IDs in WHERE clause when mutating data (for safety).
We can extend that list as we gather more use cases from the FE team.
"""
@strawberry.input
class {{ cls.name }}WhereClauseMutations(TypedDict):
    id: UUIDComparators | None


"""
Supported WHERE clause attributes
"""
@strawberry.input
class {{ cls.name }}WhereClause(TypedDict):
    id: UUIDComparators | None
    producing_run_id: IntComparators | None
    owner_user_id: IntComparators | None
    collection_id: IntComparators | None
    {%- for attr in cls.owned_fields %}
        {%- if attr.type == "uuid" %}
    {{ attr.name }}: Optional[UUIDComparators] | None
        {%- elif attr.type == "string" %}
    {{ attr.name }}: Optional[StrComparators] | None
        {%- elif attr.is_enum %}
    {{ attr.name }}: Optional[EnumComparators[{{ attr.type }}]] | None
        {%- elif attr.type == "int" %}
    {{ attr.name }}: Optional[IntComparators] | None
        {%- elif attr.type == "float" %}
    {{ attr.name }}: Optional[FloatComparators] | None
        {%- elif attr.type == "boolean" %}
    {{ attr.name }}: Optional[BoolComparators] | None
        {%- elif attr.type == "date" %}
    {{ attr.name }}: Optional[DatetimeComparators] | None
        {%- elif attr.inverse %}
    {{ attr.name }}: Optional[Annotated["{{ attr.type }}WhereClause", strawberry.lazy("api.types.{{ attr.related_class.snake_name }}")]] | None
        {%- endif %}
    {%- endfor %}

"""
Supported ORDER BY clause attributes
"""
@strawberry.input
class {{ cls.name }}OrderByClause(TypedDict):
    {%- for attr in cls.visible_fields %}
        {%- if attr.type != "File" and not attr.multivalued %}
            {%- if attr.inverse %}
    {{ attr.name }}: Optional[Annotated["{{ attr.type }}OrderByClause", strawberry.lazy("api.types.{{ attr.related_class.snake_name }}")]] | None
            {%- else %}
    {{ attr.name }}: Optional[orderBy] | None
            {%- endif %}
        {%- endif %}
    {%- endfor %}

{# Macro to output "X" or "Optional[X]" #}
{% macro getType(type, required) -%}
    {%- if required %} {{ type }}
    {%- else %} Optional[{{ type }}] = None
    {%- endif %}
{%- endmacro %}

"""
Define {{ cls.name }} type
"""
@strawberry.type
class {{ cls.name }}(EntityInterface):
    {%- for attr in cls.visible_fields %}
        {%- if attr.type == "uuid" %}
    {{ attr.name }}: {{ getType("strawberry.ID", attr.required) }}
        {%- elif attr.type == "string" %}
    {{ attr.name }}: {{ getType("str", attr.required) }}
        {%- elif attr.type == "Array2dInt" %}
    {{ attr.name }}: {{ getType("List[List[int]]", attr.required) }}
        {%- elif attr.is_enum %}
    {{ attr.name }}: {{ getType(attr.type, attr.required) }}
        {%- elif attr.type == "int" %}
    {{ attr.name }}: {{ getType("int", attr.required) }}
        {%- elif attr.type == "float" %}
    {{ attr.name }}: {{ getType("float", attr.required) }}
        {%- elif attr.type == "boolean" %}
    {{ attr.name }}: {{ getType("bool", attr.required) }}
        {%- elif attr.type == "date" %}
    {{ attr.name }}: {{ getType("datetime.datetime", attr.required) }}
        {%- elif attr.type == "File" %}
    {{ attr.name }}_id: Optional[strawberry.ID]
    {{ attr.name }}: Optional[Annotated["File", strawberry.lazy("api.files")]] = load_files_from("{{ attr.name }}")  # type: ignore
        {%- elif attr.inverse %}
    {{ attr.name }}: {{ "Sequence" if attr.multivalued else "Optional" }}[Annotated["{{ attr.type }}", strawberry.lazy("api.types.{{ attr.related_class.snake_name }}")]] = load_{{ attr.related_class.snake_name }}_rows  # type:ignore
            {%- if attr.multivalued %}
    {{ attr.name }}_aggregate : Optional[Annotated["{{ attr.related_class.name }}Aggregate", strawberry.lazy("api.types.{{ attr.related_class.snake_name }}")]] = load_{{ attr.related_class.snake_name }}_aggregate_rows  # type:ignore
            {%- endif %}
        {%- endif %}
    {%- endfor %}

"""
We need to add this to each Queryable type so that strawberry will accept either our
Strawberry type *or* a SQLAlchemy model instance as a valid response class from a resolver
"""
{{ cls.name }}.__strawberry_definition__.is_type_of = (  # type: ignore
    lambda obj, info: type(obj) == db.{{ cls.name }} or type(obj) == {{ cls.name }}
)

"""
------------------------------------------------------------------------------
Aggregation types
------------------------------------------------------------------------------
"""

"""
Define columns that support numerical aggregations
"""
@strawberry.type
class {{ cls.name }}NumericalColumns:
    {%- for attr in cls.visible_fields %}
        {%- if attr.type == "int" %}
    {{ attr.name }}: {{ getType("int", False) }}
        {%- elif attr.type == "float" %}
    {{ attr.name }}: {{ getType("float", False) }}
        {%- endif %}
    {%- endfor %}

"""
Define columns that support min/max aggregations
"""
@strawberry.type
class {{ cls.name }}MinMaxColumns:
    {%- for attr in cls.visible_fields %}
        {%- if attr.type == "int" %}
    {{ attr.name }}: {{ getType("int", False) }}
        {%- elif attr.type == "float" %}
    {{ attr.name }}: {{ getType("float", False) }}
        {%- elif attr.type == "string" %}
    {{ attr.name }}: {{ getType("str", False) }}
        {%- elif attr.type == "date" %}
    {{ attr.name }}: {{ getType("datetime.datetime", False) }}
        {%- endif %}
    {%- endfor %}

"""
Define enum of all columns to support count and count(distinct) aggregations
"""
@strawberry.enum
class {{ cls.name }}CountColumns(enum.Enum):
    {%- for attr in cls.visible_fields %}
    {{ attr.name }} = "{{ attr.name }}"
    {%- endfor %}

"""
All supported aggregation functions
"""
@strawberry.type
class {{ cls.name }}AggregateFunctions:
    # This is a hack to accept "distinct" and "columns" as arguments to "count"
    @strawberry.field
    def count(self, distinct: Optional[bool] = False, columns: Optional[{{ cls.name }}CountColumns] = None) -> Optional[int]:
        # Count gets set with the proper value in the resolver, so we just return it here
        return self.count # type: ignore
    sum: Optional[{{ cls.name }}NumericalColumns] = None
    avg: Optional[{{ cls.name }}NumericalColumns] = None
    min: Optional[{{ cls.name }}MinMaxColumns] = None
    max: Optional[{{ cls.name }}MinMaxColumns] = None
    stddev: Optional[{{ cls.name }}NumericalColumns] = None
    variance: Optional[{{ cls.name }}NumericalColumns] = None

"""
Wrapper around {{ cls.name }}AggregateFunctions
"""
@strawberry.type
class {{ cls.name }}Aggregate:
    aggregate: Optional[{{ cls.name }}AggregateFunctions] = None

"""
------------------------------------------------------------------------------
Mutation types
------------------------------------------------------------------------------
"""
{# Macro for mutations to output X or Optional[X] #}
{% macro getTypeMutation(action, type, required) -%}
    {%- if action == "Create" and required %} {{ type }}
    {%- else %} Optional[{{ type }}] = None
    {%- endif %}
{%- endmacro %}

{% macro getInputFields(fields) -%}
    {%- for attr in fields %}
        {%- if attr.type == "string" %}
    {{ attr.name }}: {{ getTypeMutation(action, "str", attr.required) }}
        {%- elif attr.type == "Array2dInt" %}
    {{ attr.name }}: {{ getTypeMutation(action, "List[List[int]]", attr.required) }}
        {%- elif attr.is_enum %}
    {{ attr.name }}: {{ getTypeMutation(action, attr.type, attr.required) }}
        {%- elif attr.type == "int" %}
    {{ attr.name }}: {{ getTypeMutation(action, "int", attr.required) }}
        {%- elif attr.type == "float" %}
    {{ attr.name }}: {{ getTypeMutation(action, "float", attr.required) }}
        {%- elif attr.type == "boolean" %}
    {{ attr.name }}: {{ getTypeMutation(action, "bool", attr.required) }}
        {%- elif attr.type == "date" %}
    {{ attr.name }}: {{ getTypeMutation(action, "datetime.datetime", attr.required) }}
        {%- elif attr.type == "File" %}
    {{ attr.name }}_id: {{ getTypeMutation(action, "strawberry.ID", attr.required) }}
        {%- elif attr.inverse and not attr.multivalued %} {# Don't include multivalued fields, only fields where we can update an ID #}
    {{ attr.name }}_id: {{ getTypeMutation(action, "strawberry.ID", attr.required) }}
        {%- endif %}
    {%- endfor %}
{%- endmacro %}

{# Generate Create and Update Strawberry input types #}
{%- if cls.create_fields %}
@strawberry.input()
class {{ cls.name }}CreateInput:
    {{- getInputFields(cls.create_fields) }}
{%- endif %}

{%- if cls.mutable_fields %}
@strawberry.input()
class {{ cls.name }}UpdateInput:
    {{- getInputFields(cls.mutable_fields) }}
{%- endif %}

"""
------------------------------------------------------------------------------
Utilities
------------------------------------------------------------------------------
"""

@strawberry.field(extensions=[DependencyExtension()])
async def resolve_{{ cls.plural_snake_name }}(
    session: AsyncSession = Depends(get_db_session, use_cache=False),
    cerbos_client: CerbosClient = Depends(get_cerbos_client),
    principal: Principal = Depends(require_auth_principal),
    where: Optional[{{ cls.name }}WhereClause] = None,
    order_by: Optional[list[{{ cls.name }}OrderByClause]] = [],
) -> typing.Sequence[{{ cls.name }}]:
    """
    Resolve {{ cls.name }} objects. Used for queries (see api/queries.py).
    """
    return await get_db_rows(db.{{ cls.name }}, session, cerbos_client, principal, where, order_by)  # type: ignore


def format_{{ cls.snake_name }}_aggregate_output(query_results: RowMapping) -> {{ cls.name }}AggregateFunctions:
    """
    Given a row from the DB containing the results of an aggregate query,
    format the results using the proper GraphQL types.
    """
    output = {{ cls.name }}AggregateFunctions()
    for aggregate_name, value in query_results.items():
        if aggregate_name == "count":
            output.count = value
        else:
            aggregator_fn, col_name = aggregate_name.split("_", 1)
            # Filter out the group_by key from the results if one was provided.
            if aggregator_fn in aggregator_map.keys():
                if not getattr(output, aggregator_fn):
                    if aggregate_name in ["min", "max"]:
                        setattr(output, aggregator_fn, {{ cls.name }}MinMaxColumns())
                    else:
                        setattr(output, aggregator_fn, {{ cls.name }}NumericalColumns())
                setattr(getattr(output, aggregator_fn), col_name, value)
    return output

@strawberry.field(extensions=[DependencyExtension()])
async def resolve_{{ cls.plural_snake_name }}_aggregate(
    info: Info,
    session: AsyncSession = Depends(get_db_session, use_cache=False),
    cerbos_client: CerbosClient = Depends(get_cerbos_client),
    principal: Principal = Depends(require_auth_principal),
    where: Optional[{{ cls.name }}WhereClause] = None,
) -> {{ cls.name }}Aggregate:
    """
    Aggregate values for {{ cls.name }} objects. Used for queries (see api/queries.py).
    """
    # Get the selected aggregate functions and columns to operate on
    # TODO: not sure why selected_fields is a list
    # The first list of selections will always be ["aggregate"], so just grab the first item
    selections = info.selected_fields[0].selections[0].selections
    rows = await get_aggregate_db_rows(db.{{ cls.name }}, session, cerbos_client, principal, where, selections, [])  # type: ignore
    aggregate_output = format_{{ cls.snake_name }}_aggregate_output(rows)
    return {{ cls.name }}Aggregate(aggregate=aggregate_output)

{%- if cls.create_fields %}
@strawberry.mutation(extensions=[DependencyExtension()])
async def create_{{ cls.snake_name }}(
    input: {{ cls.name }}CreateInput,
    session: AsyncSession = Depends(get_db_session, use_cache=False),
    cerbos_client: CerbosClient = Depends(get_cerbos_client),
    principal: Principal = Depends(require_auth_principal),
    is_system_user: bool = Depends(is_system_user),
) -> db.Entity:
    """
    Create a new {{ cls.name }} object. Used for mutations (see api/mutations.py).
    """
    params = input.__dict__

    {%- for field in self.create_fields %}
        {%- if field.name == "collection_id" and (not field.readonly) %}
    # Validate that user can create entity in this collection
    attr = {"collection_id": input.collection_id}
    resource = Resource(id="NEW_ID", kind=db.{{ cls.name }}.__tablename__, attr=attr)
    if not cerbos_client.is_allowed("create", principal, resource):
        raise PlatformicsException("Unauthorized: Cannot create entity in this collection")
        {%- endif %}
    {%- endfor %}

    # Validate that the user can read all of the entities they're linking to.
    {%- for field in cls.create_fields %}
        {%- if field.is_entity and not field.is_virtual_relationship %}
    # Check that {{field.name}} relationship is accessible.
    if input.{{field.name}}_id:
        {{field.name}} = get_db_rows(db.{{ field.related_class.name }}, session, cerbos_client, principal, {"id": {"_eq": input.{{field.name}}_id } }, [], CerbosAction.VIEW)
        if not {{field.name}}:
            raise PlatformicsException("Unauthorized: {{field.name}} does not exist")
        {%- endif %}
    {%- endfor %}

    # Validate that the user can read all of the entities they're linking to.
    {%- if cls.system_only_create %}
    # If we have any system_writable fields present, make sure that our auth'd user *is* a system user
    if not is_system_user:
    {%- endif %}
    {%- for field in cls.system_only_create %}
        input.{{field.name}} = None
    {%- endfor %}

    # Save to DB
    params["owner_user_id"] = int(principal.id)
    new_entity = db.{{ cls.name }}(**params)
    session.add(new_entity)
    await session.commit()
    return new_entity
{%- endif %}


{%- if cls.mutable_fields %}
@strawberry.mutation(extensions=[DependencyExtension()])
async def update_{{ cls.snake_name }}(
    input: {{ cls.name }}UpdateInput,
    where: {{ cls.name }}WhereClauseMutations,
    session: AsyncSession = Depends(get_db_session, use_cache=False),
    cerbos_client: CerbosClient = Depends(get_cerbos_client),
    principal: Principal = Depends(require_auth_principal),
    is_system_user: bool = Depends(is_system_user),
) -> Sequence[db.Entity]:
    """
    Update {{ cls.name }} objects. Used for mutations (see api/mutations.py).
    """
    params = input.__dict__
    
    # Need at least one thing to update
    num_params = len([x for x in params if params[x] is not None])
    if num_params == 0:
        raise PlatformicsException("No fields to update")

    # Validate that the user can read all of the entities they're linking to.
    {%- for field in cls.mutable_fields %}
        {%- if field.is_entity and not field.is_virtual_relationship %}
    # Check that {{field.name}} relationship is accessible.
    if input.{{field.name}}_id:
        {{field.name}} = get_db_rows(db.{{ field.related_class.name }}, session, cerbos_client, principal, {"id": {"_eq": input.{{field.name}}_id } }, [], CerbosAction.VIEW)
        if not {{field.name}}:
            raise PlatformicsException("Unauthorized: {{field.name}} does not exist")
        {%- endif %}
    {%- endfor %}

    {%- if cls.system_only_mutable %}
    # If we have any system_writable fields present, make sure that our auth'd user *is* a system user
    if not is_system_user:
    {%- endif %}
    {%- for field in cls.system_only_mutable %}
        input.{{field.name}} = None
    {%- endfor %}

    # Fetch entities for update, if we have access to them
    entities = await get_db_rows(db.{{ cls.name }}, session, cerbos_client, principal, where, [], CerbosAction.UPDATE)
    if len(entities) == 0:
        raise PlatformicsException("Unauthorized: Cannot update entities")

    {%- for field in self.mutable_fields %}
        {%- if field.name == "collection_id" %}
    # Validate that the user has access to the new collection ID
    if input.collection_id:
        attr = {"collection_id": input.collection_id}
        resource = Resource(id="SOME_ID", kind=db.{{ cls.name }}.__tablename__, attr=attr)
        if not cerbos_client.is_allowed(CerbosAction.UPDATE, principal, resource):
            raise PlatformicsException("Unauthorized: Cannot access new collection")
        {%- endif %}
    {%- endfor %}

    # Update DB
    for entity in entities:
        for key in params:
            if params[key]:
                setattr(entity, key, params[key])
    await session.commit()
    return entities
{%- endif %}


@strawberry.mutation(extensions=[DependencyExtension()])
async def delete_{{ cls.snake_name }}(
    where: {{ cls.name }}WhereClauseMutations,
    session: AsyncSession = Depends(get_db_session, use_cache=False),
    cerbos_client: CerbosClient = Depends(get_cerbos_client),
    principal: Principal = Depends(require_auth_principal),
) -> Sequence[db.Entity]:
    """
    Delete {{ cls.name }} objects. Used for mutations (see api/mutations.py).
    """
    # Fetch entities for deletion, if we have access to them
    entities = await get_db_rows(db.{{ cls.name }}, session, cerbos_client, principal, where, [], CerbosAction.DELETE)
    if len(entities) == 0:
        raise PlatformicsException("Unauthorized: Cannot delete entities")

    # Update DB
    for entity in entities:
        await session.delete(entity)
    await session.commit()
    return entities
