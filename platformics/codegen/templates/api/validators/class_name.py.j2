"""
Pydantic validator for {{cls.name}}

Auto-generated by running 'make codegen'. Do not edit.
Make changes to the template codegen/templates/api/types/class_name.py.j2 instead.
"""

# ruff: noqa: E501 Line too long

{% set related_fields = cls.related_fields | unique(attribute='related_class.name') | list %}
{% set ignored_fields = ["File", "Entity", cls.name] %}

import typing
import datetime
import uuid

from pydantic import BaseModel, ConfigDict, Field
from typing_extensions import Annotated

{# Macro for mutations to output X or Optional[X] #}
{% macro getTypeValidation(action, type, required) -%}
    {%- if action == "Create" and required %} {{ type }}
    {%- else %} {{ type }} | None
    {%- endif %}
{%- endmacro %}

{# Generate Create and Update Strawberry input types #}
{%- for action in ["Create", "Update"] %}
class {{ cls.name }}{{ action }}InputValidator(BaseModel):
    # Pydantic stuff
    model_config = ConfigDict(from_attributes=True)

    collection_id: Annotated[{{ getTypeValidation(action, "int", true) }}, Field()]
    {%- for attr in cls.owned_fields %}
        {%- if attr.type == "uuid" %} {# Don't allow setting UUID fields #}
        {%- elif attr.type == "string" %}
    {{ attr.name }}: Annotated[{{ getTypeValidation(action, "str", attr.required) }}, Field()]
        {%- elif attr.is_enum %}
# TODO what do we do about enums here. GraphQL is supposed to take care of that for us I think?
#    {{ attr.name }}: Annotated[{{ getTypeValidation(action, attr.type, attr.required) }}, Field()]
        {%- elif attr.type == "int" %}
    {{ attr.name }}: Annotated[{{ getTypeValidation(action, "int", attr.required) }}, Field()]
        {%- elif attr.type == "float" %}
    {{ attr.name }}: Annotated[{{ getTypeValidation(action, "float", attr.required) }}, Field()]
        {%- elif attr.type == "boolean" %}
    {{ attr.name }}: Annotated[{{ getTypeValidation(action, "bool", attr.required) }}, Field()]
        {%- elif attr.type == "date" %}
    {{ attr.name }}: Annotated[{{ getTypeValidation(action, "datetime.datetime", attr.required) }}, Field()]
        {%- elif attr.type == "File" %}
    {{ attr.name }}_id: Annotated[{{ getTypeValidation(action, "uuid.UUID", attr.required) }}, Field()]
        {%- elif attr.inverse and not attr.multivalued %} {# Don't include multivalued fields, only fields where can update an ID #}
    {{ attr.name }}_id: Annotated[{{ getTypeValidation(action, "uuid.UUID", attr.required) }}, Field()]
        {%- endif %}
    {%- endfor %}
{%- endfor %}
