"""
Pydantic validator for {{cls.name}}

Auto-generated by running 'make codegen'. Do not edit.
Make changes to the template codegen/templates/api/types/class_name.py.j2 instead.
"""

# ruff: noqa: E501 Line too long

{% set related_fields = cls.related_fields | unique(attribute='related_class.name') | list %}
{% set ignored_fields = ["File", "Entity", cls.name] %}

{%- for field in cls.enum_fields %}
    {%- if loop.first %}
from support.enums import 
    {%- endif %}
    {{- " " }}
    {{- field.type}}
    {{- "," if not loop.last else "" }}
{%- endfor %}

import typing
import datetime
import uuid

from pydantic import BaseModel, ConfigDict, Field, StringConstraints
from typing_extensions import Annotated

{# Macro for mutations to output X or Optional[X] #}
{% macro getTypeValidation(action, type, required) -%}
    {%- if action == "Create" and required %} {{ type }}
    {%- else %} {{ type }} | None
    {%- endif %}
{%- endmacro %}

{% macro getStringConstraints(attr) -%}
    strip_whitespace=True,
    {%- if attr.pattern %}
    pattern=r'{{attr.pattern}}',
    {%- endif %}
    {%- if attr.minimum_length is not none %}
    min_length={{attr.minimum_length}},
    {%- endif %}
    {%- if attr.maximum_length is not none %}
    max_length={{attr.maximum_length}},
    {%- endif %}
{%- endmacro %}

{% macro getNumericConstraints(attr) -%}
    {%- if attr.minimum_value is not none %}
    ge={{attr.minimum_value}},
    {%- endif %}
    {%- if attr.maximum_value is not none %}
    le={{attr.maximum_value}},
    {%- endif %}
{%- endmacro %}

{% macro getInputFields(action, fields) -%}
    {%- for attr in fields %}
        {%- if attr.type == "uuid" %} {# Don't allow setting UUID fields #}
    {{ attr.name }}: Annotated[{{ getTypeValidation(action, "uuid.UUID", attr.required) }}, Field()]
        {%- elif attr.type == "string" %}
    {{ attr.name }}: Annotated[{{ getTypeValidation(action, "str", attr.required) }}, StringConstraints({{ getStringConstraints(attr) }})]
        {%- elif attr.type == "integer" %}
    {{ attr.name }}: Annotated[{{ getTypeValidation(action, "int", attr.required) }}, Field({{getNumericConstraints(attr)}})]
        {%- elif attr.type == "float" %}
    {{ attr.name }}: Annotated[{{ getTypeValidation(action, "float", attr.required) }}, Field({{getNumericConstraints(attr)}})]
# GraphQL Query validation takes care of bools for us, but this is here for completeness?
        {%- elif attr.is_enum %}
    {{ attr.name }}: Annotated[{{ getTypeValidation(action, attr.type, attr.required) }}, Field()]
# GraphQL Query validation takes care of bools for us, but this is here for completeness?
        {%- elif attr.type == "boolean" %}
    {{ attr.name }}: Annotated[{{ getTypeValidation(action, "bool", attr.required) }}, Field()]
        {%- elif attr.type == "date" %}
    {{ attr.name }}: Annotated[{{ getTypeValidation(action, "datetime.datetime", attr.required) }}, Field()]
        {%- elif attr.type == "File" %}
    {{ attr.name }}_id: Annotated[{{ getTypeValidation(action, "uuid.UUID", attr.required) }}, Field()]
        {%- elif attr.is_entity and not attr.is_virtual_relationship %} {# Don't include multivalued fields, only fields where we can update an ID #}
    {{ attr.name }}_id: Annotated[{{ getTypeValidation(action, "uuid.UUID", attr.required) }}, Field()]
        {%- endif %}
    {%- endfor %}
{%- endmacro %}

{# Generate Create and Update pydantic validators #}
{%- if cls.create_fields %}
class {{ cls.name }}CreateInputValidator(BaseModel):
    # Pydantic stuff
    model_config = ConfigDict(from_attributes=True)
    {{- getInputFields("Create", cls.create_fields) }}
{%- endif %}

{%- if cls.mutable_fields %}
class {{ cls.name }}UpdateInputValidator(BaseModel):
    # Pydantic stuff
    model_config = ConfigDict(from_attributes=True)
    {{- getInputFields("Update", cls.mutable_fields) }}
{%- endif %}
