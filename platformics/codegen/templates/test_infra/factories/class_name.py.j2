"""
Factory for generating {{ cls.name }} objects.

Auto-generated by running 'make codegen'. Do not edit.
Make changes to the template codegen/templates/test_infra/factories/class_name.py.j2 instead.
"""

# ruff: noqa: E501 Line too long

import random
import factory
from database.models import {{ cls.name }}
from test_infra.factories.main import CommonFactory, FileFactory
{%- for field in cls.related_fields %}
    {%- if field.inverse and field.related_class.name != "Entity" and not field.multivalued%}
from test_infra.factories.{{ field.related_class.snake_name }} import {{ field.related_class.name }}Factory
    {%- endif %}
{%- endfor %}
from factory import Faker, fuzzy
from faker_biology.bioseq import Bioseq
from faker_biology.physiology import Organ
from faker_enum import EnumProvider

Faker.add_provider(Bioseq)
Faker.add_provider(Organ)
Faker.add_provider(EnumProvider)


class {{ cls.name }}Factory(CommonFactory):
{%- if cls.name not in ["Entity", "File"] %}
    class Meta:
        sqlalchemy_session = None  # workaround for a bug in factoryboy
        model = {{ cls.name }}
        # Match entity_id with existing db rows to determine whether we should
        # create a new row or not.
        sqlalchemy_get_or_create = ("entity_id",)
    {% for field in cls.owned_fields %}
        {%- if field.type != "uuid" %}
            {%- if field.inverse and field.related_class.name != "Entity" %}
            {#- If the field is a one-to-one relationship, avoid circular imports by only defining the SubFactory on the child #}
                {%- if not field.is_virtual_relationship and not field.required %}
    {{ field.name }} = factory.SubFactory(
        {{ field.related_class.name }}Factory,
        owner_user_id=factory.SelfAttribute("..owner_user_id"),
        collection_id=factory.SelfAttribute("..collection_id"),
    )
                {%- endif %}
            {%- elif field.type == "File" %}
                {#- If the schema specifies what file_type to use, use that. #}
                {#- Otherwise, default to fastq.}} #}
                {%- if field.factory_type is not none %}
    {{ field.name }} = factory.RelatedFactory(
        FileFactory,
        factory_related_name="entity",
        entity_field_name="{{ field.name }}",
        file_format="{{ field.factory_type }}",
    )
                {%- else %}
    {{ field.name }} = factory.RelatedFactory(
        FileFactory,
        factory_related_name="entity",
        entity_field_name="{{ field.name }}",
        file_format="fastq",
    )
                {%- endif %}
            {%- elif field.is_enum %}
    {{ field.name }} = fuzzy.FuzzyChoice([
        {%- for value in field.related_enum.permissible_values %}
        "{{ value }}"
        {{- ", " if not loop.last else "" }}
        {%- endfor %}
    ])
            {%- else %}
                {#- If the schema specifies what factory type to use for the field, use that. #}
                {#- Otherwise, try to infer a reasonable default based on the field's type.}} #}
                {%- if field.factory_type is not none %}
    {{ field.name }} = factory.Faker("{{ field.factory_type }}")
                {%- elif field.type == "string" %}
    {{ field.name }} = fuzzy.FuzzyText()
                {%- elif field.type == "2dArrayInt" %}
    {{ field.name }} = factory.LazyAttribute(lambda o: [ [random.randint(0, 10) for _ in range(5)] ] * random.randint(2, 5) )
                {%- elif field.type == "int" %}
    {{ field.name }} = fuzzy.FuzzyInteger(1, 1000)
                {%- elif field.type == "float" %}
    {{ field.name }} = fuzzy.FuzzyFloat(1, 100)
                {%- elif field.type == cls.name %}{#
    FIXME: Self-references don't work, even with the fixes proposed in https://github.com/FactoryBoy/factory_boy/issues/173:
    # {{ field.name }} = factory.LazyAttribute(lambda x: {{ field.related_class.name }}Factory({{ field.name }}=None))
    # {{ field.name }} = factory.SubFactory("test_infra.factories.{{ cls.snake_name }}.{{ field.related_class.name }}Factory", #{{ field.name }}=None) #}
    {{ field.name }} = None
                {%- else %}
    {{ field.name }} = factory.Faker("{{ field.type }}")
                {%- endif %}
            {%- endif %}
        {%- endif %}
    {%- endfor %}
{%- endif %}

