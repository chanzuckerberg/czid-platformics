input BoolComparators {
  _eq: Int
  _neq: Int
  _in: [Int!]
  _nin: [Int!]
  _gt: Int
  _gte: Int
  _lt: Int
  _lte: Int
  _is_null: Boolean
}

"""Date with time (isoformat)"""
scalar DateTime

input DatetimeComparators {
  _eq: DateTime
  _neq: DateTime
  _in: [DateTime!]
  _nin: [DateTime!]
  _gt: DateTime
  _gte: DateTime
  _lt: DateTime
  _lte: DateTime
  _is_null: Boolean
}

input EntityInputType {
  name: String!
  entityId: ID!
  entityType: String!
}

interface EntityInterface implements Node {
  """The Globally Unique ID of this object"""
  _id: GlobalID!
}

"""
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
"""
scalar GlobalID @specifiedBy(url: "https://relay.dev/graphql/objectidentification.htm")

input IntComparators {
  _eq: Int
  _neq: Int
  _in: [Int!]
  _nin: [Int!]
  _gt: Int
  _gte: Int
  _lt: Int
  _lte: Int
  _is_null: Boolean
}

input LimitOffsetClause {
  limit: Int
  offset: Int
}

type Mutation {
  createWorkflowRun(input: RunWorkflowVersionInput!): WorkflowRun!
  updateWorkflowRun(input: WorkflowRunUpdateInput!, where: WorkflowRunWhereClauseMutations!): [WorkflowRun!]!
  deleteWorkflowRun(where: WorkflowRunWhereClauseMutations!): [WorkflowRun!]!
  createWorkflow(input: WorkflowCreateInput!): Workflow!
  updateWorkflow(input: WorkflowUpdateInput!, where: WorkflowWhereClauseMutations!): [Workflow!]!
  deleteWorkflow(where: WorkflowWhereClauseMutations!): [Workflow!]!
  createWorkflowRunStep(input: WorkflowRunStepCreateInput!): WorkflowRunStep!
  updateWorkflowRunStep(input: WorkflowRunStepUpdateInput!, where: WorkflowRunStepWhereClauseMutations!): [WorkflowRunStep!]!
  deleteWorkflowRunStep(where: WorkflowRunStepWhereClauseMutations!): [WorkflowRunStep!]!
  createWorkflowRunEntityInput(input: WorkflowRunEntityInputCreateInput!): WorkflowRunEntityInput!
  deleteWorkflowRunEntityInput(where: WorkflowRunEntityInputWhereClauseMutations!): [WorkflowRunEntityInput!]!
  createWorkflowVersion(input: WorkflowVersionCreateInput!): WorkflowVersion!
  deleteWorkflowVersion(where: WorkflowVersionWhereClauseMutations!): [WorkflowVersion!]!
  runWorkflowVersion(input: RunWorkflowVersionInput!, executionId: String = null): WorkflowRun!
  runWorkflowRun(workflowRunId: ID!, executionId: String = null): WorkflowRun!
}

"""An object with a Globally Unique ID"""
interface Node {
  """The Globally Unique ID of this object"""
  _id: GlobalID!
}

"""Information to aid in pagination."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

type Query {
  node(
    """The ID of the object."""
    id: GlobalID!
  ): Node!
  nodes(
    """The IDs of the objects."""
    ids: [GlobalID!]!
  ): [Node!]!
  workflowRuns(where: WorkflowRunWhereClause = null, orderBy: [WorkflowRunOrderByClause!] = [], limitOffset: LimitOffsetClause = null): [WorkflowRun!]!
  workflows(where: WorkflowWhereClause = null, orderBy: [WorkflowOrderByClause!] = [], limitOffset: LimitOffsetClause = null): [Workflow!]!
  workflowRunSteps(where: WorkflowRunStepWhereClause = null, orderBy: [WorkflowRunStepOrderByClause!] = [], limitOffset: LimitOffsetClause = null): [WorkflowRunStep!]!
  workflowRunEntityInputs(where: WorkflowRunEntityInputWhereClause = null, orderBy: [WorkflowRunEntityInputOrderByClause!] = [], limitOffset: LimitOffsetClause = null): [WorkflowRunEntityInput!]!
  workflowVersions(where: WorkflowVersionWhereClause = null, orderBy: [WorkflowVersionOrderByClause!] = [], limitOffset: LimitOffsetClause = null): [WorkflowVersion!]!
  workflowRunsAggregate(where: WorkflowRunWhereClause = null): WorkflowRunAggregate!
  workflowsAggregate(where: WorkflowWhereClause = null): WorkflowAggregate!
  workflowRunStepsAggregate(where: WorkflowRunStepWhereClause = null): WorkflowRunStepAggregate!
  workflowRunEntityInputsAggregate(where: WorkflowRunEntityInputWhereClause = null): WorkflowRunEntityInputAggregate!
  workflowVersionsAggregate(where: WorkflowVersionWhereClause = null): WorkflowVersionAggregate!
}

input RunWorkflowVersionInput {
  collectionId: Int = null
  workflowVersionId: ID!
  entityInputs: [EntityInputType!]
  rawInputJson: String
  railsWorkflowRunId: Int = null
}

input StrComparators {
  _eq: String
  _neq: String
  _in: [String!]
  _nin: [String!]
  _is_null: Boolean
  _gt: String
  _gte: String
  _lt: String
  _lte: String
  _like: String
  _nlike: String
  _ilike: String
  _nilike: String
  _regex: String
  _nregex: String
  _iregex: String
  _niregex: String
}

scalar UUID

input UUIDComparators {
  _eq: UUID
  _neq: UUID
  _in: [UUID!]
  _nin: [UUID!]
  _gt: UUID
  _gte: UUID
  _lt: UUID
  _lte: UUID
  _is_null: Boolean
}

type Workflow implements EntityInterface & Node {
  """The Globally Unique ID of this object"""
  _id: GlobalID!
  id: ID!
  name: String
  defaultVersion: String
  minimumSupportedVersion: String
  versions(
    where: WorkflowVersionWhereClause = null
    orderBy: [WorkflowVersionOrderByClause!] = []

    """Returns the items in the list that come before the specified cursor."""
    before: String = null

    """Returns the items in the list that come after the specified cursor."""
    after: String = null

    """Returns the first n items from the list."""
    first: Int = null

    """Returns the items in the list that come after the specified cursor."""
    last: Int = null
  ): WorkflowVersionConnection!
  versionsAggregate(where: WorkflowVersionWhereClause = null): WorkflowVersionAggregate
  ownerUserId: Int!
  collectionId: Int
  createdAt: DateTime!
  updatedAt: DateTime
  deletedAt: DateTime
}

type WorkflowAggregate {
  aggregate: [WorkflowAggregateFunctions!]
}

type WorkflowAggregateFunctions {
  sum: WorkflowNumericalColumns
  avg: WorkflowNumericalColumns
  stddev: WorkflowNumericalColumns
  variance: WorkflowNumericalColumns
  min: WorkflowMinMaxColumns
  max: WorkflowMinMaxColumns
  groupBy: WorkflowGroupByOptions
  count(distinct: Boolean = false, columns: WorkflowCountColumns = null): Int
}

enum WorkflowCountColumns {
  name
  defaultVersion
  minimumSupportedVersion
  versions
  id
  ownerUserId
  collectionId
  createdAt
  updatedAt
  deletedAt
}

input WorkflowCreateInput {
  name: String = null
  defaultVersion: String = null
  minimumSupportedVersion: String = null
  collectionId: Int = null
  deletedAt: DateTime = null
}

type WorkflowGroupByOptions {
  name: String
  defaultVersion: String
  minimumSupportedVersion: String
  id: UUID
  ownerUserId: Int
  collectionId: Int
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
}

type WorkflowMinMaxColumns {
  name: String
  defaultVersion: String
  minimumSupportedVersion: String
  ownerUserId: Int
  collectionId: Int
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
}

type WorkflowNumericalColumns {
  ownerUserId: Int
  collectionId: Int
}

input WorkflowOrderByClause {
  name: orderBy
  defaultVersion: orderBy
  minimumSupportedVersion: orderBy
  id: orderBy
  ownerUserId: orderBy
  collectionId: orderBy
  createdAt: orderBy
  updatedAt: orderBy
  deletedAt: orderBy
}

type WorkflowRun implements EntityInterface & Node {
  """The Globally Unique ID of this object"""
  _id: GlobalID!
  id: ID!
  railsWorkflowRunId: Int
  startedAt: DateTime
  endedAt: DateTime
  executionId: String
  outputsJson: String
  workflowRunnerInputsJson: String
  status: WorkflowRunStatus
  errorMessage: String
  workflowVersion(where: WorkflowVersionWhereClause = null, orderBy: [WorkflowVersionOrderByClause!] = []): WorkflowVersion
  steps(
    where: WorkflowRunStepWhereClause = null
    orderBy: [WorkflowRunStepOrderByClause!] = []

    """Returns the items in the list that come before the specified cursor."""
    before: String = null

    """Returns the items in the list that come after the specified cursor."""
    after: String = null

    """Returns the first n items from the list."""
    first: Int = null

    """Returns the items in the list that come after the specified cursor."""
    last: Int = null
  ): WorkflowRunStepConnection!
  stepsAggregate(where: WorkflowRunStepWhereClause = null): WorkflowRunStepAggregate
  entityInputs(
    where: WorkflowRunEntityInputWhereClause = null
    orderBy: [WorkflowRunEntityInputOrderByClause!] = []

    """Returns the items in the list that come before the specified cursor."""
    before: String = null

    """Returns the items in the list that come after the specified cursor."""
    after: String = null

    """Returns the first n items from the list."""
    first: Int = null

    """Returns the items in the list that come after the specified cursor."""
    last: Int = null
  ): WorkflowRunEntityInputConnection!
  entityInputsAggregate(where: WorkflowRunEntityInputWhereClause = null): WorkflowRunEntityInputAggregate
  rawInputsJson: String
  deprecatedById: ID
  ownerUserId: Int!
  collectionId: Int
  createdAt: DateTime!
  updatedAt: DateTime
  deletedAt: DateTime
}

type WorkflowRunAggregate {
  aggregate: [WorkflowRunAggregateFunctions!]
}

type WorkflowRunAggregateFunctions {
  sum: WorkflowRunNumericalColumns
  avg: WorkflowRunNumericalColumns
  stddev: WorkflowRunNumericalColumns
  variance: WorkflowRunNumericalColumns
  min: WorkflowRunMinMaxColumns
  max: WorkflowRunMinMaxColumns
  groupBy: WorkflowRunGroupByOptions
  count(distinct: Boolean = false, columns: WorkflowRunCountColumns = null): Int
}

"""A connection to a list of items."""
type WorkflowRunConnection {
  """Pagination data for this connection"""
  pageInfo: PageInfo!

  """Contains the nodes in this connection"""
  edges: [WorkflowRunEdge!]!
}

enum WorkflowRunCountColumns {
  railsWorkflowRunId
  startedAt
  endedAt
  executionId
  outputsJson
  workflowRunnerInputsJson
  status
  errorMessage
  workflowVersion
  steps
  entityInputs
  rawInputsJson
  deprecatedBy
  id
  ownerUserId
  collectionId
  createdAt
  updatedAt
  deletedAt
}

"""An edge in a connection."""
type WorkflowRunEdge {
  """A cursor for use in pagination"""
  cursor: String!

  """The item at the end of the edge"""
  node: WorkflowRun!
}

type WorkflowRunEntityInput implements EntityInterface & Node {
  """The Globally Unique ID of this object"""
  _id: GlobalID!
  id: ID!
  inputEntityId: ID
  fieldName: String
  entityType: String
  workflowRun(where: WorkflowRunWhereClause = null, orderBy: [WorkflowRunOrderByClause!] = []): WorkflowRun
  ownerUserId: Int!
  collectionId: Int
  createdAt: DateTime!
  updatedAt: DateTime
  deletedAt: DateTime
}

type WorkflowRunEntityInputAggregate {
  aggregate: [WorkflowRunEntityInputAggregateFunctions!]
}

type WorkflowRunEntityInputAggregateFunctions {
  sum: WorkflowRunEntityInputNumericalColumns
  avg: WorkflowRunEntityInputNumericalColumns
  stddev: WorkflowRunEntityInputNumericalColumns
  variance: WorkflowRunEntityInputNumericalColumns
  min: WorkflowRunEntityInputMinMaxColumns
  max: WorkflowRunEntityInputMinMaxColumns
  groupBy: WorkflowRunEntityInputGroupByOptions
  count(distinct: Boolean = false, columns: WorkflowRunEntityInputCountColumns = null): Int
}

"""A connection to a list of items."""
type WorkflowRunEntityInputConnection {
  """Pagination data for this connection"""
  pageInfo: PageInfo!

  """Contains the nodes in this connection"""
  edges: [WorkflowRunEntityInputEdge!]!
}

enum WorkflowRunEntityInputCountColumns {
  inputEntityId
  fieldName
  entityType
  workflowRun
  id
  ownerUserId
  collectionId
  createdAt
  updatedAt
  deletedAt
}

input WorkflowRunEntityInputCreateInput {
  inputEntityId: ID = null
  fieldName: String = null
  entityType: String = null
  workflowRunId: ID = null
  collectionId: Int = null
  deletedAt: DateTime = null
}

"""An edge in a connection."""
type WorkflowRunEntityInputEdge {
  """A cursor for use in pagination"""
  cursor: String!

  """The item at the end of the edge"""
  node: WorkflowRunEntityInput!
}

type WorkflowRunEntityInputGroupByOptions {
  inputEntityId: UUID
  fieldName: String
  entityType: String
  workflowRun: WorkflowRunGroupByOptions
  id: UUID
  ownerUserId: Int
  collectionId: Int
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
}

type WorkflowRunEntityInputMinMaxColumns {
  fieldName: String
  entityType: String
  ownerUserId: Int
  collectionId: Int
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
}

type WorkflowRunEntityInputNumericalColumns {
  ownerUserId: Int
  collectionId: Int
}

input WorkflowRunEntityInputOrderByClause {
  inputEntityId: orderBy
  fieldName: orderBy
  entityType: orderBy
  workflowRun: WorkflowRunOrderByClause
  id: orderBy
  ownerUserId: orderBy
  collectionId: orderBy
  createdAt: orderBy
  updatedAt: orderBy
  deletedAt: orderBy
}

input WorkflowRunEntityInputWhereClause {
  inputEntityId: UUIDComparators
  fieldName: StrComparators
  entityType: StrComparators
  workflowRun: WorkflowRunWhereClause
  id: UUIDComparators
  ownerUserId: IntComparators
  collectionId: IntComparators
  createdAt: DatetimeComparators
  updatedAt: DatetimeComparators
  deletedAt: DatetimeComparators
}

input WorkflowRunEntityInputWhereClauseMutations {
  id: UUIDComparators
}

type WorkflowRunGroupByOptions {
  railsWorkflowRunId: Int
  startedAt: DateTime
  endedAt: DateTime
  executionId: String
  outputsJson: String
  workflowRunnerInputsJson: String
  status: WorkflowRunStatus
  errorMessage: String
  workflowVersion: WorkflowVersionGroupByOptions
  rawInputsJson: String
  deprecatedBy: WorkflowRunGroupByOptions
  id: UUID
  ownerUserId: Int
  collectionId: Int
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
}

type WorkflowRunMinMaxColumns {
  railsWorkflowRunId: Int
  startedAt: DateTime
  endedAt: DateTime
  executionId: String
  outputsJson: String
  workflowRunnerInputsJson: String
  errorMessage: String
  rawInputsJson: String
  ownerUserId: Int
  collectionId: Int
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
}

type WorkflowRunNumericalColumns {
  railsWorkflowRunId: Int
  ownerUserId: Int
  collectionId: Int
}

input WorkflowRunOrderByClause {
  railsWorkflowRunId: orderBy
  startedAt: orderBy
  endedAt: orderBy
  executionId: orderBy
  outputsJson: orderBy
  workflowRunnerInputsJson: orderBy
  status: orderBy
  errorMessage: orderBy
  workflowVersion: WorkflowVersionOrderByClause
  rawInputsJson: orderBy
  deprecatedBy: orderBy
  id: orderBy
  ownerUserId: orderBy
  collectionId: orderBy
  createdAt: orderBy
  updatedAt: orderBy
  deletedAt: orderBy
}

enum WorkflowRunStatus {
  SUCCEEDED
  SUCCEEDED_WITH_ISSUE
  TIMED_OUT
  ABORTED
  FAILED
  CREATED
  PENDING
  STARTED
  RUNNING
}

input WorkflowRunStatusEnumComparators {
  _eq: WorkflowRunStatus
  _neq: WorkflowRunStatus
  _in: [WorkflowRunStatus!]
  _nin: [WorkflowRunStatus!]
  _gt: WorkflowRunStatus
  _gte: WorkflowRunStatus
  _lt: WorkflowRunStatus
  _lte: WorkflowRunStatus
  _is_null: Boolean
}

type WorkflowRunStep implements EntityInterface & Node {
  """The Globally Unique ID of this object"""
  _id: GlobalID!
  id: ID!
  workflowRun(where: WorkflowRunWhereClause = null, orderBy: [WorkflowRunOrderByClause!] = []): WorkflowRun
  startedAt: DateTime
  endedAt: DateTime
  status: WorkflowRunStepStatus
  ownerUserId: Int!
  collectionId: Int
  createdAt: DateTime!
  updatedAt: DateTime
  deletedAt: DateTime
}

type WorkflowRunStepAggregate {
  aggregate: [WorkflowRunStepAggregateFunctions!]
}

type WorkflowRunStepAggregateFunctions {
  sum: WorkflowRunStepNumericalColumns
  avg: WorkflowRunStepNumericalColumns
  stddev: WorkflowRunStepNumericalColumns
  variance: WorkflowRunStepNumericalColumns
  min: WorkflowRunStepMinMaxColumns
  max: WorkflowRunStepMinMaxColumns
  groupBy: WorkflowRunStepGroupByOptions
  count(distinct: Boolean = false, columns: WorkflowRunStepCountColumns = null): Int
}

"""A connection to a list of items."""
type WorkflowRunStepConnection {
  """Pagination data for this connection"""
  pageInfo: PageInfo!

  """Contains the nodes in this connection"""
  edges: [WorkflowRunStepEdge!]!
}

enum WorkflowRunStepCountColumns {
  workflowRun
  startedAt
  endedAt
  status
  id
  ownerUserId
  collectionId
  createdAt
  updatedAt
  deletedAt
}

input WorkflowRunStepCreateInput {
  workflowRunId: ID = null
  endedAt: DateTime = null
  status: WorkflowRunStepStatus = null
  collectionId: Int = null
  deletedAt: DateTime = null
}

"""An edge in a connection."""
type WorkflowRunStepEdge {
  """A cursor for use in pagination"""
  cursor: String!

  """The item at the end of the edge"""
  node: WorkflowRunStep!
}

type WorkflowRunStepGroupByOptions {
  workflowRun: WorkflowRunGroupByOptions
  startedAt: DateTime
  endedAt: DateTime
  status: WorkflowRunStepStatus
  id: UUID
  ownerUserId: Int
  collectionId: Int
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
}

type WorkflowRunStepMinMaxColumns {
  startedAt: DateTime
  endedAt: DateTime
  ownerUserId: Int
  collectionId: Int
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
}

type WorkflowRunStepNumericalColumns {
  ownerUserId: Int
  collectionId: Int
}

input WorkflowRunStepOrderByClause {
  workflowRun: WorkflowRunOrderByClause
  startedAt: orderBy
  endedAt: orderBy
  status: orderBy
  id: orderBy
  ownerUserId: orderBy
  collectionId: orderBy
  createdAt: orderBy
  updatedAt: orderBy
  deletedAt: orderBy
}

enum WorkflowRunStepStatus {
  RUNNING
  SUCCEEDED
  FAILED
}

input WorkflowRunStepStatusEnumComparators {
  _eq: WorkflowRunStepStatus
  _neq: WorkflowRunStepStatus
  _in: [WorkflowRunStepStatus!]
  _nin: [WorkflowRunStepStatus!]
  _gt: WorkflowRunStepStatus
  _gte: WorkflowRunStepStatus
  _lt: WorkflowRunStepStatus
  _lte: WorkflowRunStepStatus
  _is_null: Boolean
}

input WorkflowRunStepUpdateInput {
  endedAt: DateTime = null
  status: WorkflowRunStepStatus = null
  deletedAt: DateTime = null
}

input WorkflowRunStepWhereClause {
  workflowRun: WorkflowRunWhereClause
  startedAt: DatetimeComparators
  endedAt: DatetimeComparators
  status: WorkflowRunStepStatusEnumComparators
  id: UUIDComparators
  ownerUserId: IntComparators
  collectionId: IntComparators
  createdAt: DatetimeComparators
  updatedAt: DatetimeComparators
  deletedAt: DatetimeComparators
}

input WorkflowRunStepWhereClauseMutations {
  id: UUIDComparators
}

input WorkflowRunUpdateInput {
  endedAt: DateTime = null
  executionId: String = null
  outputsJson: String = null
  workflowRunnerInputsJson: String = null
  status: WorkflowRunStatus = null
  errorMessage: String = null
  deprecatedById: ID = null
  deletedAt: DateTime = null
}

input WorkflowRunWhereClause {
  railsWorkflowRunId: IntComparators
  startedAt: DatetimeComparators
  endedAt: DatetimeComparators
  executionId: StrComparators
  outputsJson: StrComparators
  workflowRunnerInputsJson: StrComparators
  status: WorkflowRunStatusEnumComparators
  errorMessage: StrComparators
  workflowVersion: WorkflowVersionWhereClause
  steps: WorkflowRunStepWhereClause
  entityInputs: WorkflowRunEntityInputWhereClause
  rawInputsJson: StrComparators
  deprecatedById: UUIDComparators
  id: UUIDComparators
  ownerUserId: IntComparators
  collectionId: IntComparators
  createdAt: DatetimeComparators
  updatedAt: DatetimeComparators
  deletedAt: DatetimeComparators
}

input WorkflowRunWhereClauseMutations {
  id: UUIDComparators
}

input WorkflowUpdateInput {
  name: String = null
  defaultVersion: String = null
  minimumSupportedVersion: String = null
  deletedAt: DateTime = null
}

type WorkflowVersion implements EntityInterface & Node {
  """The Globally Unique ID of this object"""
  _id: GlobalID!
  id: ID!
  graphJson: String
  workflowUri: String
  version: String
  manifest: String
  workflow(where: WorkflowWhereClause = null, orderBy: [WorkflowOrderByClause!] = []): Workflow
  deprecated: Boolean
  runs(
    where: WorkflowRunWhereClause = null
    orderBy: [WorkflowRunOrderByClause!] = []

    """Returns the items in the list that come before the specified cursor."""
    before: String = null

    """Returns the items in the list that come after the specified cursor."""
    after: String = null

    """Returns the first n items from the list."""
    first: Int = null

    """Returns the items in the list that come after the specified cursor."""
    last: Int = null
  ): WorkflowRunConnection!
  runsAggregate(where: WorkflowRunWhereClause = null): WorkflowRunAggregate
  ownerUserId: Int!
  collectionId: Int
  createdAt: DateTime!
  updatedAt: DateTime
  deletedAt: DateTime
}

type WorkflowVersionAggregate {
  aggregate: [WorkflowVersionAggregateFunctions!]
}

type WorkflowVersionAggregateFunctions {
  sum: WorkflowVersionNumericalColumns
  avg: WorkflowVersionNumericalColumns
  stddev: WorkflowVersionNumericalColumns
  variance: WorkflowVersionNumericalColumns
  min: WorkflowVersionMinMaxColumns
  max: WorkflowVersionMinMaxColumns
  groupBy: WorkflowVersionGroupByOptions
  count(distinct: Boolean = false, columns: WorkflowVersionCountColumns = null): Int
}

"""A connection to a list of items."""
type WorkflowVersionConnection {
  """Pagination data for this connection"""
  pageInfo: PageInfo!

  """Contains the nodes in this connection"""
  edges: [WorkflowVersionEdge!]!
}

enum WorkflowVersionCountColumns {
  graphJson
  workflowUri
  version
  manifest
  workflow
  deprecated
  runs
  id
  ownerUserId
  collectionId
  createdAt
  updatedAt
  deletedAt
}

input WorkflowVersionCreateInput {
  graphJson: String = null
  workflowUri: String = null
  version: String = null
  manifest: String = null
  workflowId: ID = null
  deprecated: Boolean = null
  collectionId: Int = null
  deletedAt: DateTime = null
}

"""An edge in a connection."""
type WorkflowVersionEdge {
  """A cursor for use in pagination"""
  cursor: String!

  """The item at the end of the edge"""
  node: WorkflowVersion!
}

type WorkflowVersionGroupByOptions {
  graphJson: String
  workflowUri: String
  version: String
  manifest: String
  workflow: WorkflowGroupByOptions
  deprecated: Boolean
  id: UUID
  ownerUserId: Int
  collectionId: Int
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
}

type WorkflowVersionMinMaxColumns {
  graphJson: String
  workflowUri: String
  version: String
  manifest: String
  ownerUserId: Int
  collectionId: Int
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
}

type WorkflowVersionNumericalColumns {
  ownerUserId: Int
  collectionId: Int
}

input WorkflowVersionOrderByClause {
  graphJson: orderBy
  workflowUri: orderBy
  version: orderBy
  manifest: orderBy
  workflow: WorkflowOrderByClause
  deprecated: orderBy
  id: orderBy
  ownerUserId: orderBy
  collectionId: orderBy
  createdAt: orderBy
  updatedAt: orderBy
  deletedAt: orderBy
}

input WorkflowVersionWhereClause {
  graphJson: StrComparators
  workflowUri: StrComparators
  version: StrComparators
  manifest: StrComparators
  workflow: WorkflowWhereClause
  deprecated: BoolComparators
  runs: WorkflowRunWhereClause
  id: UUIDComparators
  ownerUserId: IntComparators
  collectionId: IntComparators
  createdAt: DatetimeComparators
  updatedAt: DatetimeComparators
  deletedAt: DatetimeComparators
}

input WorkflowVersionWhereClauseMutations {
  id: UUIDComparators
}

input WorkflowWhereClause {
  name: StrComparators
  defaultVersion: StrComparators
  minimumSupportedVersion: StrComparators
  versions: WorkflowVersionWhereClause
  id: UUIDComparators
  ownerUserId: IntComparators
  collectionId: IntComparators
  createdAt: DatetimeComparators
  updatedAt: DatetimeComparators
  deletedAt: DatetimeComparators
}

input WorkflowWhereClauseMutations {
  id: UUIDComparators
}

enum orderBy {
  asc
  asc_nulls_first
  asc_nulls_last
  desc
  desc_nulls_first
  desc_nulls_last
}
