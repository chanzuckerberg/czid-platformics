"""
GraphQL type for Run

Auto-generated by running 'make codegen'. Do not edit.
Make changes to the template codegen/templates/api/types/class_name.py.j2 instead.
"""

# ruff: noqa: E501 Line too long

import typing
from typing import TYPE_CHECKING, Annotated, Optional, Sequence

import database.models as db
import strawberry
import datetime
from api.core.helpers import get_db_rows
from api.types.entities import EntityInterface
from cerbos.sdk.client import CerbosClient
from cerbos.sdk.model import Principal, Resource
from fastapi import Depends
from platformics.api.core.deps import get_cerbos_client, get_db_session, require_auth_principal
from platformics.api.core.gql_to_sql import (
    EnumComparators,
    IntComparators,
    StrComparators,
    UUIDComparators,
)
from platformics.api.core.strawberry_extensions import DependencyExtension
from platformics.security.authorization import CerbosAction
from sqlalchemy import inspect
from sqlalchemy.ext.asyncio import AsyncSession
from strawberry import relay
from strawberry.types import Info
from typing_extensions import TypedDict
from support.enums import RunStatus

E = typing.TypeVar("E", db.File, db.Entity)
T = typing.TypeVar("T")

if TYPE_CHECKING:
    from api.types.workflow_version import WorkflowVersionWhereClause, WorkflowVersion
    from api.types.run_step import RunStepWhereClause, RunStep
    from api.types.run_entity_input import RunEntityInputWhereClause, RunEntityInput

    pass
else:
    WorkflowVersionWhereClause = "WorkflowVersionWhereClause"
    WorkflowVersion = "WorkflowVersion"
    RunStepWhereClause = "RunStepWhereClause"
    RunStep = "RunStep"
    RunEntityInputWhereClause = "RunEntityInputWhereClause"
    RunEntityInput = "RunEntityInput"
    pass


"""
------------------------------------------------------------------------------
Dataloaders
------------------------------------------------------------------------------
These are batching functions for loading related objects to avoid N+1 queries.
"""


@strawberry.field
async def load_workflow_version_rows(
    root: "Run",
    info: Info,
    where: Annotated["WorkflowVersionWhereClause", strawberry.lazy("api.types.workflow_version")] | None = None,
) -> Optional[Annotated["WorkflowVersion", strawberry.lazy("api.types.workflow_version")]]:
    dataloader = info.context["sqlalchemy_loader"]
    mapper = inspect(db.Run)
    relationship = mapper.relationships["workflow_version"]
    return await dataloader.loader_for(relationship, where).load(root.workflow_version_id)  # type:ignore


@relay.connection(
    relay.ListConnection[Annotated["RunStep", strawberry.lazy("api.types.run_step")]]  # type:ignore
)
async def load_run_step_rows(
    root: "Run",
    info: Info,
    where: Annotated["RunStepWhereClause", strawberry.lazy("api.types.run_step")] | None = None,
) -> Sequence[Annotated["RunStep", strawberry.lazy("api.types.run_step")]]:
    dataloader = info.context["sqlalchemy_loader"]
    mapper = inspect(db.Run)
    relationship = mapper.relationships["run_steps"]
    return await dataloader.loader_for(relationship, where).load(root.id)  # type:ignore


@relay.connection(
    relay.ListConnection[Annotated["RunEntityInput", strawberry.lazy("api.types.run_entity_input")]]  # type:ignore
)
async def load_run_entity_input_rows(
    root: "Run",
    info: Info,
    where: Annotated["RunEntityInputWhereClause", strawberry.lazy("api.types.run_entity_input")] | None = None,
) -> Sequence[Annotated["RunEntityInput", strawberry.lazy("api.types.run_entity_input")]]:
    dataloader = info.context["sqlalchemy_loader"]
    mapper = inspect(db.Run)
    relationship = mapper.relationships["run_entity_inputs"]
    return await dataloader.loader_for(relationship, where).load(root.id)  # type:ignore


"""
------------------------------------------------------------------------------
Define Strawberry GQL types
------------------------------------------------------------------------------
"""

"""
Only let users specify IDs in WHERE clause when mutating data (for safety).
We can extend that list as we gather more use cases from the FE team.
"""


@strawberry.input
class RunWhereClauseMutations(TypedDict):
    id: UUIDComparators | None


"""
Supported WHERE clause attributes
"""


@strawberry.input
class RunWhereClause(TypedDict):
    id: UUIDComparators | None
    producing_run_id: IntComparators | None
    owner_user_id: IntComparators | None
    collection_id: IntComparators | None
    user_id: Optional[IntComparators] | None
    project_id: Optional[IntComparators] | None
    # TODO: Add proper datetime comparator
    started_at: Optional[StrComparators] | None
    # TODO: Add proper datetime comparator
    ended_at: Optional[StrComparators] | None
    execution_id: Optional[StrComparators] | None
    outputs_json: Optional[StrComparators] | None
    inputs_json: Optional[StrComparators] | None
    status: Optional[EnumComparators[RunStatus]] | None
    workflow_version: Optional[
        Annotated["WorkflowVersionWhereClause", strawberry.lazy("api.types.workflow_version")]
    ] | None
    run_steps: Optional[Annotated["RunStepWhereClause", strawberry.lazy("api.types.run_step")]] | None
    run_entity_inputs: Optional[
        Annotated["RunEntityInputWhereClause", strawberry.lazy("api.types.run_entity_input")]
    ] | None


"""
Define Run type
"""


@strawberry.type
class Run(EntityInterface):
    id: strawberry.ID
    producing_run_id: Optional[int]
    owner_user_id: int
    collection_id: int
    user_id: Optional[int] = None
    project_id: Optional[int] = None
    started_at: Optional[datetime.datetime] = None
    ended_at: Optional[datetime.datetime] = None
    execution_id: Optional[str] = None
    outputs_json: Optional[str] = None
    inputs_json: Optional[str] = None
    status: Optional[RunStatus] = None
    workflow_version: Optional[
        Annotated["WorkflowVersion", strawberry.lazy("api.types.workflow_version")]
    ] = load_workflow_version_rows  # type:ignore
    run_steps: Sequence[Annotated["RunStep", strawberry.lazy("api.types.run_step")]] = load_run_step_rows  # type:ignore
    run_entity_inputs: Sequence[
        Annotated["RunEntityInput", strawberry.lazy("api.types.run_entity_input")]
    ] = load_run_entity_input_rows  # type:ignore


"""
We need to add this to each Queryable type so that strawberry will accept either our
Strawberry type *or* a SQLAlchemy model instance as a valid response class from a resolver
"""
Run.__strawberry_definition__.is_type_of = lambda obj, info: type(obj) == db.Run or type(obj) == Run  # type: ignore

"""
------------------------------------------------------------------------------
Mutation types
------------------------------------------------------------------------------
"""


@strawberry.input()
class RunCreateInput:
    collection_id: int
    user_id: Optional[int] = None
    project_id: Optional[int] = None
    started_at: Optional[datetime.datetime] = None
    ended_at: Optional[datetime.datetime] = None
    execution_id: Optional[str] = None
    outputs_json: Optional[str] = None
    inputs_json: Optional[str] = None
    status: Optional[RunStatus] = None
    workflow_version_id: Optional[strawberry.ID] = None


@strawberry.input()
class RunUpdateInput:
    collection_id: Optional[int] = None
    user_id: Optional[int] = None
    project_id: Optional[int] = None
    started_at: Optional[datetime.datetime] = None
    ended_at: Optional[datetime.datetime] = None
    execution_id: Optional[str] = None
    outputs_json: Optional[str] = None
    inputs_json: Optional[str] = None
    status: Optional[RunStatus] = None
    workflow_version_id: Optional[strawberry.ID] = None


"""
------------------------------------------------------------------------------
Utilities
------------------------------------------------------------------------------
"""


@strawberry.field(extensions=[DependencyExtension()])
async def resolve_runs(
    session: AsyncSession = Depends(get_db_session, use_cache=False),
    cerbos_client: CerbosClient = Depends(get_cerbos_client),
    principal: Principal = Depends(require_auth_principal),
    where: Optional[RunWhereClause] = None,
) -> typing.Sequence[Run]:
    """
    Resolve Run objects. Used for queries (see api/queries.py).
    """
    return await get_db_rows(db.Run, session, cerbos_client, principal, where, [])  # type: ignore


@strawberry.mutation(extensions=[DependencyExtension()])
async def create_run(
    input: RunCreateInput,
    session: AsyncSession = Depends(get_db_session, use_cache=False),
    cerbos_client: CerbosClient = Depends(get_cerbos_client),
    principal: Principal = Depends(require_auth_principal),
) -> db.Entity:
    """
    Create a new Run object. Used for mutations (see api/mutations.py).
    """
    params = input.__dict__

    # Validate that user can create entity in this collection
    attr = {"collection_id": input.collection_id}
    resource = Resource(id="NEW_ID", kind=db.Run.__tablename__, attr=attr)
    if not cerbos_client.is_allowed("create", principal, resource):
        raise Exception("Unauthorized: Cannot create entity in this collection")

    # Save to DB
    params["owner_user_id"] = int(principal.id)
    new_entity = db.Run(**params)
    session.add(new_entity)
    await session.commit()
    return new_entity


@strawberry.mutation(extensions=[DependencyExtension()])
async def update_run(
    input: RunUpdateInput,
    where: RunWhereClauseMutations,
    session: AsyncSession = Depends(get_db_session, use_cache=False),
    cerbos_client: CerbosClient = Depends(get_cerbos_client),
    principal: Principal = Depends(require_auth_principal),
) -> Sequence[db.Entity]:
    """
    Update Run objects. Used for mutations (see api/mutations.py).
    """
    params = input.__dict__

    # Need at least one thing to update
    num_params = len([x for x in params if params[x] is not None])
    if num_params == 0:
        raise Exception("No fields to update")

    # Fetch entities for update, if we have access to them
    entities = await get_db_rows(db.Run, session, cerbos_client, principal, where, [], CerbosAction.UPDATE)
    if len(entities) == 0:
        raise Exception("Unauthorized: Cannot update entities")

    # Validate that the user has access to the new collection ID
    if input.collection_id:
        attr = {"collection_id": input.collection_id}
        resource = Resource(id="SOME_ID", kind=db.Run.__tablename__, attr=attr)
        if not cerbos_client.is_allowed(CerbosAction.UPDATE, principal, resource):
            raise Exception("Unauthorized: Cannot access new collection")

    # Update DB
    for entity in entities:
        for key in params:
            if params[key]:
                setattr(entity, key, params[key])
    await session.commit()
    return entities


@strawberry.mutation(extensions=[DependencyExtension()])
async def delete_run(
    where: RunWhereClauseMutations,
    session: AsyncSession = Depends(get_db_session, use_cache=False),
    cerbos_client: CerbosClient = Depends(get_cerbos_client),
    principal: Principal = Depends(require_auth_principal),
) -> Sequence[db.Entity]:
    """
    Delete Run objects. Used for mutations (see api/mutations.py).
    """
    # Fetch entities for deletion, if we have access to them
    entities = await get_db_rows(db.Run, session, cerbos_client, principal, where, [], CerbosAction.DELETE)
    if len(entities) == 0:
        raise Exception("Unauthorized: Cannot delete entities")

    # Update DB
    for entity in entities:
        await session.delete(entity)
    await session.commit()
    return entities
