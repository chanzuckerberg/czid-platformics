"""
Plugin that runs a workflow in SWIPE
"""

import json
from os.path import join
from typing import List
from uuid import uuid4
import boto3

from settings import SWIPEWorkflowRunnerSettings
from platformics.util.types_utils import JSONValue
from plugins.plugin_types import EventBus, WorkflowRunner


class SwipeWorkflowRunner(WorkflowRunner):
    """Runs the submitted inputs on the infrastucture
    generated by SWIPE
    """

    def __init__(self, settings: SWIPEWorkflowRunnerSettings):
        self.output_s3_prefix = settings.OUTPUT_S3_PREFIX
        self.state_machine_arn = settings.STATE_MACHINE_ARN
        self.sfn = boto3.client("stepfunctions", endpoint_url=settings.SFN_ENDPOINT)

    def supported_workflow_types(self) -> List[str]:
        """Returns the supported workflow types"""
        return ["WDL"]

    def description(self) -> str:
        """Returns a description of the workflow runner"""
        return "Runs WDL workflows on SWIPE infrastructure, using AWS Step Functions and Batch"

    async def run_workflow(
        self,
        event_bus: EventBus,
        workflow_path: str,
        inputs: JSONValue,
    ) -> str:
        """Formats the inputs into SWIPE format and kicks off the SFN execution

        :param on_complete: Fill in
        :param workflow_run_id: Fill in
        :param workflow_path: Fill in
        :param inputs: Fill in

        """
        runner_id = str(uuid4())
        result = self.sfn.start_execution(
            stateMachineArn=self.state_machine_arn,
            name=runner_id,
            input=json.dumps(
                {
                    "RUN_WDL_URI": workflow_path,
                    "Input": {"Run": inputs},
                    "OutputPrefix": f"{join(self.output_s3_prefix, runner_id)}/",
                }
            ),
        )
        arn = result["executionArn"]
        return arn
