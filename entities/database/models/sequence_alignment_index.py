# Auto-generated by running 'make codegen'. Do not edit.
# Make changes to the template codegen/templates/database/models/class_name.py.j2 instead.

import uuid
from typing import TYPE_CHECKING

from platformics.database.models.base import Entity
from sqlalchemy import ForeignKey, Enum
from sqlalchemy.dialects.postgresql import UUID
from sqlalchemy.orm import Mapped, mapped_column, relationship
from support.enums import AlignmentTool

if TYPE_CHECKING:
    from database.models.file import File
    from database.models.reference_genome import ReferenceGenome
else:
    File = "File"
    ReferenceGenome = "ReferenceGenome"


class SequenceAlignmentIndex(Entity):
    __tablename__ = "sequence_alignment_index"
    __mapper_args__ = {"polymorphic_identity": __tablename__, "polymorphic_load": "inline"}
    index_file_id: Mapped[uuid.UUID] = mapped_column(UUID, ForeignKey("file.id"), nullable=True)
    index_file: Mapped[File] = relationship(File, foreign_keys=index_file_id)
    reference_genome_id: Mapped[uuid.UUID] = mapped_column(
        UUID, ForeignKey("reference_genome.entity_id"), nullable=False
    )
    reference_genome: Mapped[ReferenceGenome] = relationship(
        ReferenceGenome, back_populates="sequence_alignment_indices", foreign_keys=reference_genome_id
    )
    tool: Mapped[AlignmentTool] = mapped_column(Enum(AlignmentTool, native_enum=False), nullable=False)
    entity_id: Mapped[uuid.UUID] = mapped_column(ForeignKey("entity.id"), nullable=False, primary_key=True)
