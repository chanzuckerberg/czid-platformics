"""
SQLAlchemy database model for MetadataField

Auto-generated by running 'make codegen'. Do not edit.
Make changes to the template codegen/templates/database/models/class_name.py.j2 instead.
"""

import uuid
from typing import TYPE_CHECKING

from platformics.database.models.base import Entity
from sqlalchemy import ForeignKey, String, Boolean
from sqlalchemy.orm import Mapped, mapped_column, relationship

if TYPE_CHECKING:
    from database.models.file import File
    from database.models.metadata_field_project import MetadataFieldProject
    from database.models.metadatum import Metadatum
else:
    File = "File"
    MetadataFieldProject = "MetadataFieldProject"
    Metadatum = "Metadatum"


class MetadataField(Entity):
    __tablename__ = "metadata_field"
    __mapper_args__ = {"polymorphic_identity": __tablename__, "polymorphic_load": "inline"}
    field_group: Mapped[list[MetadataFieldProject]] = relationship(
        "MetadataFieldProject",
        back_populates="metadata_field",
        uselist=True,
        foreign_keys="MetadataFieldProject.metadata_field_id",
    )
    field_name: Mapped[str] = mapped_column(String, nullable=False)
    description: Mapped[str] = mapped_column(String, nullable=False)
    field_type: Mapped[str] = mapped_column(String, nullable=False)
    is_required: Mapped[bool] = mapped_column(Boolean, nullable=False)
    options: Mapped[str] = mapped_column(String, nullable=True)
    default_value: Mapped[str] = mapped_column(String, nullable=True)
    metadatas: Mapped[list[Metadatum]] = relationship(
        "Metadatum", back_populates="metadata_field", uselist=True, foreign_keys="Metadatum.metadata_field_id"
    )
    entity_id: Mapped[uuid.UUID] = mapped_column(ForeignKey("entity.id"), nullable=False, primary_key=True)
