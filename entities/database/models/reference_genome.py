# Auto-generated by running 'make codegen'. Do not edit.
# Make changes to the template codegen/templates/database/models/class_name.py.j2 instead.

import uuid
from typing import TYPE_CHECKING

from platformics.database.models.base import Entity
from sqlalchemy import ForeignKey, String
from sqlalchemy.dialects.postgresql import UUID
from sqlalchemy.orm import Mapped, mapped_column, relationship

if TYPE_CHECKING:
    from database.models.file import File
    from database.models.taxon import Taxon
    from database.models.sequence_alignment_index import SequenceAlignmentIndex
    from database.models.consensus_genome import ConsensusGenome
    from database.models.genomic_range import GenomicRange
else:
    File = "File"
    Taxon = "Taxon"
    SequenceAlignmentIndex = "SequenceAlignmentIndex"
    ConsensusGenome = "ConsensusGenome"
    GenomicRange = "GenomicRange"


class ReferenceGenome(Entity):
    __tablename__ = "reference_genome"
    __mapper_args__ = {"polymorphic_identity": __tablename__, "polymorphic_load": "inline"}
    file_id: Mapped[uuid.UUID] = mapped_column(UUID, ForeignKey("file.id"), nullable=False)
    file: Mapped[File] = relationship(File, foreign_keys=file_id)
    file_index_id: Mapped[uuid.UUID] = mapped_column(UUID, ForeignKey("file.id"), nullable=True)
    file_index: Mapped[File] = relationship(File, foreign_keys=file_index_id)
    name: Mapped[str] = mapped_column(String, nullable=False)
    description: Mapped[str] = mapped_column(String, nullable=False)
    taxon_id: Mapped[uuid.UUID] = mapped_column(UUID, ForeignKey("taxon.entity_id"), nullable=False)
    taxon: Mapped[Taxon] = relationship(Taxon, back_populates="reference_genomes", foreign_keys=taxon_id)
    accession_id: Mapped[str] = mapped_column(String, nullable=True)
    sequence_alignment_indices: Mapped[list[SequenceAlignmentIndex]] = relationship(
        "SequenceAlignmentIndex",
        back_populates="reference_genome",
        uselist=True,
        foreign_keys="SequenceAlignmentIndex.reference_genome_id",
    )
    consensus_genomes: Mapped[list[ConsensusGenome]] = relationship(
        "ConsensusGenome",
        back_populates="reference_genome",
        uselist=True,
        foreign_keys="ConsensusGenome.reference_genome_id",
    )
    genomic_ranges: Mapped[list[GenomicRange]] = relationship(
        "GenomicRange", back_populates="reference_genome", uselist=True, foreign_keys="GenomicRange.reference_genome_id"
    )
    entity_id: Mapped[uuid.UUID] = mapped_column(ForeignKey("entity.id"), nullable=False, primary_key=True)
