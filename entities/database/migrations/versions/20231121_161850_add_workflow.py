"""add workflow

Create Date: 2023-11-22 00:18:53.103489

"""
import sqlalchemy as sa
from alembic import op
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = '20231121_161850'
down_revision = '20231116_143049'
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('workflow',
    sa.Column('name', sa.String(), nullable=True),
    sa.Column('default_version', sa.String(), nullable=True),
    sa.Column('minimum_supported_version', sa.String(), nullable=True),
    sa.Column('entity_id', sa.UUID(), nullable=False),
    sa.ForeignKeyConstraint(['entity_id'], ['entity.id'], name=op.f('fk_workflow_entity_id_entity')),
    sa.PrimaryKeyConstraint('entity_id', name=op.f('pk_workflow'))
    )
    op.create_table('workflow_version',
    sa.Column('graph_json', sa.String(), nullable=True),
    sa.Column('workflow_id', sa.UUID(), nullable=True),
    sa.Column('manifest', sa.String(), nullable=True),
    sa.Column('entity_id', sa.UUID(), nullable=False),
    sa.ForeignKeyConstraint(['entity_id'], ['entity.id'], name=op.f('fk_workflow_version_entity_id_entity')),
    sa.ForeignKeyConstraint(['workflow_id'], ['workflow.entity_id'], name=op.f('fk_workflow_version_workflow_id_workflow')),
    sa.PrimaryKeyConstraint('entity_id', name=op.f('pk_workflow_version'))
    )
    op.create_table('run',
    sa.Column('user_id', sa.Integer(), nullable=True),
    sa.Column('project_id', sa.Integer(), nullable=True),
    sa.Column('started_at', sa.DateTime(), nullable=True),
    sa.Column('ended_at', sa.DateTime(), nullable=True),
    sa.Column('execution_id', sa.String(), nullable=True),
    sa.Column('outputs_json', sa.String(), nullable=True),
    sa.Column('inputs_json', sa.String(), nullable=True),
    sa.Column('status', sa.Enum('SUCCEEDED', 'FAILED', 'PENDING', 'STARTED', 'RUNNING', name='runstatus', native_enum=False), nullable=True),
    sa.Column('workflow_version_id', sa.UUID(), nullable=True),
    sa.Column('entity_id', sa.UUID(), nullable=False),
    sa.ForeignKeyConstraint(['entity_id'], ['entity.id'], name=op.f('fk_run_entity_id_entity')),
    sa.ForeignKeyConstraint(['workflow_version_id'], ['workflow_version.entity_id'], name=op.f('fk_run_workflow_version_id_workflow_version')),
    sa.PrimaryKeyConstraint('entity_id', name=op.f('pk_run'))
    )
    op.create_table('run_entity_input',
    sa.Column('new_entity_id', sa.Integer(), nullable=True),
    sa.Column('field_name', sa.String(), nullable=True),
    sa.Column('run_id', sa.UUID(), nullable=True),
    sa.Column('entity_id', sa.UUID(), nullable=False),
    sa.ForeignKeyConstraint(['entity_id'], ['entity.id'], name=op.f('fk_run_entity_input_entity_id_entity')),
    sa.ForeignKeyConstraint(['run_id'], ['run.entity_id'], name=op.f('fk_run_entity_input_run_id_run')),
    sa.PrimaryKeyConstraint('entity_id', name=op.f('pk_run_entity_input'))
    )
    op.create_table('run_step',
    sa.Column('run_id', sa.UUID(), nullable=True),
    sa.Column('started_at', sa.DateTime(), nullable=True),
    sa.Column('ended_at', sa.DateTime(), nullable=True),
    sa.Column('status', sa.Enum('SUCCEEDED', 'FAILED', 'PENDING', 'STARTED', 'RUNNING', name='runstatus', native_enum=False), nullable=True),
    sa.Column('entity_id', sa.UUID(), nullable=False),
    sa.ForeignKeyConstraint(['entity_id'], ['entity.id'], name=op.f('fk_run_step_entity_id_entity')),
    sa.ForeignKeyConstraint(['run_id'], ['run.entity_id'], name=op.f('fk_run_step_run_id_run')),
    sa.PrimaryKeyConstraint('entity_id', name=op.f('pk_run_step'))
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('upstream_database',
    sa.Column('name', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('entity_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['entity_id'], ['entity.id'], name='fk_upstream_database_entity_id_entity'),
    sa.PrimaryKeyConstraint('entity_id', name='pk_upstream_database'),
    postgresql_ignore_search_path=False
    )
    op.create_table('genomic_range',
    sa.Column('reference_genome_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('file_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('entity_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['entity_id'], ['entity.id'], name='fk_genomic_range_entity_id_entity'),
    sa.ForeignKeyConstraint(['file_id'], ['file.id'], name='fk_genomic_range_file_id_file'),
    sa.ForeignKeyConstraint(['reference_genome_id'], ['reference_genome.entity_id'], name='fk_genomic_range_reference_genome_id_reference_genome'),
    sa.PrimaryKeyConstraint('entity_id', name='pk_genomic_range'),
    postgresql_ignore_search_path=False
    )
    op.create_table('metadata_field_project',
    sa.Column('project_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('metadata_field_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('entity_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['entity_id'], ['entity.id'], name='fk_metadata_field_project_entity_id_entity'),
    sa.ForeignKeyConstraint(['metadata_field_id'], ['metadata_field.entity_id'], name='fk_metadata_field_project_metadata_field_id_metadata_field'),
    sa.PrimaryKeyConstraint('entity_id', name='pk_metadata_field_project')
    )
    op.create_table('metadatum',
    sa.Column('sample_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('metadata_field_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('value', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('entity_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['entity_id'], ['entity.id'], name='fk_metadatum_entity_id_entity'),
    sa.ForeignKeyConstraint(['metadata_field_id'], ['metadata_field.entity_id'], name='fk_metadatum_metadata_field_id_metadata_field'),
    sa.ForeignKeyConstraint(['sample_id'], ['sample.entity_id'], name='fk_metadatum_sample_id_sample'),
    sa.PrimaryKeyConstraint('entity_id', name='pk_metadatum')
    )
    op.create_table('metric_consensus_genome',
    sa.Column('consensus_genome_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('coverage_depth', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('reference_genome_length', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('percent_genome_called', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('percent_identity', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('gc_percent', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('total_reads', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('mapped_reads', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('ref_snps', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('n_actg', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('n_missing', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('n_ambiguous', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('coverage_viz_summary_file_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('entity_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['consensus_genome_id'], ['consensus_genome.entity_id'], name='fk_metric_consensus_genome_consensus_genome_id_consensus_genome'),
    sa.ForeignKeyConstraint(['coverage_viz_summary_file_id'], ['file.id'], name='fk_metric_consensus_genome_coverage_viz_summary_file_id_file'),
    sa.ForeignKeyConstraint(['entity_id'], ['entity.id'], name='fk_metric_consensus_genome_entity_id_entity'),
    sa.PrimaryKeyConstraint('entity_id', name='pk_metric_consensus_genome')
    )
    op.create_table('contig',
    sa.Column('sequencing_read_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('sequence', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('entity_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['entity_id'], ['entity.id'], name='fk_contig_entity_id_entity'),
    sa.ForeignKeyConstraint(['sequencing_read_id'], ['sequencing_read.entity_id'], name='fk_contig_sequencing_read_id_sequencing_read'),
    sa.PrimaryKeyConstraint('entity_id', name='pk_contig')
    )
    op.create_table('reference_genome',
    sa.Column('file_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('file_index_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('name', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('description', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('taxon_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('accession_id', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('entity_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['entity_id'], ['entity.id'], name='fk_reference_genome_entity_id_entity'),
    sa.ForeignKeyConstraint(['file_id'], ['file.id'], name='fk_reference_genome_file_id_file'),
    sa.ForeignKeyConstraint(['file_index_id'], ['file.id'], name='fk_reference_genome_file_index_id_file'),
    sa.ForeignKeyConstraint(['taxon_id'], ['taxon.entity_id'], name='fk_reference_genome_taxon_id_taxon'),
    sa.PrimaryKeyConstraint('entity_id', name='pk_reference_genome'),
    postgresql_ignore_search_path=False
    )
    op.create_table('metadata_field',
    sa.Column('field_name', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('description', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('field_type', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('is_required', sa.BOOLEAN(), autoincrement=False, nullable=False),
    sa.Column('options', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('default_value', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('entity_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['entity_id'], ['entity.id'], name='fk_metadata_field_entity_id_entity'),
    sa.PrimaryKeyConstraint('entity_id', name='pk_metadata_field')
    )
    op.create_table('coverage_viz',
    sa.Column('accession_id', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('coverage_viz_file_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('entity_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['coverage_viz_file_id'], ['file.id'], name='fk_coverage_viz_coverage_viz_file_id_file'),
    sa.ForeignKeyConstraint(['entity_id'], ['entity.id'], name='fk_coverage_viz_entity_id_entity'),
    sa.PrimaryKeyConstraint('entity_id', name='pk_coverage_viz')
    )
    op.create_table('sequence_alignment_index',
    sa.Column('index_file_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('reference_genome_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('tool', sa.VARCHAR(length=8), autoincrement=False, nullable=False),
    sa.Column('entity_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['entity_id'], ['entity.id'], name='fk_sequence_alignment_index_entity_id_entity'),
    sa.ForeignKeyConstraint(['index_file_id'], ['file.id'], name='fk_sequence_alignment_index_index_file_id_file'),
    sa.ForeignKeyConstraint(['reference_genome_id'], ['reference_genome.entity_id'], name='fk_sequence_alignment_index_reference_genome_id_referen_f08b'),
    sa.PrimaryKeyConstraint('entity_id', name='pk_sequence_alignment_index')
    )
    op.create_table('sequencing_read',
    sa.Column('sample_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('protocol', sa.VARCHAR(length=8), autoincrement=False, nullable=False),
    sa.Column('r1_file_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('r2_file_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('technology', sa.VARCHAR(length=8), autoincrement=False, nullable=False),
    sa.Column('nucleic_acid', sa.VARCHAR(length=3), autoincrement=False, nullable=False),
    sa.Column('has_ercc', sa.BOOLEAN(), autoincrement=False, nullable=False),
    sa.Column('taxon_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('primer_file_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('entity_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['entity_id'], ['entity.id'], name='fk_sequencing_read_entity_id_entity'),
    sa.ForeignKeyConstraint(['primer_file_id'], ['file.id'], name='fk_sequencing_read_primer_file_id_file'),
    sa.ForeignKeyConstraint(['r1_file_id'], ['file.id'], name='fk_sequencing_read_r1_file_id_file'),
    sa.ForeignKeyConstraint(['r2_file_id'], ['file.id'], name='fk_sequencing_read_r2_file_id_file'),
    sa.ForeignKeyConstraint(['sample_id'], ['sample.entity_id'], name='fk_sequencing_read_sample_id_sample'),
    sa.ForeignKeyConstraint(['taxon_id'], ['taxon.entity_id'], name='fk_sequencing_read_taxon_id_taxon'),
    sa.PrimaryKeyConstraint('entity_id', name='pk_sequencing_read'),
    postgresql_ignore_search_path=False
    )
    op.create_table('taxon',
    sa.Column('wikipedia_id', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('description', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('common_name', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('name', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('is_phage', sa.BOOLEAN(), autoincrement=False, nullable=False),
    sa.Column('upstream_database_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('upstream_database_identifier', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('level', sa.VARCHAR(length=7), autoincrement=False, nullable=False),
    sa.Column('tax_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('tax_id_parent', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('tax_id_species', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('tax_id_genus', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('tax_id_family', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('tax_id_order', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('tax_id_class', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('tax_id_phylum', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('tax_id_kingdom', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('entity_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['entity_id'], ['entity.id'], name='fk_taxon_entity_id_entity'),
    sa.ForeignKeyConstraint(['upstream_database_id'], ['upstream_database.entity_id'], name='fk_taxon_upstream_database_id_upstream_database'),
    sa.PrimaryKeyConstraint('entity_id', name='pk_taxon'),
    postgresql_ignore_search_path=False
    )
    op.create_table('consensus_genome',
    sa.Column('taxon_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('sequence_read_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('genomic_range_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('reference_genome_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('sequence_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('is_reverse_complement', sa.BOOLEAN(), autoincrement=False, nullable=False),
    sa.Column('intermediate_outputs_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('entity_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['entity_id'], ['entity.id'], name='fk_consensus_genome_entity_id_entity'),
    sa.ForeignKeyConstraint(['genomic_range_id'], ['genomic_range.entity_id'], name='fk_consensus_genome_genomic_range_id_genomic_range'),
    sa.ForeignKeyConstraint(['intermediate_outputs_id'], ['file.id'], name='fk_consensus_genome_intermediate_outputs_id_file'),
    sa.ForeignKeyConstraint(['reference_genome_id'], ['reference_genome.entity_id'], name='fk_consensus_genome_reference_genome_id_reference_genome'),
    sa.ForeignKeyConstraint(['sequence_id'], ['file.id'], name='fk_consensus_genome_sequence_id_file'),
    sa.ForeignKeyConstraint(['sequence_read_id'], ['sequencing_read.entity_id'], name='fk_consensus_genome_sequence_read_id_sequencing_read'),
    sa.ForeignKeyConstraint(['taxon_id'], ['taxon.entity_id'], name='fk_consensus_genome_taxon_id_taxon'),
    sa.PrimaryKeyConstraint('entity_id', name='pk_consensus_genome')
    )
    op.create_table('sample',
    sa.Column('name', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('sample_type', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('water_control', sa.BOOLEAN(), autoincrement=False, nullable=False),
    sa.Column('collection_date', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('collection_location', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('description', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('host_taxon_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('entity_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['entity_id'], ['entity.id'], name='fk_sample_entity_id_entity'),
    sa.ForeignKeyConstraint(['host_taxon_id'], ['taxon.entity_id'], name='fk_sample_host_taxon_id_taxon'),
    sa.PrimaryKeyConstraint('entity_id', name='pk_sample')
    )
    op.drop_table('run_step')
    op.drop_table('run_entity_input')
    op.drop_table('run')
    op.drop_table('workflow_version')
    op.drop_table('workflow')
    # ### end Alembic commands ###
