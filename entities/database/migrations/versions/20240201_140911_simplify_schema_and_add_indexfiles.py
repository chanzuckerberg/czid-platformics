"""simplify schema and add indexfiles

Create Date: 2024-02-01 22:09:12.281285

"""
import sqlalchemy as sa
from alembic import op

# revision identifiers, used by Alembic.
revision = "20240201_140911"
down_revision = "20240129_115001"
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "index_file",
        sa.Column(
            "name",
            sa.Enum(
                "nt",
                "nt_loc",
                "nt_info",
                "nr",
                "nr_loc",
                "lineage",
                "accession2taxid",
                "deuterostome",
                "taxon_blacklist",
                "minimap2_long",
                "minimap2_short",
                "diamond",
                "star",
                "bowtie2",
                "bowtie2_v2",
                "minimap2_dna",
                "minimap2_rna",
                "hisat2",
                "kallisto",
                "original_transcripts_gtf",
                name="indextypes",
                native_enum=False,
            ),
            nullable=False,
        ),
        sa.Column("version", sa.String(), nullable=False),
        sa.Column("file_id", sa.UUID(), nullable=False),
        sa.Column("upstream_database_id", sa.UUID(), nullable=True),
        sa.Column("host_organism_id", sa.UUID(), nullable=True),
        sa.Column("entity_id", sa.UUID(), nullable=False),
        sa.ForeignKeyConstraint(["entity_id"], ["entity.id"], name=op.f("fk_index_file_entity_id_entity")),
        sa.ForeignKeyConstraint(["file_id"], ["file.id"], name=op.f("fk_index_file_file_id_file")),
        sa.ForeignKeyConstraint(
            ["host_organism_id"], ["host_organism.entity_id"], name=op.f("fk_index_file_host_organism_id_host_organism")
        ),
        sa.ForeignKeyConstraint(
            ["upstream_database_id"],
            ["upstream_database.entity_id"],
            name=op.f("fk_index_file_upstream_database_id_upstream_database"),
        ),
        sa.PrimaryKeyConstraint("entity_id", name=op.f("pk_index_file")),
    )
    op.drop_index("consensus_genome_intermediate_outputs", table_name="consensus_genome")
    op.drop_index("consensus_genome_reference_genome", table_name="consensus_genome")
    op.drop_index("consensus_genome_sequence", table_name="consensus_genome")
    op.drop_index("consensus_genome_sequence_read", table_name="consensus_genome")
    op.drop_constraint(
        "fk_consensus_genome_reference_genome_id_reference_genome", "consensus_genome", type_="foreignkey"
    )
    op.drop_column("consensus_genome", "reference_genome_id")
    op.drop_index("entity_workflow", table_name="entity")
    op.drop_index("file_entity", table_name="file")
    op.drop_index("genomic_range_file", table_name="genomic_range")
    op.drop_index("genomic_range_reference_genome", table_name="genomic_range")
    op.drop_constraint("fk_genomic_range_reference_genome_id_reference_genome", "genomic_range", type_="foreignkey")
    op.drop_column("genomic_range", "reference_genome_id")
    op.add_column(
        "host_organism",
        sa.Column(
            "category",
            sa.Enum("human", "insect", "non_human_animal", "unknown", name="hostorganismcategory", native_enum=False),
            nullable=False,
        ),
    )
    op.add_column("host_organism", sa.Column("skip_deutero_filter", sa.Boolean(), nullable=False))
    op.drop_constraint("fk_host_organism_host_filtering_id_file", "host_organism", type_="foreignkey")
    op.drop_column("host_organism", "host_filtering_id")
    op.drop_index("metadatum_search", table_name="metadatum")
    op.drop_index("metadatum_unique", table_name="metadatum")
    op.drop_index("metric_consensus_genome_consensus_genome", table_name="metric_consensus_genome")
    op.drop_index("phylo_tree_tree", table_name="phylogenetic_tree")
    op.drop_index("reference_genome_file", table_name="reference_genome")
    op.drop_index("reference_genome_taxon", table_name="reference_genome")
    op.drop_constraint("fk_reference_genome_taxon_id_taxon", "reference_genome", type_="foreignkey")
    op.drop_column("reference_genome", "taxon_id")
    op.add_column("sample", sa.Column("notes", sa.String(), nullable=True))
    op.add_column("sample", sa.Column("host_organism_id", sa.UUID(), nullable=True))
    op.drop_index("sample_host_taxon_id", table_name="sample")
    op.drop_constraint("fk_sample_host_taxon_id_taxon", "sample", type_="foreignkey")
    op.create_foreign_key(
        op.f("fk_sample_host_organism_id_host_organism"), "sample", "host_organism", ["host_organism_id"], ["entity_id"]
    )
    op.drop_column("sample", "host_taxon_id")
    op.drop_column("sample", "description")
    op.add_column("sequencing_read", sa.Column("medaka_model", sa.String(), nullable=True))
    op.add_column("sequencing_read", sa.Column("reference_sequence_id", sa.UUID(), nullable=True))
    op.drop_index("sequencing_read_primer", table_name="sequencing_read")
    op.drop_index("sequencing_read_r1_file", table_name="sequencing_read")
    op.drop_index("sequencing_read_r2_file", table_name="sequencing_read")
    op.drop_index("sequencing_read_sample", table_name="sequencing_read")
    op.drop_index("sequencing_read_taxon", table_name="sequencing_read")
    op.create_foreign_key(
        op.f("fk_sequencing_read_reference_sequence_id_reference_genome"),
        "sequencing_read",
        "reference_genome",
        ["reference_sequence_id"],
        ["entity_id"],
    )
    op.drop_index("taxon_class", table_name="taxon")
    op.drop_index("taxon_common_name", table_name="taxon")
    op.drop_index("taxon_family", table_name="taxon")
    op.drop_index("taxon_genus", table_name="taxon")
    op.drop_index("taxon_kingdom", table_name="taxon")
    op.drop_index("taxon_name", table_name="taxon")
    op.drop_index("taxon_order", table_name="taxon")
    op.drop_index("taxon_parent", table_name="taxon")
    op.drop_index("taxon_phylum", table_name="taxon")
    op.drop_index("taxon_species", table_name="taxon")
    op.drop_index("taxon_subspecies", table_name="taxon")
    op.drop_index("taxon_superkingdom", table_name="taxon")
    op.drop_index("taxon_upstream_database", table_name="taxon")
    op.drop_index("upstream_database_name", table_name="upstream_database")
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_index("upstream_database_name", "upstream_database", ["name"], unique=False)
    op.create_index("taxon_upstream_database", "taxon", ["upstream_database_id"], unique=False)
    op.create_index("taxon_superkingdom", "taxon", ["tax_superkingdom_id"], unique=False)
    op.create_index("taxon_subspecies", "taxon", ["tax_subspecies_id"], unique=False)
    op.create_index("taxon_species", "taxon", ["tax_species_id"], unique=False)
    op.create_index("taxon_phylum", "taxon", ["tax_phylum_id"], unique=False)
    op.create_index("taxon_parent", "taxon", ["tax_parent_id"], unique=False)
    op.create_index("taxon_order", "taxon", ["tax_order_id"], unique=False)
    op.create_index("taxon_name", "taxon", ["name"], unique=False)
    op.create_index("taxon_kingdom", "taxon", ["tax_kingdom_id"], unique=False)
    op.create_index("taxon_genus", "taxon", ["tax_genus_id"], unique=False)
    op.create_index("taxon_family", "taxon", ["tax_family_id"], unique=False)
    op.create_index("taxon_common_name", "taxon", ["common_name"], unique=False)
    op.create_index("taxon_class", "taxon", ["tax_class_id"], unique=False)
    op.drop_constraint(
        op.f("fk_sequencing_read_reference_sequence_id_reference_genome"), "sequencing_read", type_="foreignkey"
    )
    op.create_index("sequencing_read_taxon", "sequencing_read", ["taxon_id"], unique=False)
    op.create_index("sequencing_read_sample", "sequencing_read", ["sample_id"], unique=False)
    op.create_index("sequencing_read_r2_file", "sequencing_read", ["r2_file_id"], unique=False)
    op.create_index("sequencing_read_r1_file", "sequencing_read", ["r1_file_id"], unique=False)
    op.create_index("sequencing_read_primer", "sequencing_read", ["primer_file_id"], unique=False)
    op.drop_column("sequencing_read", "reference_sequence_id")
    op.drop_column("sequencing_read", "medaka_model")
    op.add_column("sample", sa.Column("description", sa.VARCHAR(), autoincrement=False, nullable=True))
    op.add_column("sample", sa.Column("host_taxon_id", sa.UUID(), autoincrement=False, nullable=True))
    op.drop_constraint(op.f("fk_sample_host_organism_id_host_organism"), "sample", type_="foreignkey")
    op.create_foreign_key("fk_sample_host_taxon_id_taxon", "sample", "taxon", ["host_taxon_id"], ["entity_id"])
    op.create_index("sample_host_taxon_id", "sample", ["host_taxon_id"], unique=False)
    op.drop_column("sample", "host_organism_id")
    op.drop_column("sample", "notes")
    op.add_column("reference_genome", sa.Column("taxon_id", sa.UUID(), autoincrement=False, nullable=False))
    op.create_foreign_key(
        "fk_reference_genome_taxon_id_taxon", "reference_genome", "taxon", ["taxon_id"], ["entity_id"]
    )
    op.create_index("reference_genome_taxon", "reference_genome", ["taxon_id"], unique=False)
    op.create_index("reference_genome_file", "reference_genome", ["file_id"], unique=False)
    op.create_index("phylo_tree_tree", "phylogenetic_tree", ["tree_id"], unique=False)
    op.create_index(
        "metric_consensus_genome_consensus_genome", "metric_consensus_genome", ["consensus_genome_id"], unique=False
    )
    op.create_index("metadatum_unique", "metadatum", ["sample_id", "field_name"], unique=False)
    op.create_index("metadatum_search", "metadatum", ["sample_id", "field_name", "value"], unique=False)
    op.add_column("host_organism", sa.Column("host_filtering_id", sa.UUID(), autoincrement=False, nullable=True))
    op.create_foreign_key(
        "fk_host_organism_host_filtering_id_file", "host_organism", "file", ["host_filtering_id"], ["id"]
    )
    op.drop_column("host_organism", "skip_deutero_filter")
    op.drop_column("host_organism", "category")
    op.add_column("genomic_range", sa.Column("reference_genome_id", sa.UUID(), autoincrement=False, nullable=True))
    op.create_foreign_key(
        "fk_genomic_range_reference_genome_id_reference_genome",
        "genomic_range",
        "reference_genome",
        ["reference_genome_id"],
        ["entity_id"],
    )
    op.create_index("genomic_range_reference_genome", "genomic_range", ["reference_genome_id"], unique=False)
    op.create_index("genomic_range_file", "genomic_range", ["file_id"], unique=False)
    op.create_index("file_entity", "file", ["entity_id"], unique=False)
    op.create_index("entity_workflow", "entity", ["collection_id", "producing_run_id", "owner_user_id"], unique=False)
    op.add_column("consensus_genome", sa.Column("reference_genome_id", sa.UUID(), autoincrement=False, nullable=False))
    op.create_foreign_key(
        "fk_consensus_genome_reference_genome_id_reference_genome",
        "consensus_genome",
        "reference_genome",
        ["reference_genome_id"],
        ["entity_id"],
    )
    op.create_index("consensus_genome_sequence_read", "consensus_genome", ["sequence_read_id"], unique=False)
    op.create_index("consensus_genome_sequence", "consensus_genome", ["sequence_id"], unique=False)
    op.create_index("consensus_genome_reference_genome", "consensus_genome", ["reference_genome_id"], unique=False)
    op.create_index(
        "consensus_genome_intermediate_outputs", "consensus_genome", ["intermediate_outputs_id"], unique=False
    )
    op.drop_table("index_file")
    # ### end Alembic commands ###
