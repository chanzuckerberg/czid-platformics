type Entity implements EntityInterface {
  id: UUID!
  type: String!
  producingRunId: Int
  ownerUserId: Int!
  collectionId: Int!
}

interface EntityInterface {
  id: UUID!
  type: String!
  producingRunId: Int
  ownerUserId: Int!
  collectionId: Int!
}

type File {
  id: UUID!
  entityId: UUID
  entityFieldName: String
  status: String!
  protocol: String!
  namespace: String!
  path: String!
  fileFormat: String!
  compressionType: String!
  size: Int!
  entity: EntityInterface
}

type Mutation {
  createSample(name: String!, location: String!, collectionId: Int!): Sample!
  createSequencingRead(nucleotide: String!, sequence: String!, protocol: String!, sequenceFileId: UUID, sampleId: UUID!, collectionId: Int!): SequencingRead!
  updateSample(entityId: UUID!, name: String!, location: String!): Sample!
}

type Query {
  samples(id: UUID = null): [Sample!]!
  sequencingReads(id: UUID = null): [SequencingRead!]!
  files(id: UUID = null): [File!]!
}

type Sample implements EntityInterface {
  id: UUID!
  type: String!
  producingRunId: Int
  ownerUserId: Int!
  collectionId: Int!
  entityId: UUID!
  name: String!
  location: String!
  sequencingReads: SequencingReadConnection!
}

type SequencingRead implements EntityInterface {
  id: UUID!
  type: String!
  producingRunId: Int
  ownerUserId: Int!
  collectionId: Int!
  entityId: UUID!
  nucleotide: String!
  sequence: String!
  protocol: String!
  sequenceFileId: UUID
  sampleId: UUID!
  sequenceFile: File
  sample: Sample!
}

type SequencingReadConnection {
  edges: [SequencingReadEdge!]!
}

type SequencingReadEdge {
  node: SequencingRead!
}

scalar UUID
