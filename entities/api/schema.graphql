enum AlignmentTool {
  bowtie2
  minimap2
  ncbi
}

input AlignmentToolEnumComparators {
  _eq: AlignmentTool
  _neq: AlignmentTool
  _in: [AlignmentTool!]
  _nin: [AlignmentTool!]
  _gt: AlignmentTool
  _gte: AlignmentTool
  _lt: AlignmentTool
  _lte: AlignmentTool
  _is_null: AlignmentTool
}

input BoolComparators {
  _eq: Int
  _neq: Int
  _in: [Int!]
  _nin: [Int!]
  _gt: Int
  _gte: Int
  _lt: Int
  _lte: Int
  _is_null: Int
}

type ConsensusGenome implements EntityInterface & Node {
  """The Globally Unique ID of this object"""
  _id: GlobalID!
  id: ID!
  producingRunId: Int
  ownerUserId: Int!
  collectionId: Int!
  taxon(where: TaxonWhereClause = null): Taxon
  sequenceRead(where: SequencingReadWhereClause = null): SequencingRead
  genomicRange(where: GenomicRangeWhereClause = null): GenomicRange
  referenceGenome(where: ReferenceGenomeWhereClause = null): ReferenceGenome
  sequenceId: ID
  sequence(where: FileWhereClause = null): File
  isReverseComplement: Boolean!
  intermediateOutputsId: ID
  intermediateOutputs(where: FileWhereClause = null): File
  metrics(
    where: MetricConsensusGenomeWhereClause = null

    """Returns the items in the list that come before the specified cursor."""
    before: String = null

    """Returns the items in the list that come after the specified cursor."""
    after: String = null

    """Returns the first n items from the list."""
    first: Int = null

    """Returns the items in the list that come after the specified cursor."""
    last: Int = null
  ): MetricConsensusGenomeConnection!
  entityId: ID!
}

"""A connection to a list of items."""
type ConsensusGenomeConnection {
  """Pagination data for this connection"""
  pageInfo: PageInfo!

  """Contains the nodes in this connection"""
  edges: [ConsensusGenomeEdge!]!
}

input ConsensusGenomeCreateInput {
  collectionId: Int!
  taxonId: ID!
  sequenceReadId: ID!
  genomicRangeId: ID!
  referenceGenomeId: ID!
  sequenceId: ID!
  isReverseComplement: Boolean!
  intermediateOutputsId: ID = null
}

"""An edge in a connection."""
type ConsensusGenomeEdge {
  """A cursor for use in pagination"""
  cursor: String!

  """The item at the end of the edge"""
  node: ConsensusGenome!
}

input ConsensusGenomeUpdateInput {
  collectionId: Int = null
  taxonId: ID = null
  sequenceReadId: ID = null
  genomicRangeId: ID = null
  referenceGenomeId: ID = null
  sequenceId: ID = null
  isReverseComplement: Boolean = null
  intermediateOutputsId: ID = null
}

input ConsensusGenomeWhereClause {
  id: UUIDComparators
  producingRunId: IntComparators
  ownerUserId: IntComparators
  collectionId: IntComparators
  taxon: TaxonWhereClause
  sequenceRead: SequencingReadWhereClause
  genomicRange: GenomicRangeWhereClause
  referenceGenome: ReferenceGenomeWhereClause
  isReverseComplement: BoolComparators
  metrics: MetricConsensusGenomeWhereClause
  entityId: UUIDComparators
}

type Contig implements EntityInterface & Node {
  """The Globally Unique ID of this object"""
  _id: GlobalID!
  id: ID!
  producingRunId: Int
  ownerUserId: Int!
  collectionId: Int!
  sequencingRead(where: SequencingReadWhereClause = null): SequencingRead
  sequence: String!
  entityId: ID!
}

"""A connection to a list of items."""
type ContigConnection {
  """Pagination data for this connection"""
  pageInfo: PageInfo!

  """Contains the nodes in this connection"""
  edges: [ContigEdge!]!
}

input ContigCreateInput {
  collectionId: Int!
  sequencingReadId: ID = null
  sequence: String!
}

"""An edge in a connection."""
type ContigEdge {
  """A cursor for use in pagination"""
  cursor: String!

  """The item at the end of the edge"""
  node: Contig!
}

input ContigUpdateInput {
  collectionId: Int = null
  sequencingReadId: ID = null
  sequence: String = null
}

input ContigWhereClause {
  id: UUIDComparators
  producingRunId: IntComparators
  ownerUserId: IntComparators
  collectionId: IntComparators
  sequencingRead: SequencingReadWhereClause
  sequence: StrComparators
  entityId: UUIDComparators
}

type CoverageViz implements EntityInterface & Node {
  """The Globally Unique ID of this object"""
  _id: GlobalID!
  id: ID!
  producingRunId: Int
  ownerUserId: Int!
  collectionId: Int!
  accessionId: String!
  coverageVizFileId: ID
  coverageVizFile(where: FileWhereClause = null): File
  entityId: ID!
}

input CoverageVizCreateInput {
  collectionId: Int!
  accessionId: String!
  coverageVizFileId: ID!
}

input CoverageVizUpdateInput {
  collectionId: Int = null
  accessionId: String = null
  coverageVizFileId: ID = null
}

input CoverageVizWhereClause {
  id: UUIDComparators
  producingRunId: IntComparators
  ownerUserId: IntComparators
  collectionId: IntComparators
  accessionId: StrComparators
  entityId: UUIDComparators
}

"""Date with time (isoformat)"""
scalar DateTime

type Entity {
  id: ID!
  type: String!
  producingRunId: ID!
  ownerUserId: Int!
  collectionId: Int!
}

interface EntityInterface implements Node {
  """The Globally Unique ID of this object"""
  _id: GlobalID!
}

input EntityWhereClause {
  id: UUIDComparators
  entityId: UUIDComparators
  producingRunId: IntComparators
  ownerUserId: IntComparators
  collectionId: IntComparators
}

type File {
  id: ID!
  entityId: ID!
  entityFieldName: String!
  entity(where: EntityWhereClause = null): Entity
  status: FileStatus!
  protocol: String!
  namespace: String!
  path: String!
  fileFormat: String!
  compressionType: Int
  size: Int
  downloadLink(expiration: Int! = 3600): SignedURL
}

input FileCreate {
  name: String!
  fileFormat: String!
  compressionType: String = null
  protocol: String!
  namespace: String!
  path: String!
}

enum FileStatus {
  SUCCESS
  FAILED
  PENDING
}

input FileStatusEnumComparators {
  _eq: FileStatus
  _neq: FileStatus
  _in: [FileStatus!]
  _nin: [FileStatus!]
  _gt: FileStatus
  _gte: FileStatus
  _lt: FileStatus
  _lte: FileStatus
  _is_null: FileStatus
}

input FileUpload {
  name: String!
  fileFormat: String!
  compressionType: String = null
}

input FileWhereClause {
  id: UUIDComparators
  status: FileStatusEnumComparators
  protocol: StrComparators
  namespace: StrComparators
  path: StrComparators
  compressionType: StrComparators
  size: IntComparators
}

type GenomicRange implements EntityInterface & Node {
  """The Globally Unique ID of this object"""
  _id: GlobalID!
  id: ID!
  producingRunId: Int
  ownerUserId: Int!
  collectionId: Int!
  referenceGenome(where: ReferenceGenomeWhereClause = null): ReferenceGenome
  fileId: ID
  file(where: FileWhereClause = null): File
  consensusGenomes(
    where: ConsensusGenomeWhereClause = null

    """Returns the items in the list that come before the specified cursor."""
    before: String = null

    """Returns the items in the list that come after the specified cursor."""
    after: String = null

    """Returns the first n items from the list."""
    first: Int = null

    """Returns the items in the list that come after the specified cursor."""
    last: Int = null
  ): ConsensusGenomeConnection!
  entityId: ID!
}

"""A connection to a list of items."""
type GenomicRangeConnection {
  """Pagination data for this connection"""
  pageInfo: PageInfo!

  """Contains the nodes in this connection"""
  edges: [GenomicRangeEdge!]!
}

input GenomicRangeCreateInput {
  collectionId: Int!
  referenceGenomeId: ID!
  fileId: ID!
}

"""An edge in a connection."""
type GenomicRangeEdge {
  """A cursor for use in pagination"""
  cursor: String!

  """The item at the end of the edge"""
  node: GenomicRange!
}

input GenomicRangeUpdateInput {
  collectionId: Int = null
  referenceGenomeId: ID = null
  fileId: ID = null
}

input GenomicRangeWhereClause {
  id: UUIDComparators
  producingRunId: IntComparators
  ownerUserId: IntComparators
  collectionId: IntComparators
  referenceGenome: ReferenceGenomeWhereClause
  consensusGenomes: ConsensusGenomeWhereClause
  entityId: UUIDComparators
}

"""
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
"""
scalar GlobalID @specifiedBy(url: "https://relay.dev/graphql/objectidentification.htm")

input IntComparators {
  _eq: Int
  _neq: Int
  _in: [Int!]
  _nin: [Int!]
  _gt: Int
  _gte: Int
  _lt: Int
  _lte: Int
  _is_null: Int
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

type MetadataField implements EntityInterface & Node {
  """The Globally Unique ID of this object"""
  _id: GlobalID!
  id: ID!
  producingRunId: Int
  ownerUserId: Int!
  collectionId: Int!
  fieldGroup(
    where: MetadataFieldProjectWhereClause = null

    """Returns the items in the list that come before the specified cursor."""
    before: String = null

    """Returns the items in the list that come after the specified cursor."""
    after: String = null

    """Returns the first n items from the list."""
    first: Int = null

    """Returns the items in the list that come after the specified cursor."""
    last: Int = null
  ): MetadataFieldProjectConnection!
  fieldName: String!
  description: String!
  fieldType: String!
  isRequired: Boolean!
  options: String
  defaultValue: String
  metadatas(
    where: MetadatumWhereClause = null

    """Returns the items in the list that come before the specified cursor."""
    before: String = null

    """Returns the items in the list that come after the specified cursor."""
    after: String = null

    """Returns the first n items from the list."""
    first: Int = null

    """Returns the items in the list that come after the specified cursor."""
    last: Int = null
  ): MetadatumConnection!
  entityId: ID!
}

input MetadataFieldCreateInput {
  collectionId: Int!
  fieldName: String!
  description: String!
  fieldType: String!
  isRequired: Boolean!
  options: String = null
  defaultValue: String = null
}

type MetadataFieldProject implements EntityInterface & Node {
  """The Globally Unique ID of this object"""
  _id: GlobalID!
  id: ID!
  producingRunId: Int
  ownerUserId: Int!
  collectionId: Int!
  projectId: Int!
  metadataField(where: MetadataFieldWhereClause = null): MetadataField
  entityId: ID!
}

"""A connection to a list of items."""
type MetadataFieldProjectConnection {
  """Pagination data for this connection"""
  pageInfo: PageInfo!

  """Contains the nodes in this connection"""
  edges: [MetadataFieldProjectEdge!]!
}

input MetadataFieldProjectCreateInput {
  collectionId: Int!
  projectId: Int!
  metadataFieldId: ID!
}

"""An edge in a connection."""
type MetadataFieldProjectEdge {
  """A cursor for use in pagination"""
  cursor: String!

  """The item at the end of the edge"""
  node: MetadataFieldProject!
}

input MetadataFieldProjectUpdateInput {
  collectionId: Int = null
  projectId: Int = null
  metadataFieldId: ID = null
}

input MetadataFieldProjectWhereClause {
  id: UUIDComparators
  producingRunId: IntComparators
  ownerUserId: IntComparators
  collectionId: IntComparators
  projectId: IntComparators
  metadataField: MetadataFieldWhereClause
  entityId: UUIDComparators
}

input MetadataFieldUpdateInput {
  collectionId: Int = null
  fieldName: String = null
  description: String = null
  fieldType: String = null
  isRequired: Boolean = null
  options: String = null
  defaultValue: String = null
}

input MetadataFieldWhereClause {
  id: UUIDComparators
  producingRunId: IntComparators
  ownerUserId: IntComparators
  collectionId: IntComparators
  fieldGroup: MetadataFieldProjectWhereClause
  fieldName: StrComparators
  description: StrComparators
  fieldType: StrComparators
  isRequired: BoolComparators
  options: StrComparators
  defaultValue: StrComparators
  metadatas: MetadatumWhereClause
  entityId: UUIDComparators
}

type Metadatum implements EntityInterface & Node {
  """The Globally Unique ID of this object"""
  _id: GlobalID!
  id: ID!
  producingRunId: Int
  ownerUserId: Int!
  collectionId: Int!
  sample(where: SampleWhereClause = null): Sample
  metadataField(where: MetadataFieldWhereClause = null): MetadataField
  value: String!
  entityId: ID!
}

"""A connection to a list of items."""
type MetadatumConnection {
  """Pagination data for this connection"""
  pageInfo: PageInfo!

  """Contains the nodes in this connection"""
  edges: [MetadatumEdge!]!
}

input MetadatumCreateInput {
  collectionId: Int!
  sampleId: ID!
  metadataFieldId: ID!
  value: String!
}

"""An edge in a connection."""
type MetadatumEdge {
  """A cursor for use in pagination"""
  cursor: String!

  """The item at the end of the edge"""
  node: Metadatum!
}

input MetadatumUpdateInput {
  collectionId: Int = null
  sampleId: ID = null
  metadataFieldId: ID = null
  value: String = null
}

input MetadatumWhereClause {
  id: UUIDComparators
  producingRunId: IntComparators
  ownerUserId: IntComparators
  collectionId: IntComparators
  sample: SampleWhereClause
  metadataField: MetadataFieldWhereClause
  value: StrComparators
  entityId: UUIDComparators
}

type MetricConsensusGenome implements EntityInterface & Node {
  """The Globally Unique ID of this object"""
  _id: GlobalID!
  id: ID!
  producingRunId: Int
  ownerUserId: Int!
  collectionId: Int!
  consensusGenome(where: ConsensusGenomeWhereClause = null): ConsensusGenome
  totalReads: Int
  mappedReads: Int
  refSnps: Int
  nActg: Int
  nMissing: Int
  nAmbiguous: Int
  coverageVizSummaryFileId: ID
  coverageVizSummaryFile(where: FileWhereClause = null): File
  entityId: ID!
}

"""A connection to a list of items."""
type MetricConsensusGenomeConnection {
  """Pagination data for this connection"""
  pageInfo: PageInfo!

  """Contains the nodes in this connection"""
  edges: [MetricConsensusGenomeEdge!]!
}

input MetricConsensusGenomeCreateInput {
  collectionId: Int!
  consensusGenomeId: ID!
  totalReads: Int = null
  mappedReads: Int = null
  refSnps: Int = null
  nActg: Int = null
  nMissing: Int = null
  nAmbiguous: Int = null
  coverageVizSummaryFileId: ID!
}

"""An edge in a connection."""
type MetricConsensusGenomeEdge {
  """A cursor for use in pagination"""
  cursor: String!

  """The item at the end of the edge"""
  node: MetricConsensusGenome!
}

input MetricConsensusGenomeUpdateInput {
  collectionId: Int = null
  consensusGenomeId: ID = null
  totalReads: Int = null
  mappedReads: Int = null
  refSnps: Int = null
  nActg: Int = null
  nMissing: Int = null
  nAmbiguous: Int = null
  coverageVizSummaryFileId: ID = null
}

input MetricConsensusGenomeWhereClause {
  id: UUIDComparators
  producingRunId: IntComparators
  ownerUserId: IntComparators
  collectionId: IntComparators
  consensusGenome: ConsensusGenomeWhereClause
  totalReads: IntComparators
  mappedReads: IntComparators
  refSnps: IntComparators
  nActg: IntComparators
  nMissing: IntComparators
  nAmbiguous: IntComparators
  entityId: UUIDComparators
}

type MultipartUploadCredentials {
  protocol: String!
  namespace: String!
  path: String!
  accessKeyId: String!
  secretAccessKey: String!
  sessionToken: String!
  expiration: String!
}

type MultipartUploadResponse {
  credentials: MultipartUploadCredentials!
  file: File!
}

type Mutation {
  createFile(entityId: ID!, entityFieldName: String!, file: FileCreate!): File!
  uploadFile(entityId: ID!, entityFieldName: String!, file: FileUpload!, expiration: Int! = 3600): MultipartUploadResponse!
  markUploadComplete(fileId: ID!): File!
  createSample(input: SampleCreateInput!): Sample!
  updateSample(input: SampleUpdateInput!, where: SampleWhereClause!): [Sample!]!
  deleteSample(where: SampleWhereClause!): [Sample!]!
  createSequencingRead(input: SequencingReadCreateInput!): SequencingRead!
  updateSequencingRead(input: SequencingReadUpdateInput!, where: SequencingReadWhereClause!): [SequencingRead!]!
  deleteSequencingRead(where: SequencingReadWhereClause!): [SequencingRead!]!
  createGenomicRange(input: GenomicRangeCreateInput!): GenomicRange!
  updateGenomicRange(input: GenomicRangeUpdateInput!, where: GenomicRangeWhereClause!): [GenomicRange!]!
  deleteGenomicRange(where: GenomicRangeWhereClause!): [GenomicRange!]!
  createReferenceGenome(input: ReferenceGenomeCreateInput!): ReferenceGenome!
  updateReferenceGenome(input: ReferenceGenomeUpdateInput!, where: ReferenceGenomeWhereClause!): [ReferenceGenome!]!
  deleteReferenceGenome(where: ReferenceGenomeWhereClause!): [ReferenceGenome!]!
  createSequenceAlignmentIndex(input: SequenceAlignmentIndexCreateInput!): SequenceAlignmentIndex!
  updateSequenceAlignmentIndex(input: SequenceAlignmentIndexUpdateInput!, where: SequenceAlignmentIndexWhereClause!): [SequenceAlignmentIndex!]!
  deleteSequenceAlignmentIndex(where: SequenceAlignmentIndexWhereClause!): [SequenceAlignmentIndex!]!
  createMetadatum(input: MetadatumCreateInput!): Metadatum!
  updateMetadatum(input: MetadatumUpdateInput!, where: MetadatumWhereClause!): [Metadatum!]!
  deleteMetadatum(where: MetadatumWhereClause!): [Metadatum!]!
  createMetadataField(input: MetadataFieldCreateInput!): MetadataField!
  updateMetadataField(input: MetadataFieldUpdateInput!, where: MetadataFieldWhereClause!): [MetadataField!]!
  deleteMetadataField(where: MetadataFieldWhereClause!): [MetadataField!]!
  createMetadataFieldProject(input: MetadataFieldProjectCreateInput!): MetadataFieldProject!
  updateMetadataFieldProject(input: MetadataFieldProjectUpdateInput!, where: MetadataFieldProjectWhereClause!): [MetadataFieldProject!]!
  deleteMetadataFieldProject(where: MetadataFieldProjectWhereClause!): [MetadataFieldProject!]!
  createConsensusGenome(input: ConsensusGenomeCreateInput!): ConsensusGenome!
  updateConsensusGenome(input: ConsensusGenomeUpdateInput!, where: ConsensusGenomeWhereClause!): [ConsensusGenome!]!
  deleteConsensusGenome(where: ConsensusGenomeWhereClause!): [ConsensusGenome!]!
  createMetricConsensusGenome(input: MetricConsensusGenomeCreateInput!): MetricConsensusGenome!
  updateMetricConsensusGenome(input: MetricConsensusGenomeUpdateInput!, where: MetricConsensusGenomeWhereClause!): [MetricConsensusGenome!]!
  deleteMetricConsensusGenome(where: MetricConsensusGenomeWhereClause!): [MetricConsensusGenome!]!
  createCoverageViz(input: CoverageVizCreateInput!): CoverageViz!
  updateCoverageViz(input: CoverageVizUpdateInput!, where: CoverageVizWhereClause!): [CoverageViz!]!
  deleteCoverageViz(where: CoverageVizWhereClause!): [CoverageViz!]!
  createTaxon(input: TaxonCreateInput!): Taxon!
  updateTaxon(input: TaxonUpdateInput!, where: TaxonWhereClause!): [Taxon!]!
  deleteTaxon(where: TaxonWhereClause!): [Taxon!]!
  createUpstreamDatabase(input: UpstreamDatabaseCreateInput!): UpstreamDatabase!
  updateUpstreamDatabase(input: UpstreamDatabaseUpdateInput!, where: UpstreamDatabaseWhereClause!): [UpstreamDatabase!]!
  deleteUpstreamDatabase(where: UpstreamDatabaseWhereClause!): [UpstreamDatabase!]!
  createContig(input: ContigCreateInput!): Contig!
  updateContig(input: ContigUpdateInput!, where: ContigWhereClause!): [Contig!]!
  deleteContig(where: ContigWhereClause!): [Contig!]!
}

"""An object with a Globally Unique ID"""
interface Node {
  """The Globally Unique ID of this object"""
  _id: GlobalID!
}

enum NucleicAcid {
  RNA
  DNA
}

input NucleicAcidEnumComparators {
  _eq: NucleicAcid
  _neq: NucleicAcid
  _in: [NucleicAcid!]
  _nin: [NucleicAcid!]
  _gt: NucleicAcid
  _gte: NucleicAcid
  _lt: NucleicAcid
  _lte: NucleicAcid
  _is_null: NucleicAcid
}

"""Information to aid in pagination."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

type Query {
  node(
    """The ID of the object."""
    id: GlobalID!
  ): Node!
  files(where: FileWhereClause = null): [File!]!
  samples(where: SampleWhereClause = null): [Sample!]!
  sequencingReads(where: SequencingReadWhereClause = null): [SequencingRead!]!
  genomicRanges(where: GenomicRangeWhereClause = null): [GenomicRange!]!
  referenceGenomes(where: ReferenceGenomeWhereClause = null): [ReferenceGenome!]!
  sequenceAlignmentIndices(where: SequenceAlignmentIndexWhereClause = null): [SequenceAlignmentIndex!]!
  metadatas(where: MetadatumWhereClause = null): [Metadatum!]!
  metadataFields(where: MetadataFieldWhereClause = null): [MetadataField!]!
  metadataFieldProjects(where: MetadataFieldProjectWhereClause = null): [MetadataFieldProject!]!
  consensusGenomes(where: ConsensusGenomeWhereClause = null): [ConsensusGenome!]!
  metricsConsensusGenomes(where: MetricConsensusGenomeWhereClause = null): [MetricConsensusGenome!]!
  coverageVizes(where: CoverageVizWhereClause = null): [CoverageViz!]!
  taxa(where: TaxonWhereClause = null): [Taxon!]!
  upstreamDatabases(where: UpstreamDatabaseWhereClause = null): [UpstreamDatabase!]!
  contigs(where: ContigWhereClause = null): [Contig!]!
}

type ReferenceGenome implements EntityInterface & Node {
  """The Globally Unique ID of this object"""
  _id: GlobalID!
  id: ID!
  producingRunId: Int
  ownerUserId: Int!
  collectionId: Int!
  fileId: ID
  file(where: FileWhereClause = null): File
  fileIndexId: ID
  fileIndex(where: FileWhereClause = null): File
  name: String!
  description: String!
  taxon(where: TaxonWhereClause = null): Taxon
  accessionId: String
  sequenceAlignmentIndices(
    where: SequenceAlignmentIndexWhereClause = null

    """Returns the items in the list that come before the specified cursor."""
    before: String = null

    """Returns the items in the list that come after the specified cursor."""
    after: String = null

    """Returns the first n items from the list."""
    first: Int = null

    """Returns the items in the list that come after the specified cursor."""
    last: Int = null
  ): SequenceAlignmentIndexConnection!
  consensusGenomes(
    where: ConsensusGenomeWhereClause = null

    """Returns the items in the list that come before the specified cursor."""
    before: String = null

    """Returns the items in the list that come after the specified cursor."""
    after: String = null

    """Returns the first n items from the list."""
    first: Int = null

    """Returns the items in the list that come after the specified cursor."""
    last: Int = null
  ): ConsensusGenomeConnection!
  genomicRanges(
    where: GenomicRangeWhereClause = null

    """Returns the items in the list that come before the specified cursor."""
    before: String = null

    """Returns the items in the list that come after the specified cursor."""
    after: String = null

    """Returns the first n items from the list."""
    first: Int = null

    """Returns the items in the list that come after the specified cursor."""
    last: Int = null
  ): GenomicRangeConnection!
  entityId: ID!
}

"""A connection to a list of items."""
type ReferenceGenomeConnection {
  """Pagination data for this connection"""
  pageInfo: PageInfo!

  """Contains the nodes in this connection"""
  edges: [ReferenceGenomeEdge!]!
}

input ReferenceGenomeCreateInput {
  collectionId: Int!
  fileId: ID!
  fileIndexId: ID = null
  name: String!
  description: String!
  taxonId: ID!
  accessionId: String = null
}

"""An edge in a connection."""
type ReferenceGenomeEdge {
  """A cursor for use in pagination"""
  cursor: String!

  """The item at the end of the edge"""
  node: ReferenceGenome!
}

input ReferenceGenomeUpdateInput {
  collectionId: Int = null
  fileId: ID = null
  fileIndexId: ID = null
  name: String = null
  description: String = null
  taxonId: ID = null
  accessionId: String = null
}

input ReferenceGenomeWhereClause {
  id: UUIDComparators
  producingRunId: IntComparators
  ownerUserId: IntComparators
  collectionId: IntComparators
  name: StrComparators
  description: StrComparators
  taxon: TaxonWhereClause
  accessionId: StrComparators
  sequenceAlignmentIndices: SequenceAlignmentIndexWhereClause
  consensusGenomes: ConsensusGenomeWhereClause
  genomicRanges: GenomicRangeWhereClause
  entityId: UUIDComparators
}

type Sample implements EntityInterface & Node {
  """The Globally Unique ID of this object"""
  _id: GlobalID!
  id: ID!
  producingRunId: Int
  ownerUserId: Int!
  collectionId: Int!
  name: String!
  sampleType: String!
  waterControl: Boolean!
  collectionDate: DateTime
  collectionLocation: String!
  description: String
  hostTaxon(where: TaxonWhereClause = null): Taxon
  sequencingReads(
    where: SequencingReadWhereClause = null

    """Returns the items in the list that come before the specified cursor."""
    before: String = null

    """Returns the items in the list that come after the specified cursor."""
    after: String = null

    """Returns the first n items from the list."""
    first: Int = null

    """Returns the items in the list that come after the specified cursor."""
    last: Int = null
  ): SequencingReadConnection!
  metadatas(
    where: MetadatumWhereClause = null

    """Returns the items in the list that come before the specified cursor."""
    before: String = null

    """Returns the items in the list that come after the specified cursor."""
    after: String = null

    """Returns the first n items from the list."""
    first: Int = null

    """Returns the items in the list that come after the specified cursor."""
    last: Int = null
  ): MetadatumConnection!
  entityId: ID!
}

"""A connection to a list of items."""
type SampleConnection {
  """Pagination data for this connection"""
  pageInfo: PageInfo!

  """Contains the nodes in this connection"""
  edges: [SampleEdge!]!
}

input SampleCreateInput {
  collectionId: Int!
  name: String!
  sampleType: String!
  waterControl: Boolean!
  collectionDate: DateTime = null
  collectionLocation: String!
  description: String = null
  hostTaxonId: ID = null
}

"""An edge in a connection."""
type SampleEdge {
  """A cursor for use in pagination"""
  cursor: String!

  """The item at the end of the edge"""
  node: Sample!
}

input SampleUpdateInput {
  collectionId: Int = null
  name: String = null
  sampleType: String = null
  waterControl: Boolean = null
  collectionDate: DateTime = null
  collectionLocation: String = null
  description: String = null
  hostTaxonId: ID = null
}

input SampleWhereClause {
  id: UUIDComparators
  producingRunId: IntComparators
  ownerUserId: IntComparators
  collectionId: IntComparators
  name: StrComparators
  sampleType: StrComparators
  waterControl: BoolComparators
  collectionDate: StrComparators
  collectionLocation: StrComparators
  description: StrComparators
  hostTaxon: TaxonWhereClause
  sequencingReads: SequencingReadWhereClause
  metadatas: MetadatumWhereClause
  entityId: UUIDComparators
}

type SequenceAlignmentIndex implements EntityInterface & Node {
  """The Globally Unique ID of this object"""
  _id: GlobalID!
  id: ID!
  producingRunId: Int
  ownerUserId: Int!
  collectionId: Int!
  indexFileId: ID
  indexFile(where: FileWhereClause = null): File
  referenceGenome(where: ReferenceGenomeWhereClause = null): ReferenceGenome
  tool: AlignmentTool!
  entityId: ID!
}

"""A connection to a list of items."""
type SequenceAlignmentIndexConnection {
  """Pagination data for this connection"""
  pageInfo: PageInfo!

  """Contains the nodes in this connection"""
  edges: [SequenceAlignmentIndexEdge!]!
}

input SequenceAlignmentIndexCreateInput {
  collectionId: Int!
  indexFileId: ID!
  referenceGenomeId: ID!
  tool: AlignmentTool!
}

"""An edge in a connection."""
type SequenceAlignmentIndexEdge {
  """A cursor for use in pagination"""
  cursor: String!

  """The item at the end of the edge"""
  node: SequenceAlignmentIndex!
}

input SequenceAlignmentIndexUpdateInput {
  collectionId: Int = null
  indexFileId: ID = null
  referenceGenomeId: ID = null
  tool: AlignmentTool = null
}

input SequenceAlignmentIndexWhereClause {
  id: UUIDComparators
  producingRunId: IntComparators
  ownerUserId: IntComparators
  collectionId: IntComparators
  referenceGenome: ReferenceGenomeWhereClause
  tool: AlignmentToolEnumComparators
  entityId: UUIDComparators
}

enum SequencingProtocol {
  MNGS
  TARGETED
  MSSPE
}

input SequencingProtocolEnumComparators {
  _eq: SequencingProtocol
  _neq: SequencingProtocol
  _in: [SequencingProtocol!]
  _nin: [SequencingProtocol!]
  _gt: SequencingProtocol
  _gte: SequencingProtocol
  _lt: SequencingProtocol
  _lte: SequencingProtocol
  _is_null: SequencingProtocol
}

type SequencingRead implements EntityInterface & Node {
  """The Globally Unique ID of this object"""
  _id: GlobalID!
  id: ID!
  producingRunId: Int
  ownerUserId: Int!
  collectionId: Int!
  sample(where: SampleWhereClause = null): Sample
  protocol: SequencingProtocol!
  r1FileId: ID
  r1File(where: FileWhereClause = null): File
  r2FileId: ID
  r2File(where: FileWhereClause = null): File
  technology: SequencingTechnology!
  nucleicAcid: NucleicAcid!
  hasErcc: Boolean!
  taxon(where: TaxonWhereClause = null): Taxon
  primerFileId: ID
  primerFile(where: FileWhereClause = null): File
  consensusGenomes(
    where: ConsensusGenomeWhereClause = null

    """Returns the items in the list that come before the specified cursor."""
    before: String = null

    """Returns the items in the list that come after the specified cursor."""
    after: String = null

    """Returns the first n items from the list."""
    first: Int = null

    """Returns the items in the list that come after the specified cursor."""
    last: Int = null
  ): ConsensusGenomeConnection!
  contigs(
    where: ContigWhereClause = null

    """Returns the items in the list that come before the specified cursor."""
    before: String = null

    """Returns the items in the list that come after the specified cursor."""
    after: String = null

    """Returns the first n items from the list."""
    first: Int = null

    """Returns the items in the list that come after the specified cursor."""
    last: Int = null
  ): ContigConnection!
  entityId: ID!
}

"""A connection to a list of items."""
type SequencingReadConnection {
  """Pagination data for this connection"""
  pageInfo: PageInfo!

  """Contains the nodes in this connection"""
  edges: [SequencingReadEdge!]!
}

input SequencingReadCreateInput {
  collectionId: Int!
  sampleId: ID = null
  protocol: SequencingProtocol!
  r1FileId: ID = null
  r2FileId: ID = null
  technology: SequencingTechnology!
  nucleicAcid: NucleicAcid!
  hasErcc: Boolean!
  taxonId: ID = null
  primerFileId: ID = null
}

"""An edge in a connection."""
type SequencingReadEdge {
  """A cursor for use in pagination"""
  cursor: String!

  """The item at the end of the edge"""
  node: SequencingRead!
}

input SequencingReadUpdateInput {
  collectionId: Int = null
  sampleId: ID = null
  protocol: SequencingProtocol = null
  r1FileId: ID = null
  r2FileId: ID = null
  technology: SequencingTechnology = null
  nucleicAcid: NucleicAcid = null
  hasErcc: Boolean = null
  taxonId: ID = null
  primerFileId: ID = null
}

input SequencingReadWhereClause {
  id: UUIDComparators
  producingRunId: IntComparators
  ownerUserId: IntComparators
  collectionId: IntComparators
  sample: SampleWhereClause
  protocol: SequencingProtocolEnumComparators
  technology: SequencingTechnologyEnumComparators
  nucleicAcid: NucleicAcidEnumComparators
  hasErcc: BoolComparators
  taxon: TaxonWhereClause
  consensusGenomes: ConsensusGenomeWhereClause
  contigs: ContigWhereClause
  entityId: UUIDComparators
}

enum SequencingTechnology {
  Illumina
  Nanopore
}

input SequencingTechnologyEnumComparators {
  _eq: SequencingTechnology
  _neq: SequencingTechnology
  _in: [SequencingTechnology!]
  _nin: [SequencingTechnology!]
  _gt: SequencingTechnology
  _gte: SequencingTechnology
  _lt: SequencingTechnology
  _lte: SequencingTechnology
  _is_null: SequencingTechnology
}

type SignedURL {
  url: String!
  protocol: String!
  method: String!
  expiration: Int!
  fields: JSON
}

input StrComparators {
  _eq: String
  _neq: String
  _in: [String!]
  _nin: [String!]
  _is_null: Int
  _gt: String
  _gte: String
  _lt: String
  _lte: String
  _like: String
  _nlike: String
  _ilike: String
  _nilike: String
  _regex: String
  _nregex: String
  _iregex: String
  _niregex: String
}

type Taxon implements EntityInterface & Node {
  """The Globally Unique ID of this object"""
  _id: GlobalID!
  id: ID!
  producingRunId: Int
  ownerUserId: Int!
  collectionId: Int!
  wikipediaId: String
  description: String
  commonName: String
  name: String!
  isPhage: Boolean!
  upstreamDatabase(where: UpstreamDatabaseWhereClause = null): UpstreamDatabase
  upstreamDatabaseIdentifier: String!
  level: TaxonLevel!
  taxId: Int!
  taxIdParent: Int!
  taxIdSpecies: Int!
  taxIdGenus: Int!
  taxIdFamily: Int!
  taxIdOrder: Int!
  taxIdClass: Int!
  taxIdPhylum: Int!
  taxIdKingdom: Int!
  consensusGenomes(
    where: ConsensusGenomeWhereClause = null

    """Returns the items in the list that come before the specified cursor."""
    before: String = null

    """Returns the items in the list that come after the specified cursor."""
    after: String = null

    """Returns the first n items from the list."""
    first: Int = null

    """Returns the items in the list that come after the specified cursor."""
    last: Int = null
  ): ConsensusGenomeConnection!
  referenceGenomes(
    where: ReferenceGenomeWhereClause = null

    """Returns the items in the list that come before the specified cursor."""
    before: String = null

    """Returns the items in the list that come after the specified cursor."""
    after: String = null

    """Returns the first n items from the list."""
    first: Int = null

    """Returns the items in the list that come after the specified cursor."""
    last: Int = null
  ): ReferenceGenomeConnection!
  sequencingReads(
    where: SequencingReadWhereClause = null

    """Returns the items in the list that come before the specified cursor."""
    before: String = null

    """Returns the items in the list that come after the specified cursor."""
    after: String = null

    """Returns the first n items from the list."""
    first: Int = null

    """Returns the items in the list that come after the specified cursor."""
    last: Int = null
  ): SequencingReadConnection!
  samples(
    where: SampleWhereClause = null

    """Returns the items in the list that come before the specified cursor."""
    before: String = null

    """Returns the items in the list that come after the specified cursor."""
    after: String = null

    """Returns the first n items from the list."""
    first: Int = null

    """Returns the items in the list that come after the specified cursor."""
    last: Int = null
  ): SampleConnection!
  entityId: ID!
}

"""A connection to a list of items."""
type TaxonConnection {
  """Pagination data for this connection"""
  pageInfo: PageInfo!

  """Contains the nodes in this connection"""
  edges: [TaxonEdge!]!
}

input TaxonCreateInput {
  collectionId: Int!
  wikipediaId: String = null
  description: String = null
  commonName: String = null
  name: String!
  isPhage: Boolean!
  upstreamDatabaseId: ID!
  upstreamDatabaseIdentifier: String!
  level: TaxonLevel!
  taxId: Int!
  taxIdParent: Int!
  taxIdSpecies: Int!
  taxIdGenus: Int!
  taxIdFamily: Int!
  taxIdOrder: Int!
  taxIdClass: Int!
  taxIdPhylum: Int!
  taxIdKingdom: Int!
}

"""An edge in a connection."""
type TaxonEdge {
  """A cursor for use in pagination"""
  cursor: String!

  """The item at the end of the edge"""
  node: Taxon!
}

enum TaxonLevel {
  species
  genus
  family
}

input TaxonLevelEnumComparators {
  _eq: TaxonLevel
  _neq: TaxonLevel
  _in: [TaxonLevel!]
  _nin: [TaxonLevel!]
  _gt: TaxonLevel
  _gte: TaxonLevel
  _lt: TaxonLevel
  _lte: TaxonLevel
  _is_null: TaxonLevel
}

input TaxonUpdateInput {
  collectionId: Int = null
  wikipediaId: String = null
  description: String = null
  commonName: String = null
  name: String = null
  isPhage: Boolean = null
  upstreamDatabaseId: ID = null
  upstreamDatabaseIdentifier: String = null
  level: TaxonLevel = null
  taxId: Int = null
  taxIdParent: Int = null
  taxIdSpecies: Int = null
  taxIdGenus: Int = null
  taxIdFamily: Int = null
  taxIdOrder: Int = null
  taxIdClass: Int = null
  taxIdPhylum: Int = null
  taxIdKingdom: Int = null
}

input TaxonWhereClause {
  id: UUIDComparators
  producingRunId: IntComparators
  ownerUserId: IntComparators
  collectionId: IntComparators
  wikipediaId: StrComparators
  description: StrComparators
  commonName: StrComparators
  name: StrComparators
  isPhage: BoolComparators
  upstreamDatabase: UpstreamDatabaseWhereClause
  upstreamDatabaseIdentifier: StrComparators
  level: TaxonLevelEnumComparators
  taxId: IntComparators
  taxIdParent: IntComparators
  taxIdSpecies: IntComparators
  taxIdGenus: IntComparators
  taxIdFamily: IntComparators
  taxIdOrder: IntComparators
  taxIdClass: IntComparators
  taxIdPhylum: IntComparators
  taxIdKingdom: IntComparators
  consensusGenomes: ConsensusGenomeWhereClause
  referenceGenomes: ReferenceGenomeWhereClause
  sequencingReads: SequencingReadWhereClause
  samples: SampleWhereClause
  entityId: UUIDComparators
}

scalar UUID

input UUIDComparators {
  _eq: UUID
  _neq: UUID
  _in: [UUID!]
  _nin: [UUID!]
  _gt: UUID
  _gte: UUID
  _lt: UUID
  _lte: UUID
}

type UpstreamDatabase implements EntityInterface & Node {
  """The Globally Unique ID of this object"""
  _id: GlobalID!
  id: ID!
  producingRunId: Int
  ownerUserId: Int!
  collectionId: Int!
  name: String!
  taxa(
    where: TaxonWhereClause = null

    """Returns the items in the list that come before the specified cursor."""
    before: String = null

    """Returns the items in the list that come after the specified cursor."""
    after: String = null

    """Returns the first n items from the list."""
    first: Int = null

    """Returns the items in the list that come after the specified cursor."""
    last: Int = null
  ): TaxonConnection!
  entityId: ID!
}

input UpstreamDatabaseCreateInput {
  collectionId: Int!
  name: String!
}

input UpstreamDatabaseUpdateInput {
  collectionId: Int = null
  name: String = null
}

input UpstreamDatabaseWhereClause {
  id: UUIDComparators
  producingRunId: IntComparators
  ownerUserId: IntComparators
  collectionId: IntComparators
  name: StrComparators
  taxa: TaxonWhereClause
  entityId: UUIDComparators
}
