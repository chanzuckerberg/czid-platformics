type Contig implements EntityInterface {
  id: UUID!
  type: String!
  producingRunId: Int
  ownerUserId: Int!
  collectionId: Int!
  entityId: UUID!
  sequence: String!
  sequencingReadId: UUID!
  sequencingRead: SequencingRead!
}

type ContigConnection {
  edges: [ContigEdge!]!
}

type ContigEdge {
  node: Contig!
}

interface EntityInterface {
  id: UUID!
  type: String!
  producingRunId: Int
  ownerUserId: Int!
  collectionId: Int!
}

type File {
  id: UUID!
  entityId: UUID
  entityFieldName: String!
  status: FileStatus!
  protocol: String!
  namespace: String!
  path: String!
  fileFormat: String!
  compressionType: String
  size: Int
  entity: EntityInterface
  downloadLink(expiration: Int! = 3600): SignedURL
}

input FileInput {
  name: String!
  format: String!
  protocol: String!
  namespace: String!
  path: String!
  compressionType: String = null
}

enum FileStatus {
  SUCCESS
  FAILED
  PENDING
}

input FileUploadInput {
  name: String!
  format: String!
  compressionType: String = null
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

type Mutation {
  createSample(name: String!, location: String!, collectionId: Int!): Sample!
  createSequencingRead(nucleotide: String!, sequence: String!, protocol: String!, sequenceFileId: UUID, sampleId: UUID!, collectionId: Int!): SequencingRead!
  createContig(sequence: String!, sequencingReadId: UUID!, collectionId: Int!): Contig!
  updateSample(entityId: UUID!, name: String!, location: String!): Sample!
  createFile(entityId: UUID!, entityFieldName: String!, file: FileInput!): SignedURL!
  createFileUpload(entityId: UUID!, entityFieldName: String!, file: FileUploadInput!, expiration: Int! = 3600): SignedURL!
  markUploadComplete(fileId: UUID!): File!
}

type Query {
  samples(id: UUID = null): [Sample!]!
  sequencingReads(id: UUID = null): [SequencingRead!]!
  contigs(id: UUID = null): [Contig!]!
  files(id: UUID = null): [File!]!
}

type Sample implements EntityInterface {
  id: UUID!
  type: String!
  producingRunId: Int
  ownerUserId: Int!
  collectionId: Int!
  entityId: UUID!
  name: String!
  location: String!
  sequencingReads: SequencingReadConnection!
}

type SequencingRead implements EntityInterface {
  id: UUID!
  type: String!
  producingRunId: Int
  ownerUserId: Int!
  collectionId: Int!
  entityId: UUID!
  nucleotide: String!
  sequence: String!
  protocol: String!
  sequenceFileId: UUID
  sampleId: UUID!
  sequenceFile: File
  sample: Sample!
  contigs: ContigConnection!
}

type SequencingReadConnection {
  edges: [SequencingReadEdge!]!
}

type SequencingReadEdge {
  node: SequencingRead!
}

type SignedURL {
  url: String!
  protocol: String!
  method: String!
  expiration: Int!
  fields: JSON
}

scalar UUID
