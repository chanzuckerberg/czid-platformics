input BoolComparators {
  _eq: Int
  _neq: Int
  _in: [Int!]
  _nin: [Int!]
  _gt: Int
  _gte: Int
  _lt: Int
  _lte: Int
  _is_null: Int
}

type BulkDownload implements EntityInterface & Node {
  """The Globally Unique ID of this object"""
  _id: GlobalID!
  id: ID!
  producingRunId: Int
  ownerUserId: Int!
  collectionId: Int!
  downloadType: BulkDownloadType!
  fileId: ID
  file(where: FileWhereClause = null): File
}

type BulkDownloadAggregate {
  aggregate: BulkDownloadAggregateFunctions
}

type BulkDownloadAggregateFunctions {
  sum: BulkDownloadNumericalColumns
  avg: BulkDownloadNumericalColumns
  min: BulkDownloadMinMaxColumns
  max: BulkDownloadMinMaxColumns
  stddev: BulkDownloadNumericalColumns
  variance: BulkDownloadNumericalColumns
  count(distinct: Boolean = false, columns: BulkDownloadCountColumns = null): Int
}

enum BulkDownloadCountColumns {
  download_type
  file
  entity_id
  id
  producing_run_id
  owner_user_id
  collection_id
  created_at
  updated_at
  deleted_at
}

input BulkDownloadCreateInput {
  collectionId: Int!
  downloadType: BulkDownloadType!
  fileId: ID = null
}

type BulkDownloadMinMaxColumns {
  producingRunId: Int
  ownerUserId: Int
  collectionId: Int
}

type BulkDownloadNumericalColumns {
  producingRunId: Int
  ownerUserId: Int
  collectionId: Int
}

enum BulkDownloadType {
  concatenate
  zip
}

input BulkDownloadTypeEnumComparators {
  _eq: BulkDownloadType
  _neq: BulkDownloadType
  _in: [BulkDownloadType!]
  _nin: [BulkDownloadType!]
  _gt: BulkDownloadType
  _gte: BulkDownloadType
  _lt: BulkDownloadType
  _lte: BulkDownloadType
  _is_null: BulkDownloadType
}

input BulkDownloadUpdateInput {
  collectionId: Int = null
  downloadType: BulkDownloadType = null
  fileId: ID = null
}

input BulkDownloadWhereClause {
  id: UUIDComparators
  producingRunId: IntComparators
  ownerUserId: IntComparators
  collectionId: IntComparators
  downloadType: BulkDownloadTypeEnumComparators
}

input BulkDownloadWhereClauseMutations {
  id: UUIDComparators
}

type ConsensusGenome implements EntityInterface & Node {
  """The Globally Unique ID of this object"""
  _id: GlobalID!
  id: ID!
  producingRunId: Int
  ownerUserId: Int!
  collectionId: Int!
  taxon(where: TaxonWhereClause = null): Taxon
  sequenceRead(where: SequencingReadWhereClause = null): SequencingRead
  referenceGenome(where: ReferenceGenomeWhereClause = null): ReferenceGenome
  sequenceId: ID
  sequence(where: FileWhereClause = null): File
  metrics(
    where: MetricConsensusGenomeWhereClause = null

    """Returns the items in the list that come before the specified cursor."""
    before: String = null

    """Returns the items in the list that come after the specified cursor."""
    after: String = null

    """Returns the first n items from the list."""
    first: Int = null

    """Returns the items in the list that come after the specified cursor."""
    last: Int = null
  ): MetricConsensusGenomeConnection!
  metricsAggregate(where: MetricConsensusGenomeWhereClause = null): MetricConsensusGenomeAggregate
  intermediateOutputsId: ID
  intermediateOutputs(where: FileWhereClause = null): File
}

type ConsensusGenomeAggregate {
  aggregate: ConsensusGenomeAggregateFunctions
}

type ConsensusGenomeAggregateFunctions {
  sum: ConsensusGenomeNumericalColumns
  avg: ConsensusGenomeNumericalColumns
  min: ConsensusGenomeMinMaxColumns
  max: ConsensusGenomeMinMaxColumns
  stddev: ConsensusGenomeNumericalColumns
  variance: ConsensusGenomeNumericalColumns
  count(distinct: Boolean = false, columns: ConsensusGenomeCountColumns = null): Int
}

"""A connection to a list of items."""
type ConsensusGenomeConnection {
  """Pagination data for this connection"""
  pageInfo: PageInfo!

  """Contains the nodes in this connection"""
  edges: [ConsensusGenomeEdge!]!
}

enum ConsensusGenomeCountColumns {
  taxon
  sequence_read
  reference_genome
  sequence
  metrics
  intermediate_outputs
  entity_id
  id
  producing_run_id
  owner_user_id
  collection_id
  created_at
  updated_at
  deleted_at
}

input ConsensusGenomeCreateInput {
  collectionId: Int!
  taxonId: ID!
  sequenceReadId: ID!
  referenceGenomeId: ID!
  sequenceId: ID = null
  intermediateOutputsId: ID = null
}

"""An edge in a connection."""
type ConsensusGenomeEdge {
  """A cursor for use in pagination"""
  cursor: String!

  """The item at the end of the edge"""
  node: ConsensusGenome!
}

type ConsensusGenomeMinMaxColumns {
  producingRunId: Int
  ownerUserId: Int
  collectionId: Int
}

type ConsensusGenomeNumericalColumns {
  producingRunId: Int
  ownerUserId: Int
  collectionId: Int
}

input ConsensusGenomeUpdateInput {
  collectionId: Int = null
  taxonId: ID = null
  sequenceReadId: ID = null
  referenceGenomeId: ID = null
  sequenceId: ID = null
  intermediateOutputsId: ID = null
}

input ConsensusGenomeWhereClause {
  id: UUIDComparators
  producingRunId: IntComparators
  ownerUserId: IntComparators
  collectionId: IntComparators
  taxon: TaxonWhereClause
  sequenceRead: SequencingReadWhereClause
  referenceGenome: ReferenceGenomeWhereClause
  metrics: MetricConsensusGenomeWhereClause
}

input ConsensusGenomeWhereClauseMutations {
  id: UUIDComparators
}

type Contig implements EntityInterface & Node {
  """The Globally Unique ID of this object"""
  _id: GlobalID!
  id: ID!
  producingRunId: Int
  ownerUserId: Int!
  collectionId: Int!
  sequencingRead(where: SequencingReadWhereClause = null): SequencingRead
  sequence: String!
}

type ContigAggregate {
  aggregate: ContigAggregateFunctions
}

type ContigAggregateFunctions {
  sum: ContigNumericalColumns
  avg: ContigNumericalColumns
  min: ContigMinMaxColumns
  max: ContigMinMaxColumns
  stddev: ContigNumericalColumns
  variance: ContigNumericalColumns
  count(distinct: Boolean = false, columns: ContigCountColumns = null): Int
}

"""A connection to a list of items."""
type ContigConnection {
  """Pagination data for this connection"""
  pageInfo: PageInfo!

  """Contains the nodes in this connection"""
  edges: [ContigEdge!]!
}

enum ContigCountColumns {
  sequencing_read
  sequence
  entity_id
  id
  producing_run_id
  owner_user_id
  collection_id
  created_at
  updated_at
  deleted_at
}

input ContigCreateInput {
  collectionId: Int!
  sequencingReadId: ID = null
  sequence: String!
}

"""An edge in a connection."""
type ContigEdge {
  """A cursor for use in pagination"""
  cursor: String!

  """The item at the end of the edge"""
  node: Contig!
}

type ContigMinMaxColumns {
  producingRunId: Int
  ownerUserId: Int
  collectionId: Int
  sequence: String
}

type ContigNumericalColumns {
  producingRunId: Int
  ownerUserId: Int
  collectionId: Int
}

input ContigUpdateInput {
  collectionId: Int = null
  sequencingReadId: ID = null
  sequence: String = null
}

input ContigWhereClause {
  id: UUIDComparators
  producingRunId: IntComparators
  ownerUserId: IntComparators
  collectionId: IntComparators
  sequencingRead: SequencingReadWhereClause
  sequence: StrComparators
}

input ContigWhereClauseMutations {
  id: UUIDComparators
}

"""Date with time (isoformat)"""
scalar DateTime

input DatetimeComparators {
  _eq: DateTime
  _neq: DateTime
  _in: [DateTime!]
  _nin: [DateTime!]
  _gt: DateTime
  _gte: DateTime
  _lt: DateTime
  _lte: DateTime
  _is_null: DateTime
}

type Entity {
  id: ID!
  type: String!
  producingRunId: ID!
  ownerUserId: Int!
  collectionId: Int!
}

interface EntityInterface implements Node {
  """The Globally Unique ID of this object"""
  _id: GlobalID!
}

input EntityWhereClause {
  id: UUIDComparators
  entityId: UUIDComparators
  producingRunId: IntComparators
  ownerUserId: IntComparators
  collectionId: IntComparators
}

type File {
  id: ID!
  entityId: ID!
  entityFieldName: String!
  entity(where: EntityWhereClause = null): Entity
  status: FileStatus!
  protocol: FileAccessProtocol!
  namespace: String!
  path: String!
  fileFormat: String!
  compressionType: Int
  size: Int
  downloadLink(expiration: Int! = 3600): SignedURL
  contents: String
}

enum FileAccessProtocol {
  s3
}

input FileCreate {
  name: String!
  fileFormat: String!
  compressionType: String = null
  protocol: FileAccessProtocol!
  namespace: String!
  path: String!
}

enum FileStatus {
  SUCCESS
  FAILED
  PENDING
}

input FileStatusEnumComparators {
  _eq: FileStatus
  _neq: FileStatus
  _in: [FileStatus!]
  _nin: [FileStatus!]
  _gt: FileStatus
  _gte: FileStatus
  _lt: FileStatus
  _lte: FileStatus
  _is_null: FileStatus
}

input FileUpload {
  name: String!
  fileFormat: String!
  compressionType: String = null
}

input FileWhereClause {
  id: UUIDComparators
  entityId: UUIDComparators
  entityFieldName: StrComparators
  status: FileStatusEnumComparators
  protocol: StrComparators
  namespace: StrComparators
  path: StrComparators
  fileFormat: StrComparators
  compressionType: StrComparators
  size: IntComparators
}

input FloatComparators {
  _eq: Float
  _neq: Float
  _in: [Float!]
  _nin: [Float!]
  _gt: Float
  _gte: Float
  _lt: Float
  _lte: Float
  _is_null: Float
}

type GenomicRange implements EntityInterface & Node {
  """The Globally Unique ID of this object"""
  _id: GlobalID!
  id: ID!
  producingRunId: Int
  ownerUserId: Int!
  collectionId: Int!
  referenceGenome(where: ReferenceGenomeWhereClause = null): ReferenceGenome
  fileId: ID
  file(where: FileWhereClause = null): File
  sequencingReads(
    where: SequencingReadWhereClause = null

    """Returns the items in the list that come before the specified cursor."""
    before: String = null

    """Returns the items in the list that come after the specified cursor."""
    after: String = null

    """Returns the first n items from the list."""
    first: Int = null

    """Returns the items in the list that come after the specified cursor."""
    last: Int = null
  ): SequencingReadConnection!
  sequencingReadsAggregate(where: SequencingReadWhereClause = null): SequencingReadAggregate
}

type GenomicRangeAggregate {
  aggregate: GenomicRangeAggregateFunctions
}

type GenomicRangeAggregateFunctions {
  sum: GenomicRangeNumericalColumns
  avg: GenomicRangeNumericalColumns
  min: GenomicRangeMinMaxColumns
  max: GenomicRangeMinMaxColumns
  stddev: GenomicRangeNumericalColumns
  variance: GenomicRangeNumericalColumns
  count(distinct: Boolean = false, columns: GenomicRangeCountColumns = null): Int
}

"""A connection to a list of items."""
type GenomicRangeConnection {
  """Pagination data for this connection"""
  pageInfo: PageInfo!

  """Contains the nodes in this connection"""
  edges: [GenomicRangeEdge!]!
}

enum GenomicRangeCountColumns {
  reference_genome
  file
  sequencing_reads
  entity_id
  id
  producing_run_id
  owner_user_id
  collection_id
  created_at
  updated_at
  deleted_at
}

input GenomicRangeCreateInput {
  collectionId: Int!
  referenceGenomeId: ID = null
  fileId: ID = null
}

"""An edge in a connection."""
type GenomicRangeEdge {
  """A cursor for use in pagination"""
  cursor: String!

  """The item at the end of the edge"""
  node: GenomicRange!
}

type GenomicRangeMinMaxColumns {
  producingRunId: Int
  ownerUserId: Int
  collectionId: Int
}

type GenomicRangeNumericalColumns {
  producingRunId: Int
  ownerUserId: Int
  collectionId: Int
}

input GenomicRangeUpdateInput {
  collectionId: Int = null
  referenceGenomeId: ID = null
  fileId: ID = null
}

input GenomicRangeWhereClause {
  id: UUIDComparators
  producingRunId: IntComparators
  ownerUserId: IntComparators
  collectionId: IntComparators
  referenceGenome: ReferenceGenomeWhereClause
  sequencingReads: SequencingReadWhereClause
}

input GenomicRangeWhereClauseMutations {
  id: UUIDComparators
}

"""
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
"""
scalar GlobalID @specifiedBy(url: "https://relay.dev/graphql/objectidentification.htm")

type HostOrganism implements EntityInterface & Node {
  """The Globally Unique ID of this object"""
  _id: GlobalID!
  id: ID!
  producingRunId: Int
  ownerUserId: Int!
  collectionId: Int!
  name: String!
  version: String!
  hostFilteringId: ID
  hostFiltering(where: FileWhereClause = null): File
  sequenceId: ID
  sequence(where: FileWhereClause = null): File
}

type HostOrganismAggregate {
  aggregate: HostOrganismAggregateFunctions
}

type HostOrganismAggregateFunctions {
  sum: HostOrganismNumericalColumns
  avg: HostOrganismNumericalColumns
  min: HostOrganismMinMaxColumns
  max: HostOrganismMinMaxColumns
  stddev: HostOrganismNumericalColumns
  variance: HostOrganismNumericalColumns
  count(distinct: Boolean = false, columns: HostOrganismCountColumns = null): Int
}

enum HostOrganismCountColumns {
  name
  version
  host_filtering
  sequence
  entity_id
  id
  producing_run_id
  owner_user_id
  collection_id
  created_at
  updated_at
  deleted_at
}

input HostOrganismCreateInput {
  collectionId: Int!
  name: String!
  version: String!
  hostFilteringId: ID = null
  sequenceId: ID = null
}

type HostOrganismMinMaxColumns {
  producingRunId: Int
  ownerUserId: Int
  collectionId: Int
  name: String
  version: String
}

type HostOrganismNumericalColumns {
  producingRunId: Int
  ownerUserId: Int
  collectionId: Int
}

input HostOrganismUpdateInput {
  collectionId: Int = null
  name: String = null
  version: String = null
  hostFilteringId: ID = null
  sequenceId: ID = null
}

input HostOrganismWhereClause {
  id: UUIDComparators
  producingRunId: IntComparators
  ownerUserId: IntComparators
  collectionId: IntComparators
  name: StrComparators
  version: StrComparators
}

input HostOrganismWhereClauseMutations {
  id: UUIDComparators
}

input IntComparators {
  _eq: Int
  _neq: Int
  _in: [Int!]
  _nin: [Int!]
  _gt: Int
  _gte: Int
  _lt: Int
  _lte: Int
  _is_null: Int
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

type Metadatum implements EntityInterface & Node {
  """The Globally Unique ID of this object"""
  _id: GlobalID!
  id: ID!
  producingRunId: Int
  ownerUserId: Int!
  collectionId: Int!
  sample(where: SampleWhereClause = null): Sample
  fieldName: String!
  value: String!
}

type MetadatumAggregate {
  aggregate: MetadatumAggregateFunctions
}

type MetadatumAggregateFunctions {
  sum: MetadatumNumericalColumns
  avg: MetadatumNumericalColumns
  min: MetadatumMinMaxColumns
  max: MetadatumMinMaxColumns
  stddev: MetadatumNumericalColumns
  variance: MetadatumNumericalColumns
  count(distinct: Boolean = false, columns: MetadatumCountColumns = null): Int
}

"""A connection to a list of items."""
type MetadatumConnection {
  """Pagination data for this connection"""
  pageInfo: PageInfo!

  """Contains the nodes in this connection"""
  edges: [MetadatumEdge!]!
}

enum MetadatumCountColumns {
  sample
  field_name
  value
  entity_id
  id
  producing_run_id
  owner_user_id
  collection_id
  created_at
  updated_at
  deleted_at
}

input MetadatumCreateInput {
  collectionId: Int!
  sampleId: ID!
  fieldName: String!
  value: String!
}

"""An edge in a connection."""
type MetadatumEdge {
  """A cursor for use in pagination"""
  cursor: String!

  """The item at the end of the edge"""
  node: Metadatum!
}

type MetadatumMinMaxColumns {
  producingRunId: Int
  ownerUserId: Int
  collectionId: Int
  fieldName: String
  value: String
}

type MetadatumNumericalColumns {
  producingRunId: Int
  ownerUserId: Int
  collectionId: Int
}

input MetadatumUpdateInput {
  collectionId: Int = null
  sampleId: ID = null
  fieldName: String = null
  value: String = null
}

input MetadatumWhereClause {
  id: UUIDComparators
  producingRunId: IntComparators
  ownerUserId: IntComparators
  collectionId: IntComparators
  sample: SampleWhereClause
  fieldName: StrComparators
  value: StrComparators
}

input MetadatumWhereClauseMutations {
  id: UUIDComparators
}

type MetricConsensusGenome implements EntityInterface & Node {
  """The Globally Unique ID of this object"""
  _id: GlobalID!
  id: ID!
  producingRunId: Int
  ownerUserId: Int!
  collectionId: Int!
  consensusGenome(where: ConsensusGenomeWhereClause = null): ConsensusGenome
  referenceGenomeLength: Float
  percentGenomeCalled: Float
  percentIdentity: Float
  gcPercent: Float
  totalReads: Int
  mappedReads: Int
  refSnps: Int
  nActg: Int
  nMissing: Int
  nAmbiguous: Int
  coverageDepth: Float
  coverageBreadth: Float
  coverageBinSize: Float
  coverageTotalLength: Int
  coverageViz: [[Int!]!]
}

type MetricConsensusGenomeAggregate {
  aggregate: MetricConsensusGenomeAggregateFunctions
}

type MetricConsensusGenomeAggregateFunctions {
  sum: MetricConsensusGenomeNumericalColumns
  avg: MetricConsensusGenomeNumericalColumns
  min: MetricConsensusGenomeMinMaxColumns
  max: MetricConsensusGenomeMinMaxColumns
  stddev: MetricConsensusGenomeNumericalColumns
  variance: MetricConsensusGenomeNumericalColumns
  count(distinct: Boolean = false, columns: MetricConsensusGenomeCountColumns = null): Int
}

"""A connection to a list of items."""
type MetricConsensusGenomeConnection {
  """Pagination data for this connection"""
  pageInfo: PageInfo!

  """Contains the nodes in this connection"""
  edges: [MetricConsensusGenomeEdge!]!
}

enum MetricConsensusGenomeCountColumns {
  consensus_genome
  reference_genome_length
  percent_genome_called
  percent_identity
  gc_percent
  total_reads
  mapped_reads
  ref_snps
  n_actg
  n_missing
  n_ambiguous
  coverage_depth
  coverage_breadth
  coverage_bin_size
  coverage_total_length
  coverage_viz
  entity_id
  id
  producing_run_id
  owner_user_id
  collection_id
  created_at
  updated_at
  deleted_at
}

input MetricConsensusGenomeCreateInput {
  collectionId: Int!
  consensusGenomeId: ID!
  referenceGenomeLength: Float = null
  percentGenomeCalled: Float = null
  percentIdentity: Float = null
  gcPercent: Float = null
  totalReads: Int = null
  mappedReads: Int = null
  refSnps: Int = null
  nActg: Int = null
  nMissing: Int = null
  nAmbiguous: Int = null
  coverageDepth: Float = null
  coverageBreadth: Float = null
  coverageBinSize: Float = null
  coverageTotalLength: Int = null
  coverageViz: [[Int!]!] = null
}

"""An edge in a connection."""
type MetricConsensusGenomeEdge {
  """A cursor for use in pagination"""
  cursor: String!

  """The item at the end of the edge"""
  node: MetricConsensusGenome!
}

type MetricConsensusGenomeMinMaxColumns {
  producingRunId: Int
  ownerUserId: Int
  collectionId: Int
  referenceGenomeLength: Float
  percentGenomeCalled: Float
  percentIdentity: Float
  gcPercent: Float
  totalReads: Int
  mappedReads: Int
  refSnps: Int
  nActg: Int
  nMissing: Int
  nAmbiguous: Int
  coverageDepth: Float
  coverageBreadth: Float
  coverageBinSize: Float
  coverageTotalLength: Int
}

type MetricConsensusGenomeNumericalColumns {
  producingRunId: Int
  ownerUserId: Int
  collectionId: Int
  referenceGenomeLength: Float
  percentGenomeCalled: Float
  percentIdentity: Float
  gcPercent: Float
  totalReads: Int
  mappedReads: Int
  refSnps: Int
  nActg: Int
  nMissing: Int
  nAmbiguous: Int
  coverageDepth: Float
  coverageBreadth: Float
  coverageBinSize: Float
  coverageTotalLength: Int
}

input MetricConsensusGenomeUpdateInput {
  collectionId: Int = null
  consensusGenomeId: ID = null
  referenceGenomeLength: Float = null
  percentGenomeCalled: Float = null
  percentIdentity: Float = null
  gcPercent: Float = null
  totalReads: Int = null
  mappedReads: Int = null
  refSnps: Int = null
  nActg: Int = null
  nMissing: Int = null
  nAmbiguous: Int = null
  coverageDepth: Float = null
  coverageBreadth: Float = null
  coverageBinSize: Float = null
  coverageTotalLength: Int = null
  coverageViz: [[Int!]!] = null
}

input MetricConsensusGenomeWhereClause {
  id: UUIDComparators
  producingRunId: IntComparators
  ownerUserId: IntComparators
  collectionId: IntComparators
  consensusGenome: ConsensusGenomeWhereClause
  referenceGenomeLength: FloatComparators
  percentGenomeCalled: FloatComparators
  percentIdentity: FloatComparators
  gcPercent: FloatComparators
  totalReads: IntComparators
  mappedReads: IntComparators
  refSnps: IntComparators
  nActg: IntComparators
  nMissing: IntComparators
  nAmbiguous: IntComparators
  coverageDepth: FloatComparators
  coverageBreadth: FloatComparators
  coverageBinSize: FloatComparators
  coverageTotalLength: IntComparators
}

input MetricConsensusGenomeWhereClauseMutations {
  id: UUIDComparators
}

type MultipartUploadCredentials {
  protocol: String!
  namespace: String!
  path: String!
  accessKeyId: String!
  secretAccessKey: String!
  sessionToken: String!
  expiration: String!
}

type MultipartUploadResponse {
  credentials: MultipartUploadCredentials!
  file: File!
}

type Mutation {
  createFile(entityId: ID!, entityFieldName: String!, file: FileCreate!): File!
  uploadFile(entityId: ID!, entityFieldName: String!, file: FileUpload!, expiration: Int! = 3600): MultipartUploadResponse!
  markUploadComplete(fileId: ID!): File!
  concatenateFiles(ids: [UUID!]!): SignedURL!
  createSample(input: SampleCreateInput!): Sample!
  updateSample(input: SampleUpdateInput!, where: SampleWhereClauseMutations!): [Sample!]!
  deleteSample(where: SampleWhereClauseMutations!): [Sample!]!
  createSequencingRead(input: SequencingReadCreateInput!): SequencingRead!
  updateSequencingRead(input: SequencingReadUpdateInput!, where: SequencingReadWhereClauseMutations!): [SequencingRead!]!
  deleteSequencingRead(where: SequencingReadWhereClauseMutations!): [SequencingRead!]!
  createGenomicRange(input: GenomicRangeCreateInput!): GenomicRange!
  updateGenomicRange(input: GenomicRangeUpdateInput!, where: GenomicRangeWhereClauseMutations!): [GenomicRange!]!
  deleteGenomicRange(where: GenomicRangeWhereClauseMutations!): [GenomicRange!]!
  createReferenceGenome(input: ReferenceGenomeCreateInput!): ReferenceGenome!
  updateReferenceGenome(input: ReferenceGenomeUpdateInput!, where: ReferenceGenomeWhereClauseMutations!): [ReferenceGenome!]!
  deleteReferenceGenome(where: ReferenceGenomeWhereClauseMutations!): [ReferenceGenome!]!
  createHostOrganism(input: HostOrganismCreateInput!): HostOrganism!
  updateHostOrganism(input: HostOrganismUpdateInput!, where: HostOrganismWhereClauseMutations!): [HostOrganism!]!
  deleteHostOrganism(where: HostOrganismWhereClauseMutations!): [HostOrganism!]!
  createMetadatum(input: MetadatumCreateInput!): Metadatum!
  updateMetadatum(input: MetadatumUpdateInput!, where: MetadatumWhereClauseMutations!): [Metadatum!]!
  deleteMetadatum(where: MetadatumWhereClauseMutations!): [Metadatum!]!
  createConsensusGenome(input: ConsensusGenomeCreateInput!): ConsensusGenome!
  updateConsensusGenome(input: ConsensusGenomeUpdateInput!, where: ConsensusGenomeWhereClauseMutations!): [ConsensusGenome!]!
  deleteConsensusGenome(where: ConsensusGenomeWhereClauseMutations!): [ConsensusGenome!]!
  createMetricConsensusGenome(input: MetricConsensusGenomeCreateInput!): MetricConsensusGenome!
  updateMetricConsensusGenome(input: MetricConsensusGenomeUpdateInput!, where: MetricConsensusGenomeWhereClauseMutations!): [MetricConsensusGenome!]!
  deleteMetricConsensusGenome(where: MetricConsensusGenomeWhereClauseMutations!): [MetricConsensusGenome!]!
  createTaxon(input: TaxonCreateInput!): Taxon!
  updateTaxon(input: TaxonUpdateInput!, where: TaxonWhereClauseMutations!): [Taxon!]!
  deleteTaxon(where: TaxonWhereClauseMutations!): [Taxon!]!
  createUpstreamDatabase(input: UpstreamDatabaseCreateInput!): UpstreamDatabase!
  updateUpstreamDatabase(input: UpstreamDatabaseUpdateInput!, where: UpstreamDatabaseWhereClauseMutations!): [UpstreamDatabase!]!
  deleteUpstreamDatabase(where: UpstreamDatabaseWhereClauseMutations!): [UpstreamDatabase!]!
  createContig(input: ContigCreateInput!): Contig!
  updateContig(input: ContigUpdateInput!, where: ContigWhereClauseMutations!): [Contig!]!
  deleteContig(where: ContigWhereClauseMutations!): [Contig!]!
  createPhylogeneticTree(input: PhylogeneticTreeCreateInput!): PhylogeneticTree!
  updatePhylogeneticTree(input: PhylogeneticTreeUpdateInput!, where: PhylogeneticTreeWhereClauseMutations!): [PhylogeneticTree!]!
  deletePhylogeneticTree(where: PhylogeneticTreeWhereClauseMutations!): [PhylogeneticTree!]!
  createBulkDownload(input: BulkDownloadCreateInput!): BulkDownload!
  updateBulkDownload(input: BulkDownloadUpdateInput!, where: BulkDownloadWhereClauseMutations!): [BulkDownload!]!
  deleteBulkDownload(where: BulkDownloadWhereClauseMutations!): [BulkDownload!]!
}

"""An object with a Globally Unique ID"""
interface Node {
  """The Globally Unique ID of this object"""
  _id: GlobalID!
}

enum NucleicAcid {
  RNA
  DNA
}

input NucleicAcidEnumComparators {
  _eq: NucleicAcid
  _neq: NucleicAcid
  _in: [NucleicAcid!]
  _nin: [NucleicAcid!]
  _gt: NucleicAcid
  _gte: NucleicAcid
  _lt: NucleicAcid
  _lte: NucleicAcid
  _is_null: NucleicAcid
}

"""Information to aid in pagination."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

type PhylogeneticTree implements EntityInterface & Node {
  """The Globally Unique ID of this object"""
  _id: GlobalID!
  id: ID!
  producingRunId: Int
  ownerUserId: Int!
  collectionId: Int!
  treeId: ID
  tree(where: FileWhereClause = null): File
  format: PhylogeneticTreeFormat!
}

type PhylogeneticTreeAggregate {
  aggregate: PhylogeneticTreeAggregateFunctions
}

type PhylogeneticTreeAggregateFunctions {
  sum: PhylogeneticTreeNumericalColumns
  avg: PhylogeneticTreeNumericalColumns
  min: PhylogeneticTreeMinMaxColumns
  max: PhylogeneticTreeMinMaxColumns
  stddev: PhylogeneticTreeNumericalColumns
  variance: PhylogeneticTreeNumericalColumns
  count(distinct: Boolean = false, columns: PhylogeneticTreeCountColumns = null): Int
}

enum PhylogeneticTreeCountColumns {
  tree
  format
  entity_id
  id
  producing_run_id
  owner_user_id
  collection_id
  created_at
  updated_at
  deleted_at
}

input PhylogeneticTreeCreateInput {
  collectionId: Int!
  treeId: ID = null
  format: PhylogeneticTreeFormat!
}

enum PhylogeneticTreeFormat {
  newick
  auspice_v1
  auspice_v2
}

input PhylogeneticTreeFormatEnumComparators {
  _eq: PhylogeneticTreeFormat
  _neq: PhylogeneticTreeFormat
  _in: [PhylogeneticTreeFormat!]
  _nin: [PhylogeneticTreeFormat!]
  _gt: PhylogeneticTreeFormat
  _gte: PhylogeneticTreeFormat
  _lt: PhylogeneticTreeFormat
  _lte: PhylogeneticTreeFormat
  _is_null: PhylogeneticTreeFormat
}

type PhylogeneticTreeMinMaxColumns {
  producingRunId: Int
  ownerUserId: Int
  collectionId: Int
}

type PhylogeneticTreeNumericalColumns {
  producingRunId: Int
  ownerUserId: Int
  collectionId: Int
}

input PhylogeneticTreeUpdateInput {
  collectionId: Int = null
  treeId: ID = null
  format: PhylogeneticTreeFormat = null
}

input PhylogeneticTreeWhereClause {
  id: UUIDComparators
  producingRunId: IntComparators
  ownerUserId: IntComparators
  collectionId: IntComparators
  format: PhylogeneticTreeFormatEnumComparators
}

input PhylogeneticTreeWhereClauseMutations {
  id: UUIDComparators
}

type Query {
  node(
    """The ID of the object."""
    id: GlobalID!
  ): Node!
  nodes(
    """The IDs of the objects."""
    ids: [GlobalID!]!
  ): [Node!]!
  files(where: FileWhereClause = null): [File!]!
  samples(where: SampleWhereClause = null): [Sample!]!
  sequencingReads(where: SequencingReadWhereClause = null): [SequencingRead!]!
  genomicRanges(where: GenomicRangeWhereClause = null): [GenomicRange!]!
  referenceGenomes(where: ReferenceGenomeWhereClause = null): [ReferenceGenome!]!
  hostOrganisms(where: HostOrganismWhereClause = null): [HostOrganism!]!
  metadatas(where: MetadatumWhereClause = null): [Metadatum!]!
  consensusGenomes(where: ConsensusGenomeWhereClause = null): [ConsensusGenome!]!
  metricsConsensusGenomes(where: MetricConsensusGenomeWhereClause = null): [MetricConsensusGenome!]!
  taxa(where: TaxonWhereClause = null): [Taxon!]!
  upstreamDatabases(where: UpstreamDatabaseWhereClause = null): [UpstreamDatabase!]!
  contigs(where: ContigWhereClause = null): [Contig!]!
  phylogeneticTrees(where: PhylogeneticTreeWhereClause = null): [PhylogeneticTree!]!
  bulkDownloads(where: BulkDownloadWhereClause = null): [BulkDownload!]!
  samplesAggregate(where: SampleWhereClause = null): SampleAggregate!
  sequencingReadsAggregate(where: SequencingReadWhereClause = null): SequencingReadAggregate!
  genomicRangesAggregate(where: GenomicRangeWhereClause = null): GenomicRangeAggregate!
  referenceGenomesAggregate(where: ReferenceGenomeWhereClause = null): ReferenceGenomeAggregate!
  hostOrganismsAggregate(where: HostOrganismWhereClause = null): HostOrganismAggregate!
  metadatasAggregate(where: MetadatumWhereClause = null): MetadatumAggregate!
  consensusGenomesAggregate(where: ConsensusGenomeWhereClause = null): ConsensusGenomeAggregate!
  metricsConsensusGenomesAggregate(where: MetricConsensusGenomeWhereClause = null): MetricConsensusGenomeAggregate!
  taxaAggregate(where: TaxonWhereClause = null): TaxonAggregate!
  upstreamDatabasesAggregate(where: UpstreamDatabaseWhereClause = null): UpstreamDatabaseAggregate!
  contigsAggregate(where: ContigWhereClause = null): ContigAggregate!
  phylogeneticTreesAggregate(where: PhylogeneticTreeWhereClause = null): PhylogeneticTreeAggregate!
  bulkDownloadsAggregate(where: BulkDownloadWhereClause = null): BulkDownloadAggregate!
}

type ReferenceGenome implements EntityInterface & Node {
  """The Globally Unique ID of this object"""
  _id: GlobalID!
  id: ID!
  producingRunId: Int
  ownerUserId: Int!
  collectionId: Int!
  fileId: ID
  file(where: FileWhereClause = null): File
  taxon(where: TaxonWhereClause = null): Taxon
  accessionId: String
  consensusGenomes(
    where: ConsensusGenomeWhereClause = null

    """Returns the items in the list that come before the specified cursor."""
    before: String = null

    """Returns the items in the list that come after the specified cursor."""
    after: String = null

    """Returns the first n items from the list."""
    first: Int = null

    """Returns the items in the list that come after the specified cursor."""
    last: Int = null
  ): ConsensusGenomeConnection!
  consensusGenomesAggregate(where: ConsensusGenomeWhereClause = null): ConsensusGenomeAggregate
  genomicRanges(
    where: GenomicRangeWhereClause = null

    """Returns the items in the list that come before the specified cursor."""
    before: String = null

    """Returns the items in the list that come after the specified cursor."""
    after: String = null

    """Returns the first n items from the list."""
    first: Int = null

    """Returns the items in the list that come after the specified cursor."""
    last: Int = null
  ): GenomicRangeConnection!
  genomicRangesAggregate(where: GenomicRangeWhereClause = null): GenomicRangeAggregate
}

type ReferenceGenomeAggregate {
  aggregate: ReferenceGenomeAggregateFunctions
}

type ReferenceGenomeAggregateFunctions {
  sum: ReferenceGenomeNumericalColumns
  avg: ReferenceGenomeNumericalColumns
  min: ReferenceGenomeMinMaxColumns
  max: ReferenceGenomeMinMaxColumns
  stddev: ReferenceGenomeNumericalColumns
  variance: ReferenceGenomeNumericalColumns
  count(distinct: Boolean = false, columns: ReferenceGenomeCountColumns = null): Int
}

"""A connection to a list of items."""
type ReferenceGenomeConnection {
  """Pagination data for this connection"""
  pageInfo: PageInfo!

  """Contains the nodes in this connection"""
  edges: [ReferenceGenomeEdge!]!
}

enum ReferenceGenomeCountColumns {
  file
  taxon
  accession_id
  consensus_genomes
  genomic_ranges
  entity_id
  id
  producing_run_id
  owner_user_id
  collection_id
  created_at
  updated_at
  deleted_at
}

input ReferenceGenomeCreateInput {
  collectionId: Int!
  fileId: ID = null
  taxonId: ID!
  accessionId: String = null
}

"""An edge in a connection."""
type ReferenceGenomeEdge {
  """A cursor for use in pagination"""
  cursor: String!

  """The item at the end of the edge"""
  node: ReferenceGenome!
}

type ReferenceGenomeMinMaxColumns {
  producingRunId: Int
  ownerUserId: Int
  collectionId: Int
  accessionId: String
}

type ReferenceGenomeNumericalColumns {
  producingRunId: Int
  ownerUserId: Int
  collectionId: Int
}

input ReferenceGenomeUpdateInput {
  collectionId: Int = null
  fileId: ID = null
  taxonId: ID = null
  accessionId: String = null
}

input ReferenceGenomeWhereClause {
  id: UUIDComparators
  producingRunId: IntComparators
  ownerUserId: IntComparators
  collectionId: IntComparators
  taxon: TaxonWhereClause
  accessionId: StrComparators
  consensusGenomes: ConsensusGenomeWhereClause
  genomicRanges: GenomicRangeWhereClause
}

input ReferenceGenomeWhereClauseMutations {
  id: UUIDComparators
}

type Sample implements EntityInterface & Node {
  """The Globally Unique ID of this object"""
  _id: GlobalID!
  id: ID!
  producingRunId: Int
  ownerUserId: Int!
  collectionId: Int!
  railsSampleId: Int
  name: String!
  sampleType: String!
  waterControl: Boolean!
  collectionDate: DateTime!
  collectionLocation: String!
  description: String
  hostTaxon(where: TaxonWhereClause = null): Taxon
  sequencingReads(
    where: SequencingReadWhereClause = null

    """Returns the items in the list that come before the specified cursor."""
    before: String = null

    """Returns the items in the list that come after the specified cursor."""
    after: String = null

    """Returns the first n items from the list."""
    first: Int = null

    """Returns the items in the list that come after the specified cursor."""
    last: Int = null
  ): SequencingReadConnection!
  sequencingReadsAggregate(where: SequencingReadWhereClause = null): SequencingReadAggregate
  metadatas(
    where: MetadatumWhereClause = null

    """Returns the items in the list that come before the specified cursor."""
    before: String = null

    """Returns the items in the list that come after the specified cursor."""
    after: String = null

    """Returns the first n items from the list."""
    first: Int = null

    """Returns the items in the list that come after the specified cursor."""
    last: Int = null
  ): MetadatumConnection!
  metadatasAggregate(where: MetadatumWhereClause = null): MetadatumAggregate
}

type SampleAggregate {
  aggregate: SampleAggregateFunctions
}

type SampleAggregateFunctions {
  sum: SampleNumericalColumns
  avg: SampleNumericalColumns
  min: SampleMinMaxColumns
  max: SampleMinMaxColumns
  stddev: SampleNumericalColumns
  variance: SampleNumericalColumns
  count(distinct: Boolean = false, columns: SampleCountColumns = null): Int
}

"""A connection to a list of items."""
type SampleConnection {
  """Pagination data for this connection"""
  pageInfo: PageInfo!

  """Contains the nodes in this connection"""
  edges: [SampleEdge!]!
}

enum SampleCountColumns {
  rails_sample_id
  name
  sample_type
  water_control
  collection_date
  collection_location
  description
  host_taxon
  sequencing_reads
  metadatas
  entity_id
  id
  producing_run_id
  owner_user_id
  collection_id
  created_at
  updated_at
  deleted_at
}

input SampleCreateInput {
  collectionId: Int!
  railsSampleId: Int = null
  name: String!
  sampleType: String!
  waterControl: Boolean!
  collectionDate: DateTime!
  collectionLocation: String!
  description: String = null
  hostTaxonId: ID = null
}

"""An edge in a connection."""
type SampleEdge {
  """A cursor for use in pagination"""
  cursor: String!

  """The item at the end of the edge"""
  node: Sample!
}

type SampleMinMaxColumns {
  producingRunId: Int
  ownerUserId: Int
  collectionId: Int
  railsSampleId: Int
  name: String
  sampleType: String
  collectionDate: DateTime
  collectionLocation: String
  description: String
}

type SampleNumericalColumns {
  producingRunId: Int
  ownerUserId: Int
  collectionId: Int
  railsSampleId: Int
}

input SampleUpdateInput {
  collectionId: Int = null
  railsSampleId: Int = null
  name: String = null
  sampleType: String = null
  waterControl: Boolean = null
  collectionDate: DateTime = null
  collectionLocation: String = null
  description: String = null
  hostTaxonId: ID = null
}

input SampleWhereClause {
  id: UUIDComparators
  producingRunId: IntComparators
  ownerUserId: IntComparators
  collectionId: IntComparators
  railsSampleId: IntComparators
  name: StrComparators
  sampleType: StrComparators
  waterControl: BoolComparators
  collectionDate: DatetimeComparators
  collectionLocation: StrComparators
  description: StrComparators
  hostTaxon: TaxonWhereClause
  sequencingReads: SequencingReadWhereClause
  metadatas: MetadatumWhereClause
}

input SampleWhereClauseMutations {
  id: UUIDComparators
}

enum SequencingProtocol {
  ampliseq
  artic
  artic_v3
  artic_v4
  artic_v5
  combined_msspe_artic
  covidseq
  midnight
  msspe
  snap
  varskip
  easyseq
}

input SequencingProtocolEnumComparators {
  _eq: SequencingProtocol
  _neq: SequencingProtocol
  _in: [SequencingProtocol!]
  _nin: [SequencingProtocol!]
  _gt: SequencingProtocol
  _gte: SequencingProtocol
  _lt: SequencingProtocol
  _lte: SequencingProtocol
  _is_null: SequencingProtocol
}

type SequencingRead implements EntityInterface & Node {
  """The Globally Unique ID of this object"""
  _id: GlobalID!
  id: ID!
  producingRunId: Int
  ownerUserId: Int!
  collectionId: Int!
  sample(where: SampleWhereClause = null): Sample
  protocol: SequencingProtocol
  r1FileId: ID
  r1File(where: FileWhereClause = null): File
  r2FileId: ID
  r2File(where: FileWhereClause = null): File
  technology: SequencingTechnology!
  nucleicAcid: NucleicAcid!
  taxon(where: TaxonWhereClause = null): Taxon
  primerFile(where: GenomicRangeWhereClause = null): GenomicRange
  consensusGenomes(
    where: ConsensusGenomeWhereClause = null

    """Returns the items in the list that come before the specified cursor."""
    before: String = null

    """Returns the items in the list that come after the specified cursor."""
    after: String = null

    """Returns the first n items from the list."""
    first: Int = null

    """Returns the items in the list that come after the specified cursor."""
    last: Int = null
  ): ConsensusGenomeConnection!
  consensusGenomesAggregate(where: ConsensusGenomeWhereClause = null): ConsensusGenomeAggregate
  contigs(
    where: ContigWhereClause = null

    """Returns the items in the list that come before the specified cursor."""
    before: String = null

    """Returns the items in the list that come after the specified cursor."""
    after: String = null

    """Returns the first n items from the list."""
    first: Int = null

    """Returns the items in the list that come after the specified cursor."""
    last: Int = null
  ): ContigConnection!
  contigsAggregate(where: ContigWhereClause = null): ContigAggregate
}

type SequencingReadAggregate {
  aggregate: SequencingReadAggregateFunctions
}

type SequencingReadAggregateFunctions {
  sum: SequencingReadNumericalColumns
  avg: SequencingReadNumericalColumns
  min: SequencingReadMinMaxColumns
  max: SequencingReadMinMaxColumns
  stddev: SequencingReadNumericalColumns
  variance: SequencingReadNumericalColumns
  count(distinct: Boolean = false, columns: SequencingReadCountColumns = null): Int
}

"""A connection to a list of items."""
type SequencingReadConnection {
  """Pagination data for this connection"""
  pageInfo: PageInfo!

  """Contains the nodes in this connection"""
  edges: [SequencingReadEdge!]!
}

enum SequencingReadCountColumns {
  sample
  protocol
  r1_file
  r2_file
  technology
  nucleic_acid
  taxon
  primer_file
  consensus_genomes
  contigs
  entity_id
  id
  producing_run_id
  owner_user_id
  collection_id
  created_at
  updated_at
  deleted_at
}

input SequencingReadCreateInput {
  collectionId: Int!
  sampleId: ID = null
  protocol: SequencingProtocol = null
  r1FileId: ID = null
  r2FileId: ID = null
  technology: SequencingTechnology!
  nucleicAcid: NucleicAcid!
  taxonId: ID = null
  primerFileId: ID = null
}

"""An edge in a connection."""
type SequencingReadEdge {
  """A cursor for use in pagination"""
  cursor: String!

  """The item at the end of the edge"""
  node: SequencingRead!
}

type SequencingReadMinMaxColumns {
  producingRunId: Int
  ownerUserId: Int
  collectionId: Int
}

type SequencingReadNumericalColumns {
  producingRunId: Int
  ownerUserId: Int
  collectionId: Int
}

input SequencingReadUpdateInput {
  collectionId: Int = null
  sampleId: ID = null
  protocol: SequencingProtocol = null
  r1FileId: ID = null
  r2FileId: ID = null
  technology: SequencingTechnology = null
  nucleicAcid: NucleicAcid = null
  taxonId: ID = null
  primerFileId: ID = null
}

input SequencingReadWhereClause {
  id: UUIDComparators
  producingRunId: IntComparators
  ownerUserId: IntComparators
  collectionId: IntComparators
  sample: SampleWhereClause
  protocol: SequencingProtocolEnumComparators
  technology: SequencingTechnologyEnumComparators
  nucleicAcid: NucleicAcidEnumComparators
  taxon: TaxonWhereClause
  primerFile: GenomicRangeWhereClause
  consensusGenomes: ConsensusGenomeWhereClause
  contigs: ContigWhereClause
}

input SequencingReadWhereClauseMutations {
  id: UUIDComparators
}

enum SequencingTechnology {
  Illumina
  Nanopore
}

input SequencingTechnologyEnumComparators {
  _eq: SequencingTechnology
  _neq: SequencingTechnology
  _in: [SequencingTechnology!]
  _nin: [SequencingTechnology!]
  _gt: SequencingTechnology
  _gte: SequencingTechnology
  _lt: SequencingTechnology
  _lte: SequencingTechnology
  _is_null: SequencingTechnology
}

type SignedURL {
  url: String!
  protocol: String!
  method: String!
  expiration: Int!
  fields: JSON
}

input StrComparators {
  _eq: String
  _neq: String
  _in: [String!]
  _nin: [String!]
  _is_null: Int
  _gt: String
  _gte: String
  _lt: String
  _lte: String
  _like: String
  _nlike: String
  _ilike: String
  _nilike: String
  _regex: String
  _nregex: String
  _iregex: String
  _niregex: String
}

type Taxon implements EntityInterface & Node {
  """The Globally Unique ID of this object"""
  _id: GlobalID!
  id: ID!
  producingRunId: Int
  ownerUserId: Int!
  collectionId: Int!
  wikipediaId: String
  description: String
  commonName: String
  name: String!
  isPhage: Boolean!
  upstreamDatabase(where: UpstreamDatabaseWhereClause = null): UpstreamDatabase
  upstreamDatabaseIdentifier: String!
  level: TaxonLevel!
  consensusGenomes(
    where: ConsensusGenomeWhereClause = null

    """Returns the items in the list that come before the specified cursor."""
    before: String = null

    """Returns the items in the list that come after the specified cursor."""
    after: String = null

    """Returns the first n items from the list."""
    first: Int = null

    """Returns the items in the list that come after the specified cursor."""
    last: Int = null
  ): ConsensusGenomeConnection!
  consensusGenomesAggregate(where: ConsensusGenomeWhereClause = null): ConsensusGenomeAggregate
  referenceGenomes(
    where: ReferenceGenomeWhereClause = null

    """Returns the items in the list that come before the specified cursor."""
    before: String = null

    """Returns the items in the list that come after the specified cursor."""
    after: String = null

    """Returns the first n items from the list."""
    first: Int = null

    """Returns the items in the list that come after the specified cursor."""
    last: Int = null
  ): ReferenceGenomeConnection!
  referenceGenomesAggregate(where: ReferenceGenomeWhereClause = null): ReferenceGenomeAggregate
  sequencingReads(
    where: SequencingReadWhereClause = null

    """Returns the items in the list that come before the specified cursor."""
    before: String = null

    """Returns the items in the list that come after the specified cursor."""
    after: String = null

    """Returns the first n items from the list."""
    first: Int = null

    """Returns the items in the list that come after the specified cursor."""
    last: Int = null
  ): SequencingReadConnection!
  sequencingReadsAggregate(where: SequencingReadWhereClause = null): SequencingReadAggregate
  samples(
    where: SampleWhereClause = null

    """Returns the items in the list that come before the specified cursor."""
    before: String = null

    """Returns the items in the list that come after the specified cursor."""
    after: String = null

    """Returns the first n items from the list."""
    first: Int = null

    """Returns the items in the list that come after the specified cursor."""
    last: Int = null
  ): SampleConnection!
  samplesAggregate(where: SampleWhereClause = null): SampleAggregate
}

type TaxonAggregate {
  aggregate: TaxonAggregateFunctions
}

type TaxonAggregateFunctions {
  sum: TaxonNumericalColumns
  avg: TaxonNumericalColumns
  min: TaxonMinMaxColumns
  max: TaxonMinMaxColumns
  stddev: TaxonNumericalColumns
  variance: TaxonNumericalColumns
  count(distinct: Boolean = false, columns: TaxonCountColumns = null): Int
}

"""A connection to a list of items."""
type TaxonConnection {
  """Pagination data for this connection"""
  pageInfo: PageInfo!

  """Contains the nodes in this connection"""
  edges: [TaxonEdge!]!
}

enum TaxonCountColumns {
  wikipedia_id
  description
  common_name
  name
  is_phage
  upstream_database
  upstream_database_identifier
  level
  tax_parent
  tax_subspecies
  tax_species
  tax_genus
  tax_family
  tax_order
  tax_class
  tax_phylum
  tax_kingdom
  tax_superkingdom
  consensus_genomes
  reference_genomes
  sequencing_reads
  samples
  entity_id
  id
  producing_run_id
  owner_user_id
  collection_id
  created_at
  updated_at
  deleted_at
}

input TaxonCreateInput {
  collectionId: Int!
  wikipediaId: String = null
  description: String = null
  commonName: String = null
  name: String!
  isPhage: Boolean!
  upstreamDatabaseId: ID!
  upstreamDatabaseIdentifier: String!
  level: TaxonLevel!
}

"""An edge in a connection."""
type TaxonEdge {
  """A cursor for use in pagination"""
  cursor: String!

  """The item at the end of the edge"""
  node: Taxon!
}

enum TaxonLevel {
  level_subspecies
  level_species
  level_genus
  level_family
  level_order
  level_class
  level_phylum
  level_kingdom
  level_superkingdom
}

input TaxonLevelEnumComparators {
  _eq: TaxonLevel
  _neq: TaxonLevel
  _in: [TaxonLevel!]
  _nin: [TaxonLevel!]
  _gt: TaxonLevel
  _gte: TaxonLevel
  _lt: TaxonLevel
  _lte: TaxonLevel
  _is_null: TaxonLevel
}

type TaxonMinMaxColumns {
  producingRunId: Int
  ownerUserId: Int
  collectionId: Int
  wikipediaId: String
  description: String
  commonName: String
  name: String
  upstreamDatabaseIdentifier: String
}

type TaxonNumericalColumns {
  producingRunId: Int
  ownerUserId: Int
  collectionId: Int
}

input TaxonUpdateInput {
  collectionId: Int = null
  wikipediaId: String = null
  description: String = null
  commonName: String = null
  name: String = null
  isPhage: Boolean = null
  upstreamDatabaseId: ID = null
  upstreamDatabaseIdentifier: String = null
  level: TaxonLevel = null
}

input TaxonWhereClause {
  id: UUIDComparators
  producingRunId: IntComparators
  ownerUserId: IntComparators
  collectionId: IntComparators
  wikipediaId: StrComparators
  description: StrComparators
  commonName: StrComparators
  name: StrComparators
  isPhage: BoolComparators
  upstreamDatabase: UpstreamDatabaseWhereClause
  upstreamDatabaseIdentifier: StrComparators
  level: TaxonLevelEnumComparators
  consensusGenomes: ConsensusGenomeWhereClause
  referenceGenomes: ReferenceGenomeWhereClause
  sequencingReads: SequencingReadWhereClause
  samples: SampleWhereClause
}

input TaxonWhereClauseMutations {
  id: UUIDComparators
}

scalar UUID

input UUIDComparators {
  _eq: UUID
  _neq: UUID
  _in: [UUID!]
  _nin: [UUID!]
  _gt: UUID
  _gte: UUID
  _lt: UUID
  _lte: UUID
}

type UpstreamDatabase implements EntityInterface & Node {
  """The Globally Unique ID of this object"""
  _id: GlobalID!
  id: ID!
  producingRunId: Int
  ownerUserId: Int!
  collectionId: Int!
  name: String!
  taxa(
    where: TaxonWhereClause = null

    """Returns the items in the list that come before the specified cursor."""
    before: String = null

    """Returns the items in the list that come after the specified cursor."""
    after: String = null

    """Returns the first n items from the list."""
    first: Int = null

    """Returns the items in the list that come after the specified cursor."""
    last: Int = null
  ): TaxonConnection!
  taxaAggregate(where: TaxonWhereClause = null): TaxonAggregate
}

type UpstreamDatabaseAggregate {
  aggregate: UpstreamDatabaseAggregateFunctions
}

type UpstreamDatabaseAggregateFunctions {
  sum: UpstreamDatabaseNumericalColumns
  avg: UpstreamDatabaseNumericalColumns
  min: UpstreamDatabaseMinMaxColumns
  max: UpstreamDatabaseMinMaxColumns
  stddev: UpstreamDatabaseNumericalColumns
  variance: UpstreamDatabaseNumericalColumns
  count(distinct: Boolean = false, columns: UpstreamDatabaseCountColumns = null): Int
}

enum UpstreamDatabaseCountColumns {
  name
  taxa
  entity_id
  id
  producing_run_id
  owner_user_id
  collection_id
  created_at
  updated_at
  deleted_at
}

input UpstreamDatabaseCreateInput {
  collectionId: Int!
  name: String!
}

type UpstreamDatabaseMinMaxColumns {
  producingRunId: Int
  ownerUserId: Int
  collectionId: Int
  name: String
}

type UpstreamDatabaseNumericalColumns {
  producingRunId: Int
  ownerUserId: Int
  collectionId: Int
}

input UpstreamDatabaseUpdateInput {
  collectionId: Int = null
  name: String = null
}

input UpstreamDatabaseWhereClause {
  id: UUIDComparators
  producingRunId: IntComparators
  ownerUserId: IntComparators
  collectionId: IntComparators
  name: StrComparators
  taxa: TaxonWhereClause
}

input UpstreamDatabaseWhereClauseMutations {
  id: UUIDComparators
}
