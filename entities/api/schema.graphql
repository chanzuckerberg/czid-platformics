interface EntityInterface {
  id: UUID!
}

input IntComparators {
  _eq: Int
  _neq: Int
  _in: [Int!]
  _nin: [Int!]
  _gt: Int
  _gte: Int
  _lt: Int
  _lte: Int
  _is_null: Int
}

type Query {
  samples(where: SampleWhereClause = null): [Sample!]!
  sequencingReads(where: SequencingReadWhereClause! = {}): [SequencingRead!]!
}

type Sample implements EntityInterface {
  id: UUID!
  producingRunid: Int!
  ownerUserId: Int!
  collectionId: Int!
  name: String!
  location: String!
  sequencingReads: SequencingRead!
}

input SampleWhereClause {
  id: UUIDComparators
  producingRunid: IntComparators
  ownerUserId: IntComparators
  collectionId: IntComparators
  name: StrComparators
  location: StrComparators
  sequencingReads: SequencingReadWhereClause
}

type SequencingRead implements EntityInterface {
  id: UUID!
  producingRunid: Int!
  ownerUserId: Int!
  collectionId: Int!
  sequence: String!
  sample: Sample!
}

input SequencingReadWhereClause {
  id: UUIDComparators
  producingRunid: IntComparators
  ownerUserId: IntComparators
  collectionId: IntComparators
  sequence: StrComparators
  sample: SampleWhereClause
}

input StrComparators {
  _eq: String
  _neq: String
  _in: [String!]
  _nin: [String!]
  _is_null: Int
  _gt: String
  _gte: String
  _lt: String
  _lte: String
  _like: String
  _nlike: String
  _ilike: String
  _nilike: String
  _regex: String
  _nregex: String
  _iregex: String
  _niregex: String
}

scalar UUID

input UUIDComparators {
  _eq: UUID
  _neq: UUID
  _in: [UUID!]
  _nin: [UUID!]
  _gt: UUID
  _gte: UUID
  _lt: UUID
  _lte: UUID
}
