# Auto-generated by running 'make codegen'. Do not edit.
# Make changes to the template codegen/templates/api/types/class_name.py.j2 instead.

import typing
import uuid
from typing import TYPE_CHECKING, Annotated, Optional

import database.models as db
import strawberry
from api.core.helpers import get_db_rows
from api.files import File, FileWhereClause
from api.types.entities import EntityInterface
from cerbos.sdk.client import CerbosClient
from cerbos.sdk.model import Principal
from fastapi import Depends
from platformics.api.core.deps import get_cerbos_client, get_db_session, require_auth_principal
from platformics.api.core.gql_to_sql import EnumComparators, IntComparators, StrComparators, UUIDComparators
from platformics.api.core.strawberry_extensions import DependencyExtension
from platformics.security.authorization import CerbosAction, get_resource_query
from sqlalchemy import inspect
from sqlalchemy.ext.asyncio import AsyncSession
from strawberry.dataloader import DataLoader
from strawberry.types import Info
from typing_extensions import TypedDict

{%- for field in cls.enum_fields %}
    {%- if loop.first %}
from support.enums import 
    {%- endif %}
    {{- " " }}
    {{- field.type}}
    {{- "," if not loop.last else "" }}
{%- endfor %}

E = typing.TypeVar("E", db.File, db.Entity)
T = typing.TypeVar("T")

if TYPE_CHECKING:
    {%- for related_field in cls.related_fields %}
        {%- if related_field.related_class.name not in ["File", "Entity"] %}
    from api.types.{{related_field.related_class.snake_name}}s import ({{related_field.related_class.name}}WhereClause, {{related_field.related_class.name}})
        {%- endif %}
    {%- endfor %}
else:
    {%- for related_field in cls.related_fields %}
        {%- if related_field.related_class.name not in ["File", "Entity"] %}
    {{related_field.related_class.name}}WhereClause = "{{related_field.related_class.name}}WhereClause"
    {{related_field.related_class.name}} = "{{related_field.related_class.name}}"
        {%- endif %}
    {%- endfor %}

# ------------------------------------------------------------------------------
# Dataloaders
# ------------------------------------------------------------------------------

def cache_key(key: dict) -> str:
    return key["id"]

{%- for related_field in cls.related_fields %}
    {%- if related_field.inverse and related_field.related_class.name not in ["File", "Entity"] %}

@strawberry.field(extensions=[DependencyExtension()])
        {%- if related_field.multivalued %}
async def load_{{ related_field.name }}(
    root: "{{ cls.name }}",
    info: Info,
    where: Annotated["{{ related_field.type }}WhereClause", strawberry.lazy("api.types.{{ related_field.name }}")] | None = None,
) -> typing.Sequence[Annotated["{{ related_field.type }}", strawberry.lazy("api.types.{{ related_field.name }}")]]:
        {%- else %}
async def load_{{ related_field.name }}s(
    root: "{{ cls.name }}",
    info: Info,
    where: Annotated["{{ related_field.type }}WhereClause", strawberry.lazy("api.types.{{ related_field.name }}s")] | None = None,
) -> Optional[Annotated["{{ related_field.type }}", strawberry.lazy("api.types.{{ related_field.name }}s")]]:
        {%- endif %}
    dataloader = info.context["sqlalchemy_loader"]
    mapper = inspect(db.{{ cls.name }})
    relationship = mapper.relationships["{{ related_field.name }}"]
        {%- if related_field.multivalued %}
    return await dataloader.loader_for(relationship, where).load(root.id)
        {%- else %}
    return await dataloader.loader_for(relationship, where).load(root.{{ related_field.name }}_id)
        {%- endif %}
    {%- endif %}
{%- endfor %}

# ------------------------------------------------------------------------------
# Dataloader for File object
# ------------------------------------------------------------------------------

# Given a list of {{ cls.name }} IDs for a certain file type, return related Files
def load_files_from(attr_name):
    @strawberry.field(extensions=[DependencyExtension()])
    async def load_files(
        root: "{{ cls.name }}",
        info: Info,
        where: Annotated["FileWhereClause", strawberry.lazy("api.files")] | None = None,
    ) -> Optional[Annotated["File", strawberry.lazy("api.files")]]:
        dataloader = info.context["sqlalchemy_loader"]
        mapper = inspect(db.{{ cls.name }})
        relationship = mapper.relationships[attr_name]
        return await dataloader.loader_for(relationship, where).load(getattr(root, f"{attr_name}_id"))

    return load_files

# ------------------------------------------------------------------------------
# Define Strawberry GQL types
# ------------------------------------------------------------------------------

# Supported WHERE clause attributes
@strawberry.input
class {{ cls.name }}WhereClause(TypedDict):
    id: UUIDComparators | None
    producing_run_id: IntComparators | None
    owner_user_id: IntComparators | None
    collection_id: IntComparators | None
    {%- for attr in cls.owned_fields %}
        {%- if attr.type == "uuid" %}
    {{ attr.name }}: Optional[UUIDComparators] | None
        {%- elif attr.type == "string" %}
    {{ attr.name }}: Optional[StrComparators] | None
        {%- elif attr.is_enum %}
    {{ attr.name }}: Optional[EnumComparators[{{ attr.type }}]] | None
        {%- elif attr.type == "integer" %}
    {{ attr.name }}: Optional[IntComparators] | None
        {%- elif attr.inverse %}
            {%- if attr.multivalued %}
    {{ attr.name }}: Optional[Annotated["{{ attr.type }}WhereClause", strawberry.lazy("api.types.{{ attr.name }}")]]
            {%- else %}
    {{ attr.name }}: Optional[Annotated["{{ attr.type }}WhereClause", strawberry.lazy("api.types.{{ attr.name }}s")]]
            {%- endif%}
        {%- endif %}
    {%- endfor %}

# Define {{ cls.name }} type
@strawberry.type
class {{ cls.name }}(EntityInterface):
    id: uuid.UUID
    producing_run_id: int
    owner_user_id: int
    collection_id: int
    {%- for attr in cls.owned_fields %}
        {%- if attr.type == "uuid" %}
    {{ attr.name }}: uuid.UUID
        {%- elif attr.type == "string" %}
    {{ attr.name }}: str
        {%- elif attr.is_enum %}
    {{ attr.name }}: {{ attr.type }}
        {%- elif attr.type == "integer" %}
    {{ attr.name }}: int
        {%- elif attr.type == "File" %}
    {{ attr.name }}_id: uuid.UUID
    {{ attr.name }}: Annotated["File", strawberry.lazy("api.files")] = load_files_from("{{ attr.name }}")
        {%- elif attr.inverse %}
            {%- if attr.multivalued %}
    {{ attr.name }}: typing.Sequence[Annotated["{{ attr.type }}", strawberry.lazy("api.types.{{ attr.name }}")]] = load_{{ attr.name }}
            {%- else %}
    {{ attr.name }}: Optional[Annotated["{{ attr.type }}", strawberry.lazy("api.types.{{ attr.name }}s")]] = load_{{ attr.name }}s
            {%- endif %}
        {%- endif %}
    {%- endfor %}

# We need to add this to each Queryable type so that strawberry will accept either our
# Strawberry type *or* a SQLAlchemy model instance as a valid response class from a resolver
{{ cls.name }}.__strawberry_definition__.is_type_of = (
    lambda obj, info: type(obj) == db.{{ cls.name }} or type(obj) == {{ cls.name }}
)

# Resolvers used in api/queries
@strawberry.field(extensions=[DependencyExtension()])
async def resolve_{{ cls.snake_name|lower }}s(
    session: AsyncSession = Depends(get_db_session, use_cache=False),
    cerbos_client: CerbosClient = Depends(get_cerbos_client),
    principal: Principal = Depends(require_auth_principal),
    where: Optional[{{ cls.name }}WhereClause] = None,
) -> typing.Sequence[{{ cls.name }}]:
    return await get_db_rows(db.{{ cls.name }}, session, cerbos_client, principal, where, [])  # type: ignore
