# Auto-generated by running 'make codegen'. Do not edit.
# Make changes to the template codegen/templates/api/types/class_name.py.j2 instead.

import uuid
import typing
from typing import Any, Mapping, Optional, Tuple

import database.models as db
import strawberry
from api.types.entities import EntityInterface
from cerbos.sdk.client import CerbosClient
from cerbos.sdk.model import Principal
from fastapi import Depends
from platformics.api.core.deps import get_cerbos_client, get_db_session, require_auth_principal
from platformics.api.core.gql_to_sql import EnumComparators, IntComparators, StrComparators, UUIDComparators
from platformics.security.authorization import CerbosAction, get_resource_query
from platformics.api.core.strawberry_extensions import DependencyExtension
from sqlalchemy import ForeignKey
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy.orm import Mapped, mapped_column
from sqlalchemy.dialects.postgresql import UUID
from strawberry.dataloader import DataLoader
from typing_extensions import TypedDict
from api.core.helpers import get_db_rows
from typing import TYPE_CHECKING, Annotated
{%- for field in cls.enum_fields %}
    {%- if loop.first %}
from support.enums import 
    {%- endif %}
    {{- " " }}
    {{- field.type}}
    {{- "," if not loop.last else "" }}
{%- endfor %}

E = typing.TypeVar("E", db.File, db.Entity)
T = typing.TypeVar("T")

if TYPE_CHECKING:
    {%- for related_field in cls.related_fields %}
        {%- if related_field.related_class.name not in ["File", "Entity"] %}
    from api.types.{{related_field.related_class.snake_name}}s import {{related_field.related_class.name}}WhereClause, {{related_field.related_class.name}}
        {%- endif %}
    {%- endfor %}
else:
    {%- for related_field in cls.related_fields %}
        {%- if related_field.related_class.name not in ["File", "Entity"] %}
    {{related_field.related_class.name}}WhereClause = "{{related_field.related_class.name}}WhereClause"
    {{related_field.related_class.name}} = "{{related_field.related_class.name}}"
        {%- endif %}
    {%- endfor %}

def cache_key(key: dict) -> str:
    return key["id"]

# Define dataloaders for nested where clauses
{%- for related_field in cls.related_fields %}
    {%- if related_field.inverse and related_field.related_class.name not in ["File", "Entity"] %}
async def batch_{{ related_field.name }}(
    keys: list[dict],
) -> Annotated["{{ related_field.type }}", strawberry.lazy("api.types.{{ related_field.name }}")]:
    session = keys[0]["session"]
    cerbos_client = keys[0]["cerbos_client"]
    principal = keys[0]["principal"]
    ids = [key["id"] for key in keys]

    query = get_resource_query(principal, cerbos_client, CerbosAction.VIEW, db.{{ related_field.type }})
    # For each id in ids, filter the query to only include rows where the related field matches that id
    # TODO: need to handle this for not 1:1 cases,
    # ex: a sequencing read can have many (or no) contigs; given a list of sequencing read ids [1, 2, 3],
    # return contig ids [[1, 2], [], [3]]
        {%- if related_field.multivalued %}
    query = query.filter(db.{{ related_field.type }}.{{cls.snake_name}}_id.in_(ids))
        {%- else %}
    query = query.filter(db.{{ related_field.type }}.{{cls.snake_name}}s.any(db.{{ cls.name }}.id.in_(ids)))
        {%- endif %}
    result = await session.execute(query)
    return result.scalars().all()


{{ related_field.name }}_loader = DataLoader(load_fn=batch_{{ related_field.name }}, cache_key_fn=cache_key)


@strawberry.field(extensions=[DependencyExtension()])
    {%- if related_field.multivalued %}
async def load_{{ related_field.name }}(
    {%- else %}
async def load_{{ related_field.name }}s(
    {%- endif %}
    root: "{{ cls.name }}",
    session: AsyncSession = Depends(get_db_session, use_cache=False),
    cerbos_client: CerbosClient = Depends(get_cerbos_client),
    principal: Principal = Depends(require_auth_principal),
) -> Annotated["SequencingRead", strawberry.lazy("api.types.{{ related_field.name }}")]:
    return await {{ related_field.name }}_loader.load(
        {"session": session, "cerbos_client": cerbos_client, "principal": principal, "id": root.id}
    )
    {%- endif %}
{%- endfor %}

@strawberry.input
class {{ cls.name }}WhereClause(TypedDict):
    id: UUIDComparators | None
    producing_run_id: IntComparators | None
    owner_user_id: IntComparators | None
    collection_id: IntComparators | None
    {%- for attr in cls.owned_fields %}
        {%- if attr.type == "uuid" %}
    {{ attr.name }}: Optional[UUIDComparators] | None
        {%- elif attr.type == "string" %}
    {{ attr.name }}: Optional[StrComparators] | None
        {%- elif attr.is_enum %}
    {{ attr.name }}: Optional[EnumComparators[{{ attr.type }}]] | None
        {%- elif attr.type == "integer" %}
    {{ attr.name }}: Optional[IntComparators] | None
        {%- elif attr.inverse %}
            {%- if attr.multivalued %}
    {{ attr.name }}: Optional[Annotated["{{ attr.type }}WhereClause", strawberry.lazy("api.types.{{ attr.name }}")]]
            {%- else %}
    {{ attr.name }}: Optional[Annotated["{{ attr.type }}WhereClause", strawberry.lazy("api.types.{{ attr.name }}s")]]
            {%- endif%}
        {%- endif %}
    {%- endfor %}

@strawberry.type
class {{ cls.name }}(EntityInterface):
    id: uuid.UUID
    producing_run_id: int
    owner_user_id: int
    collection_id: int
    {%- for attr in cls.owned_fields %}
        {%- if attr.type == "uuid" %}
    {{ attr.name }}: uuid.UUID
        {%- elif attr.type == "string" %}
    {{ attr.name }}: str
        {%- elif attr.is_enum %}
    {{ attr.name }}: {{ attr.type }}
        {%- elif attr.type == "integer" %}
    {{ attr.name }}: int
        {%- elif attr.type == "File" %}
    # TODO:
    # {{ attr.name }}_id: Mapped[uuid.UUID] = mapped_column(UUID, ForeignKey("file.id"), nullable=True)
    # {{ attr.name }}: Annotated["{{ attr.type }}", strawberry.lazy("api.types.{{ attr.name }}s")] = load_{{ attr.related_class.snake_name }}s
        {%- elif attr.inverse %}
            {%- if attr.multivalued %}
    {{ attr.name }}: Annotated["{{ attr.type }}", strawberry.lazy("api.types.{{ attr.name }}")] = load_{{ attr.name }}
            {%- else %}
    {{ attr.name }}: Annotated["{{ attr.type }}", strawberry.lazy("api.types.{{ attr.name }}s")] = load_{{ attr.name }}s
            {%- endif %}
        {%- endif %}
    {%- endfor %}

# We need to add this to each Queryable type so that strawberry will accept either our
# Strawberry type *or* a SQLAlchemy model instance as a valid response class from a resolver
{{ cls.name }}.__strawberry_definition__.is_type_of = (
    lambda obj, info: type(obj) == db.{{ cls.name }} or type(obj) == {{ cls.name }}
)

@strawberry.field(extensions=[DependencyExtension()])
async def resolve_{{ cls.snake_name|lower }}s(
    session: AsyncSession = Depends(get_db_session, use_cache=False),
    cerbos_client: CerbosClient = Depends(get_cerbos_client),
    principal: Principal = Depends(require_auth_principal),
    where: Optional[{{ cls.name }}WhereClause] = None,
) -> typing.Sequence[{{ cls.name }}]:
    return await get_db_rows(db.{{ cls.name }}, session, cerbos_client, principal, where, [])  # type: ignore
