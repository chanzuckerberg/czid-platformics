# Auto-generated by running 'make codegen'. Do not edit.
# Make changes to the template codegen/templates/api/types/class_name.py.j2 instead.

# ruff: noqa: E501 Line too long

import typing
from typing import TYPE_CHECKING, Annotated, Optional, Sequence, Callable

import database.models as db
import strawberry
import datetime
from api.core.helpers import get_db_rows
from api.files import File, FileWhereClause
from api.types.entities import EntityInterface
from cerbos.sdk.client import CerbosClient
from cerbos.sdk.model import Principal
from fastapi import Depends
from platformics.api.core.deps import get_cerbos_client, get_db_session, require_auth_principal
from platformics.api.core.gql_to_sql import EnumComparators, IntComparators, StrComparators, UUIDComparators, BoolComparators
from platformics.api.core.strawberry_extensions import DependencyExtension
from platformics.security.authorization import CerbosAction, get_resource_query
from sqlalchemy import inspect
from sqlalchemy.ext.asyncio import AsyncSession
from strawberry import relay
from strawberry.types import Info
from typing_extensions import TypedDict

{%- for field in cls.enum_fields %}
    {%- if loop.first %}
from support.enums import 
    {%- endif %}
    {{- " " }}
    {{- field.type}}
    {{- "," if not loop.last else "" }}
{%- endfor %}

E = typing.TypeVar("E", db.File, db.Entity)
T = typing.TypeVar("T")

if TYPE_CHECKING:
    {%- for related_field in cls.related_fields %}
        {%- if related_field.related_class.name not in ["File", "Entity"] %}
    from api.types.{{related_field.related_class.snake_name}} import ({{related_field.related_class.name}}WhereClause, {{related_field.related_class.name}})
        {%- endif %}
    {%- endfor %}
    pass
else:
    {%- for related_field in cls.related_fields %}
        {%- if related_field.related_class.name not in ["File", "Entity"] %}
    {{related_field.related_class.name}}WhereClause = "{{related_field.related_class.name}}WhereClause"
    {{related_field.related_class.name}} = "{{related_field.related_class.name}}"
        {%- endif %}
    {%- endfor %}
    pass


# ------------------------------------------------------------------------------
# Dataloaders
# ------------------------------------------------------------------------------

{%- for related_field in cls.related_fields %}
    {%- if related_field.inverse and related_field.related_class.name not in ["File", "Entity"] %}
        {%- if related_field.multivalued %}
@relay.connection(
        relay.ListConnection[Annotated["{{ related_field.type }}", strawberry.lazy("api.types.{{ related_field.related_class.snake_name }}")]]  # type:ignore
)
async def load_{{ related_field.related_class.snake_name }}_rows(
    root: "{{ cls.name }}",
    info: Info,
    where: Annotated["{{ related_field.type }}WhereClause", strawberry.lazy("api.types.{{ related_field.related_class.snake_name }}")] | None = None,
) -> Sequence[Annotated["{{ related_field.type }}", strawberry.lazy("api.types.{{ related_field.related_class.snake_name }}")]]:
        {%- else %}
@strawberry.field
async def load_{{ related_field.related_class.snake_name }}_rows(
    root: "{{ cls.name }}",
    info: Info,
    where: Annotated["{{ related_field.type }}WhereClause", strawberry.lazy("api.types.{{ related_field.related_class.snake_name }}")] | None = None,
) -> Optional[Annotated["{{ related_field.type }}", strawberry.lazy("api.types.{{ related_field.related_class.snake_name }}")]]:
        {%- endif %}
    dataloader = info.context["sqlalchemy_loader"]
    mapper = inspect(db.{{ cls.name }})
    relationship = mapper.relationships["{{ related_field.related_class.snake_name }}"]
        {%- if related_field.multivalued %}
    return await dataloader.loader_for(relationship, where).load(root.id)  # type:ignore
        {%- else %}
    return await dataloader.loader_for(relationship, where).load(root.{{ related_field.related_class.snake_name }}_id) # type:ignore
        {%- endif %}
    {%- endif %}
{%- endfor %}


{%- if cls.owned_fields | map(attribute="type") | select("equalto", "File") | list | length > 0 %}
# ------------------------------------------------------------------------------
# Dataloader for File object
# ------------------------------------------------------------------------------


# Given a list of {{ cls.name }} IDs for a certain file type, return related Files
def load_files_from(attr_name: str) -> Callable:
    @strawberry.field
    async def load_files(
        root: "{{ cls.name }}",
        info: Info,
        where: Annotated["FileWhereClause", strawberry.lazy("api.files")] | None = None,
    ) -> Optional[Annotated["File", strawberry.lazy("api.files")]]:
        dataloader = info.context["sqlalchemy_loader"]
        mapper = inspect(db.{{ cls.name }})
        relationship = mapper.relationships[attr_name]
        return await dataloader.loader_for(relationship, where).load(getattr(root, f"{attr_name}_id"))  # type:ignore

    return load_files
{%- endif %}


# ------------------------------------------------------------------------------
# Define Strawberry GQL types
# ------------------------------------------------------------------------------

# Supported WHERE clause attributes
@strawberry.input
class {{ cls.name }}WhereClause(TypedDict):
    id: UUIDComparators | None
    producing_run_id: IntComparators | None
    owner_user_id: IntComparators | None
    collection_id: IntComparators | None
    {%- for attr in cls.owned_fields %}
        {%- if attr.type == "uuid" %}
    {{ attr.name }}: Optional[UUIDComparators] | None
        {%- elif attr.type == "string" %}
    {{ attr.name }}: Optional[StrComparators] | None
        {%- elif attr.is_enum %}
    {{ attr.name }}: Optional[EnumComparators[{{ attr.type }}]] | None
        {%- elif attr.type == "int" %}
    {{ attr.name }}: Optional[IntComparators] | None
        {%- elif attr.type == "boolean" %}
    {{ attr.name }}: Optional[BoolComparators] | None
        {%- elif attr.type == "date" %}
    # TODO: Add proper datetime comparator
    {{ attr.name }}: Optional[StrComparators] | None
        {%- elif attr.inverse %}
    {{ attr.name }}: Optional[Annotated["{{ attr.type }}WhereClause", strawberry.lazy("api.types.{{ attr.related_class.snake_name }}")]] | None
        {%- endif %}
    {%- endfor %}

# Define {{ cls.name }} type
@strawberry.type
class {{ cls.name }}(EntityInterface):
    id: strawberry.ID
    {%- for attr in cls.owned_fields %}
        {%- if attr.type == "uuid" %}
    {{ attr.name }}: strawberry.ID
        {%- elif attr.type == "string" %}
    {{ attr.name }}: str
        {%- elif attr.is_enum %}
    {{ attr.name }}: {{ attr.type }}
        {%- elif attr.type == "int" %}
    {{ attr.name }}: int
        {%- elif attr.type == "boolean" %}
    {{ attr.name }}: bool
        {%- elif attr.type == "date" %}
    {{ attr.name }}: datetime.datetime
        {%- elif attr.type == "File" %}
    {{ attr.name }}_id: strawberry.ID
    {{ attr.name }}: Annotated["File", strawberry.lazy("api.files")] = load_files_from("{{ attr.name }}")  # type: ignore
        {%- elif attr.inverse %}
    {{ attr.name }}: {{ "Sequence" if attr.multivalued else "Optional" }}[Annotated["{{ attr.type }}", strawberry.lazy("api.types.{{ attr.related_class.snake_name }}")]] = load_{{ attr.related_class.snake_name }}_rows  # type:ignore
        {%- endif %}
    {%- endfor %}


# ------------------------------------------------------------------------------
# Mutation types
# ------------------------------------------------------------------------------
{# Macro to output X or Optional[X] #}
{% macro inputType(action, type) -%}
    {%- if action == "Create" %} {{ type }}
    {%- elif action == "Update" %} Optional[{{ type }}]
    {%- endif %}
{%- endmacro %}

{# Generate Create and Update Strawberry input types #}
{%- for action in ["Create", "Update"] %}
@strawberry.input()
class {{ cls.name }}{{ action }}Input:
    {%- for attr in cls.owned_fields %}
        {%- if attr.type == "uuid" %} {# Don't allow setting UUID fields #}
        {%- elif attr.type == "string" %}
    {{ attr.name }}: {{ inputType(action, "str") }}
        {%- elif attr.is_enum %}
    {{ attr.name }}: {{ inputType(action, attr.type) }}
        {%- elif attr.type == "int" %}
    {{ attr.name }}: {{ inputType(action, "int") }}
        {%- elif attr.type == "boolean" %}
    {{ attr.name }}: {{ inputType(action, "bool") }}
        {%- elif attr.type == "date" %}
    {{ attr.name }}: {{ inputType(action, "datetime.datetime") }}
        {%- elif attr.type == "File" %}
    {{ attr.name }}_id: {{ inputType(action, "strawberry.ID") }}
        {%- elif attr.inverse and not attr.multivalued %} {# Don't include multivalued fields, only fields where can update an ID #}
    {{ attr.name }}_id: {{ inputType(action, "strawberry.ID") }}
        {%- endif %}
    {%- endfor %}
{%- endfor %}


# ------------------------------------------------------------------------------
# Setup and utilities
# ------------------------------------------------------------------------------

# We need to add this to each Queryable type so that strawberry will accept either our
# Strawberry type *or* a SQLAlchemy model instance as a valid response class from a resolver
{{ cls.name }}.__strawberry_definition__.is_type_of = (  # type: ignore
    lambda obj, info: type(obj) == db.{{ cls.name }} or type(obj) == {{ cls.name }}
)

# Resolvers used in api/queries
@strawberry.field(extensions=[DependencyExtension()])
async def resolve_{{ cls.snake_name|lower }}(
    session: AsyncSession = Depends(get_db_session, use_cache=False),
    cerbos_client: CerbosClient = Depends(get_cerbos_client),
    principal: Principal = Depends(require_auth_principal),
    where: Optional[{{ cls.name }}WhereClause] = None,
) -> typing.Sequence[{{ cls.name }}]:
    return await get_db_rows(db.{{ cls.name }}, session, cerbos_client, principal, where, [])  # type: ignore
