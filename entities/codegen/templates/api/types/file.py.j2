import typing
import uuid
from collections import defaultdict
from typing import Any, Mapping, Optional, Tuple

import database.models as db
import strawberry
from cerbos.sdk.client import CerbosClient
from cerbos.sdk.model import Principal, Resource
from fastapi import Depends
from platformics.api.core.deps import get_cerbos_client, get_db_session, require_auth_principal
from platformics.api.core.strawberry_extensions import DependencyExtension
from platformics.database.connect import AsyncDB
from sqlalchemy import ColumnElement, ColumnExpressionArgument, tuple_
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy.orm import RelationshipProperty
from strawberry.arguments import StrawberryArgument
from strawberry.dataloader import DataLoader
from platformics.security.authorization import get_resource_query, CerbosAction
from platformics.api.core.gql_to_sql import strawberry_sqlalchemy_mapper

E = typing.TypeVar("E", db.File, db.Entity)
T = typing.TypeVar("T")

@strawberry.input
class FileSetParams(TypedDict):
    status: typing.Optional[FileStatus]
    protocol: typing.Optional[str]
    namespace: typing.Optional[str]
    path: typing.Optional[str]
    compression_type: typing.Optional[str]

@strawberry.type
class FileUpdated:
    def __init__(self, **kwargs) -> None:
        for k, v in kwargs.items():
            setattr(self, k, v)

    returning: list[File]

@strawberry.field(extensions=[DependencyExtension()])
async def update_one_file(
    session: AsyncSession = Depends(get_db_session, use_cache=False),
    cerbos_client: CerbosClient = Depends(get_cerbos_client),
    principal: Principal = Depends(require_auth_principal),
    where: FileWhereClause = {},
    _set: FileSetParams = {},
) -> FileUpdated:
    pass
