# Auto-generated by running 'make codegen'. Do not edit.
# Make changes to the template codegen/templates/test_infra/factories/class_name.py.j2 instead.

# ruff: noqa: E501 Line too long

import factory
from database.models import {{ cls.name }}
from test_infra.factories.main import CommonFactory, FileFactory
{%- for field in cls.related_fields %}
    {%- if field.inverse and field.related_class.name != "Entity" and not field.multivalued%}
from test_infra.factories.{{ field.related_class.snake_name }} import {{ field.related_class.name }}Factory
    {%- endif %}
{%- endfor %}
from factory import Faker, fuzzy
from faker_biology.bioseq import Bioseq
from faker_biology.physiology import Organ
from faker_enum import EnumProvider

Faker.add_provider(Bioseq)
Faker.add_provider(Organ)
Faker.add_provider(EnumProvider)


class {{ cls.name }}Factory(CommonFactory):
{%- if cls.name not in ["Entity", "File"] %}
    class Meta:
        sqlalchemy_session = None  # workaround for a bug in factoryboy
        model = {{ cls.name }}
        # TODO:
        # What fields do we try to match to existing db rows to determine whether we
        # should create a new row or not?
        # sqlalchemy_get_or_create = ("name", "collection_location")

    {%- for field in cls.owned_fields %}
        {%- if field.type != "uuid" %}
            {%- if field.inverse and field.related_class.name != "Entity" %}
                {%- if not field.multivalued %}
    {{ field.name }} = factory.SubFactory(
        {{ field.related_class.name }}Factory,
        owner_user_id=factory.SelfAttribute("..owner_user_id"),
        collection_id=factory.SelfAttribute("..collection_id"),
    )
                {%- endif %}
            {%- elif field.type == "File" %}
    {{ field.name }} = factory.RelatedFactory(
        FileFactory,
        factory_related_name="entity",
        entity_field_name="{{ field.name }}",
        file_format="fastq", {# TODO: how to pick file_format #}
    )
            {%- elif field.is_enum %}
    {{ field.name }} = fuzzy.FuzzyChoice([
        {%- for value in field.related_enum.permissible_values %}
        "{{ value }}"
        {{- ", " if not loop.last else "" }}
        {%- endfor %}
    ])
            {%- else %}
                {%- if field.test_type is not none %}
    {{ field.name }} = factory.Faker("{{ field.test_type }}")
                {%- else %}
    {{ field.name }} = factory.Faker("{{ field.type }}") {# TODO: how to determine what factory.Faker to use? #}
                {%- endif %}
            {%- endif %}
        {%- endif %}
    {%- endfor %}
{%- endif %}
