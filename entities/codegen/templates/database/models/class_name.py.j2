import uuid
from typing import TYPE_CHECKING

from platformics.database.models.base import Entity
from sqlalchemy import ForeignKey, String, Float, Integer, Enum
from sqlalchemy.dialects.postgresql import UUID
from sqlalchemy.orm import Mapped, mapped_column, relationship

if TYPE_CHECKING:
    from database.models.files import File
    {%- for related_field in cls.related_fields %}
    from database.models.{{related_field.related_class.snake_name}} import {{related_field.related_class.name}}
    {%- endfor %}
    {%- for field in cls.enum_fields %}
        {%- if loop.first %}
    from support.enums import 
        {%- endif %}
        {{- " " }}
        {{- field.type}}
        {{- "," if not loop.last else "" }}
    {%- endfor %}
else:
    File = "File"
    {%- for related_field in cls.related_fields %}
    {{related_field.related_class.name}} = "{{related_field.related_class.name}}"
    {%- endfor %}
    {%- for enum_field in cls.enum_fields %}
    {{enum_field.type}} = "{{enum_field.type}}"
    {%- endfor %}


class {{cls.name}}(Entity):
    __tablename__ = "{{ cls.snake_name }}"
    __mapper_args__ = {"polymorphic_identity": __tablename__, "polymorphic_load": "inline"}

    {%- for attr in cls.fields %}
        {%- if attr.type == "string" %}
    {{attr.name}}: Mapped[str] = mapped_column(String, nullable={{ "True" if attr.required else "False"}})
        {%- elif attr.type == "integer" %}
    {{attr.name}}: Mapped[int] = mapped_column(Integer, nullable={{ "True" if attr.required else "False"}})
        {%- elif attr.type == "float" %}
    {{attr.name}}: Mapped[int] = mapped_column(Float, nullable={{ "True" if attr.required else "False"}})
        {%- elif attr.is_enum %}
    {{attr.name}}: Mapped[{{attr.type}}] = mapped_column(Enum({{attr.type}}), nullable={{ "True" if attr.required else "False"}})
        {%- else %}
            {% if attr.multivalued %}
    {{attr.name}}: Mapped[{{attr.type}}] = relationship("{{attr.type}}", back_populates="TODO", foreign_keys="TODO")
            {% else %}
    {{attr.name}}_id: Mapped[uuid.UUID] = mapped_column(UUID, ForeignKey("TODO"), nullable={{"True" if attr.required else "False"}})
    {{attr.name}}: Mapped[{{attr.type}}] = relationship("{{attr.type}}", back_populates="TODO", foreign_keys={{attr.name}}_id)
            {% endif %}
        {%- endif %}
    {%- endfor %}